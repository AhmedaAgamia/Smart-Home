
final_project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00800060  00004e1e  00004eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008001f8  008001f8  0000504a  2**0
                  ALLOC
  3 .stab         00004f38  00000000  00000000  0000504c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a8c  00000000  00000000  00009f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ba10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000bde4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000e3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000110b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_1>
       8:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_2>
       c:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_10>
      2c:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <main>
      8a:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 ec       	ldi	r22, 0xC7	; 199
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e6 26 	jmp	0x4dcc	; 0x4dcc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e1 53       	subi	r30, 0x31	; 49
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <M_WDT_void_enable>:

#include "WDT_priv.h"
#include "WDT_config.h"
#include "WDT_int.h"
void M_WDT_void_enable(void)// turn on WDT
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
   SET_BIT(WDTCR_REG ,WDE_BIT);
     ef2:	a1 e4       	ldi	r26, 0x41	; 65
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e4       	ldi	r30, 0x41	; 65
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <M_WDT_void_disable>:
void M_WDT_void_disable(void)// turn off WDT
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	WDTCR_REG |= (1<<WDTOE_BIT) | (1<<WDE_BIT);
     f0e:	a1 e4       	ldi	r26, 0x41	; 65
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e4       	ldi	r30, 0x41	; 65
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	88 61       	ori	r24, 0x18	; 24
     f1a:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR_REG = 0x00;
     f1c:	e1 e4       	ldi	r30, 0x41	; 65
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	10 82       	st	Z, r1
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <M_WDT_void_sleep>:
void M_WDT_void_sleep(u8 copy_timeOut )// timeout
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	0f 92       	push	r0
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
	if (copy_timeOut >= WDT_TIMEOUT_16_3_MS && copy_timeOut <= WDT_TIMEOUT_2_1_S)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	88 30       	cpi	r24, 0x08	; 8
     f38:	78 f4       	brcc	.+30     	; 0xf58 <M_WDT_void_sleep+0x30>
	{
		// step 1 : apply mask
			WDTCR_REG &= WDT_PRESCALER_MASK;
     f3a:	a1 e4       	ldi	r26, 0x41	; 65
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e1 e4       	ldi	r30, 0x41	; 65
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	88 7f       	andi	r24, 0xF8	; 248
     f46:	8c 93       	st	X, r24
		// step 2 : insert value
			WDTCR_REG |= copy_timeOut;
     f48:	a1 e4       	ldi	r26, 0x41	; 65
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e1 e4       	ldi	r30, 0x41	; 65
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	90 81       	ld	r25, Z
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	89 2b       	or	r24, r25
     f56:	8c 93       	st	X, r24
	}

}
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <M_WDT_void_refersh>:
void M_WDT_void_refersh(void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
   asm("WDR");
     f68:	a8 95       	wdr
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <M_TIMER1_void_init>:



static void (*ICU_CallBackPtr)(void) = NULL;
void M_TIMER1_void_init(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	//step one set normal mode
	CLR_BIT(TCCR1A_REG , WGM10_BIT);
     f78:	af e4       	ldi	r26, 0x4F	; 79
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ef e4       	ldi	r30, 0x4F	; 79
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8e 7f       	andi	r24, 0xFE	; 254
     f84:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG , WGM11_BIT);
     f86:	af e4       	ldi	r26, 0x4F	; 79
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ef e4       	ldi	r30, 0x4F	; 79
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8d 7f       	andi	r24, 0xFD	; 253
     f92:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_REG , WGM12_BIT);
     f94:	ae e4       	ldi	r26, 0x4E	; 78
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ee e4       	ldi	r30, 0x4E	; 78
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	87 7f       	andi	r24, 0xF7	; 247
     fa0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG , WGM13_BIT);
     fa2:	ae e4       	ldi	r26, 0x4E	; 78
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ee e4       	ldi	r30, 0x4E	; 78
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7e       	andi	r24, 0xEF	; 239
     fae:	8c 93       	st	X, r24

	//step2 :set prescaler as 256
	CLR_BIT(TCCR1B_REG , CS10_BIT);
     fb0:	ae e4       	ldi	r26, 0x4E	; 78
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee e4       	ldi	r30, 0x4E	; 78
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8e 7f       	andi	r24, 0xFE	; 254
     fbc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG , CS11_BIT);
     fbe:	ae e4       	ldi	r26, 0x4E	; 78
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8d 7f       	andi	r24, 0xFD	; 253
     fca:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG , CS12_BIT);
     fcc:	ae e4       	ldi	r26, 0x4E	; 78
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ee e4       	ldi	r30, 0x4E	; 78
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	84 60       	ori	r24, 0x04	; 4
     fd8:	8c 93       	st	X, r24



}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <M_TIMER1_ICU_void_init>:
void M_TIMER1_ICU_void_init(void) //setup initial trigger for ICU
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	//set initial trigger as rising rdge
	SET_BIT(TCCR1B_REG , ICES1_BIT);
     fe8:	ae e4       	ldi	r26, 0x4E	; 78
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ee e4       	ldi	r30, 0x4E	; 78
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 64       	ori	r24, 0x40	; 64
     ff4:	8c 93       	st	X, r24

}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <M_TIMER1_ICU_void_IntEnable>:
void M_TIMER1_ICU_void_IntEnable(void)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	//enable interrupt
	SET_BIT(TIMSK_REG , TICIE1_BIT);
    1004:	a9 e5       	ldi	r26, 0x59	; 89
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e9 e5       	ldi	r30, 0x59	; 89
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 62       	ori	r24, 0x20	; 32
    1010:	8c 93       	st	X, r24
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <M_TIMER1_ICU_void_IntDisable>:
void M_TIMER1_ICU_void_IntDisable(void)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	//disable interrupt
	CLR_BIT(TIMSK_REG , TICIE1_BIT);
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 7d       	andi	r24, 0xDF	; 223
    102c:	8c 93       	st	X, r24
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <M_TIMER1_ICU_void_setTrigg>:
void M_TIMER1_ICU_void_setTrigg(u8 copy_u8Trigg)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <M_TIMER1_ICU_void_setTrigg+0x6>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Trigg)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3b 83       	std	Y+3, r19	; 0x03
    104a:	2a 83       	std	Y+2, r18	; 0x02
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	31 f0       	breq	.+12     	; 0x1060 <M_TIMER1_ICU_void_setTrigg+0x2c>
    1054:	2a 81       	ldd	r18, Y+2	; 0x02
    1056:	3b 81       	ldd	r19, Y+3	; 0x03
    1058:	21 30       	cpi	r18, 0x01	; 1
    105a:	31 05       	cpc	r19, r1
    105c:	49 f0       	breq	.+18     	; 0x1070 <M_TIMER1_ICU_void_setTrigg+0x3c>
    105e:	0f c0       	rjmp	.+30     	; 0x107e <M_TIMER1_ICU_void_setTrigg+0x4a>
	{
	case  TIMER1_ICU_FALL_TRIGG  :
		CLR_BIT(TCCR1B_REG , ICES1_BIT);
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7b       	andi	r24, 0xBF	; 191
    106c:	8c 93       	st	X, r24
    106e:	07 c0       	rjmp	.+14     	; 0x107e <M_TIMER1_ICU_void_setTrigg+0x4a>
	break;
	case  TIMER1_ICU_RISING_TRIGG :
	     SET_BIT(TCCR1B_REG , ICES1_BIT);
    1070:	ae e4       	ldi	r26, 0x4E	; 78
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e4       	ldi	r30, 0x4E	; 78
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	8c 93       	st	X, r24
	break;
	}
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <M_TIMER1_ICU_void_setCallBack>:
void M_TIMER1_ICU_void_setCallBack(void (*ptrfn)(void))
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <M_TIMER1_ICU_void_setCallBack+0x6>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn != NULL)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	31 f0       	breq	.+12     	; 0x10ac <M_TIMER1_ICU_void_setCallBack+0x22>
	{
		ICU_CallBackPtr = ptrfn;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	90 93 f9 01 	sts	0x01F9, r25
    10a8:	80 93 f8 01 	sts	0x01F8, r24
	}
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	2f 93       	push	r18
    10c2:	3f 93       	push	r19
    10c4:	4f 93       	push	r20
    10c6:	5f 93       	push	r21
    10c8:	6f 93       	push	r22
    10ca:	7f 93       	push	r23
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	ef 93       	push	r30
    10d6:	ff 93       	push	r31
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBackPtr != NULL)
    10e0:	80 91 f8 01 	lds	r24, 0x01F8
    10e4:	90 91 f9 01 	lds	r25, 0x01F9
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	29 f0       	breq	.+10     	; 0x10f6 <__vector_6+0x40>
	{
		ICU_CallBackPtr();
    10ec:	e0 91 f8 01 	lds	r30, 0x01F8
    10f0:	f0 91 f9 01 	lds	r31, 0x01F9
    10f4:	09 95       	icall
	}
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <M_TIMER1_ICU_u16_takeReading>:

u16  M_TIMER1_ICU_u16_takeReading(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    1124:	e6 e4       	ldi	r30, 0x46	; 70
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	91 81       	ldd	r25, Z+1	; 0x01
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <M_TIMER0_void_Init>:
//static u32  NoOFDesiredTicks   = 0;
 static u32  NumberOFOverflows        = 0;
 static u32  NumberOFRemainingTicks   = 0;
 static void (*Arr_CallBack[2])(void)={NULL,NULL};
void M_TIMER0_void_Init(void)   //set timer mode , set Oc0 pin mode
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
		      #else
		         #error ("Wrong OC0 Mode")
		      #endif

#elif(TIMER0_MODE== TIMER0_FAST_PWM_MODE )
		SET_BIT(TCCR0_REG,WGM00_BIT);
    113a:	a3 e5       	ldi	r26, 0x53	; 83
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 e5       	ldi	r30, 0x53	; 83
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01_BIT);
    1148:	a3 e5       	ldi	r26, 0x53	; 83
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e3 e5       	ldi	r30, 0x53	; 83
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	88 60       	ori	r24, 0x08	; 8
    1154:	8c 93       	st	X, r24
#endif


	// step 2 : under each mode configer OC0 mode pin mode
#if(TIMER0_OC0_MODE == TIMER0_OC0_MODE_DISSCONECTED)
		CLR_BIT(TCCR0_REG,WGM00_BIT);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8f 7b       	andi	r24, 0xBF	; 191
    1162:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,WGM01_BIT);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	87 7f       	andi	r24, 0xF7	; 247
    1170:	8c 93       	st	X, r24

#else
#error ("wrong timer Mode")

#endif
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <M_TIMER0_void_start>:
void M_TIMER0_void_start(void) //set clock prescaler
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER >=TIMER0_PRESCALER_NO_CLOCK && TIMER0_PRESCALER <= TIMER0_PRESCALER_EXTCLK_RAIS_EDGE )
	//step1  :apply mask
	TCCR0_REG &= TIMER0_PRESCALER_MASK ;
    1180:	a3 e5       	ldi	r26, 0x53	; 83
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e3 e5       	ldi	r30, 0x53	; 83
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 7f       	andi	r24, 0xF8	; 248
    118c:	8c 93       	st	X, r24

	//step 2 :insert value
	TCCR0_REG |=  TIMER0_PRESCALER;
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	84 60       	ori	r24, 0x04	; 4
    119a:	8c 93       	st	X, r24

#else
#error ("wrong")
#endif

}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <M_TIMER0_void_stop>:
void M_TIMER0_void_stop(void)  //no clock
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	//step1  :apply mask
		TCCR0_REG &= TIMER0_PRESCALER_MASK ;
    11aa:	a3 e5       	ldi	r26, 0x53	; 83
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e3 e5       	ldi	r30, 0x53	; 83
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	8c 93       	st	X, r24

	//step 2 :insert value
	//	TCCR0_REG =  TIMER0_PRESCALER_NO_CLOCK

}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <M_TIMER0_void_setTime>:
void M_TIMER0_void_setTime(u32 copy_u32timeMS)  //time in millie sec
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	a5 97       	sbiw	r28, 0x25	; 37
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	6d 8f       	std	Y+29, r22	; 0x1d
    11d4:	7e 8f       	std	Y+30, r23	; 0x1e
    11d6:	8f 8f       	std	Y+31, r24	; 0x1f
    11d8:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024} ;
    11da:	ce 01       	movw	r24, r28
    11dc:	09 96       	adiw	r24, 0x09	; 9
    11de:	9a a3       	std	Y+34, r25	; 0x22
    11e0:	89 a3       	std	Y+33, r24	; 0x21
    11e2:	e3 ed       	ldi	r30, 0xD3	; 211
    11e4:	f1 e0       	ldi	r31, 0x01	; 1
    11e6:	fc a3       	std	Y+36, r31	; 0x24
    11e8:	eb a3       	std	Y+35, r30	; 0x23
    11ea:	f4 e1       	ldi	r31, 0x14	; 20
    11ec:	fd a3       	std	Y+37, r31	; 0x25
    11ee:	eb a1       	ldd	r30, Y+35	; 0x23
    11f0:	fc a1       	ldd	r31, Y+36	; 0x24
    11f2:	00 80       	ld	r0, Z
    11f4:	8b a1       	ldd	r24, Y+35	; 0x23
    11f6:	9c a1       	ldd	r25, Y+36	; 0x24
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	9c a3       	std	Y+36, r25	; 0x24
    11fc:	8b a3       	std	Y+35, r24	; 0x23
    11fe:	e9 a1       	ldd	r30, Y+33	; 0x21
    1200:	fa a1       	ldd	r31, Y+34	; 0x22
    1202:	00 82       	st	Z, r0
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9a a3       	std	Y+34, r25	; 0x22
    120c:	89 a3       	std	Y+33, r24	; 0x21
    120e:	9d a1       	ldd	r25, Y+37	; 0x25
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	9d a3       	std	Y+37, r25	; 0x25
    1214:	ed a1       	ldd	r30, Y+37	; 0x25
    1216:	ee 23       	and	r30, r30
    1218:	51 f7       	brne	.-44     	; 0x11ee <M_TIMER0_void_setTime+0x30>
	f32 Loc_TickTime = (f32)Loc_prescalerArr[TIMER0_PRESCALER-1]  / FCPU ;
    121a:	8d 89       	ldd	r24, Y+21	; 0x15
    121c:	9e 89       	ldd	r25, Y+22	; 0x16
    121e:	af 89       	ldd	r26, Y+23	; 0x17
    1220:	b8 8d       	ldd	r27, Y+24	; 0x18
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	bc 01       	movw	r22, r24
    1230:	cd 01       	movw	r24, r26
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	af 83       	std	Y+7, r26	; 0x07
    1248:	b8 87       	std	Y+8, r27	; 0x08
	u32 NoOFDesiredTicks = (copy_u32timeMS * 1000)/Loc_TickTime;
    124a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    124e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1250:	b8 a1       	ldd	r27, Y+32	; 0x20
    1252:	28 ee       	ldi	r18, 0xE8	; 232
    1254:	33 e0       	ldi	r19, 0x03	; 3
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__mulsi3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	2d 81       	ldd	r18, Y+5	; 0x05
    1278:	3e 81       	ldd	r19, Y+6	; 0x06
    127a:	4f 81       	ldd	r20, Y+7	; 0x07
    127c:	58 85       	ldd	r21, Y+8	; 0x08
    127e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	ab 83       	std	Y+3, r26	; 0x03
    1298:	bc 83       	std	Y+4, r27	; 0x04
		NumberOFOverflows++;
	}
#elif(TIMER0_MODE ==  TIMER0_CTC_MODE)
#endif

}
    129a:	a5 96       	adiw	r28, 0x25	; 37
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u8 copy_u8IntID)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
	case  TIMER0_CMP_INT_ID:
	    SET_BIT(TIMSK_REG,OCIE0_BIT);
	    break;
	}*/
	//method 2
	SET_BIT(TIMSK_REG,copy_u8IntID);
    12b8:	a9 e5       	ldi	r26, 0x59	; 89
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e9 e5       	ldi	r30, 0x59	; 89
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <M_TIMER0_void_EnableInt+0x2a>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <M_TIMER0_void_EnableInt+0x26>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24

}
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u8 copy_u8IntID)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <M_TIMER0_void_DisableInt+0x6>
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	89 83       	std	Y+1, r24	; 0x01
	//method 1
	switch(copy_u8IntID)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3b 83       	std	Y+3, r19	; 0x03
    12fc:	2a 83       	std	Y+2, r18	; 0x02
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	31 f0       	breq	.+12     	; 0x1312 <M_TIMER0_void_DisableInt+0x2c>
    1306:	2a 81       	ldd	r18, Y+2	; 0x02
    1308:	3b 81       	ldd	r19, Y+3	; 0x03
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	31 05       	cpc	r19, r1
    130e:	49 f0       	breq	.+18     	; 0x1322 <M_TIMER0_void_DisableInt+0x3c>
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <M_TIMER0_void_DisableInt+0x4a>
		{
		case  TIMER0_OVF_INT_ID:
			CLR_BIT(TIMSK_REG,TOIE0_BIT);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8e 7f       	andi	r24, 0xFE	; 254
    131e:	8c 93       	st	X, r24
    1320:	07 c0       	rjmp	.+14     	; 0x1330 <M_TIMER0_void_DisableInt+0x4a>
			break;

		case  TIMER0_CMP_INT_ID:
		    CLR_BIT(TIMSK_REG,OCIE0_BIT);
    1322:	a9 e5       	ldi	r26, 0x59	; 89
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 e5       	ldi	r30, 0x59	; 89
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
		    break;
		}
	//method 2
		CLR_BIT(TIMSK_REG,copy_u8IntID);
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <M_TIMER0_void_DisableInt+0x68>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <M_TIMER0_void_DisableInt+0x64>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24

}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <M_TIMER0_void_setCallBack+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <M_TIMER0_void_setCallBack+0x8>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	6b 83       	std	Y+3, r22	; 0x03
	//method 1
	switch(copy_u8IntID)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3d 83       	std	Y+5, r19	; 0x05
    1380:	2c 83       	std	Y+4, r18	; 0x04
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f0       	breq	.+12     	; 0x1396 <M_TIMER0_void_setCallBack+0x32>
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	21 30       	cpi	r18, 0x01	; 1
    1390:	31 05       	cpc	r19, r1
    1392:	41 f0       	breq	.+16     	; 0x13a4 <M_TIMER0_void_setCallBack+0x40>
    1394:	0d c0       	rjmp	.+26     	; 0x13b0 <M_TIMER0_void_setCallBack+0x4c>
	{
	case   TIMER0_OVF_INT_ID:
		Arr_CallBack[0]=ptrfn;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	90 93 03 02 	sts	0x0203, r25
    139e:	80 93 02 02 	sts	0x0202, r24
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <M_TIMER0_void_setCallBack+0x4c>
		break;
	case   TIMER0_CMP_INT_ID:
		Arr_CallBack[1]=ptrfn;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	90 93 05 02 	sts	0x0205, r25
    13ac:	80 93 04 02 	sts	0x0204, r24
		break;

	}

	//method 2
	Arr_CallBack[copy_u8IntID]=ptrfn;
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	fc 01       	movw	r30, r24
    13bc:	ee 5f       	subi	r30, 0xFE	; 254
    13be:	fd 4f       	sbci	r31, 0xFD	; 253
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24


}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	static u32 Loc_OVFCounter = 0;
	Loc_OVFCounter++;
    1402:	80 91 06 02 	lds	r24, 0x0206
    1406:	90 91 07 02 	lds	r25, 0x0207
    140a:	a0 91 08 02 	lds	r26, 0x0208
    140e:	b0 91 09 02 	lds	r27, 0x0209
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	a1 1d       	adc	r26, r1
    1416:	b1 1d       	adc	r27, r1
    1418:	80 93 06 02 	sts	0x0206, r24
    141c:	90 93 07 02 	sts	0x0207, r25
    1420:	a0 93 08 02 	sts	0x0208, r26
    1424:	b0 93 09 02 	sts	0x0209, r27
	if(Loc_OVFCounter == NumberOFOverflows)
    1428:	20 91 06 02 	lds	r18, 0x0206
    142c:	30 91 07 02 	lds	r19, 0x0207
    1430:	40 91 08 02 	lds	r20, 0x0208
    1434:	50 91 09 02 	lds	r21, 0x0209
    1438:	80 91 fa 01 	lds	r24, 0x01FA
    143c:	90 91 fb 01 	lds	r25, 0x01FB
    1440:	a0 91 fc 01 	lds	r26, 0x01FC
    1444:	b0 91 fd 01 	lds	r27, 0x01FD
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
    144c:	4a 07       	cpc	r20, r26
    144e:	5b 07       	cpc	r21, r27
    1450:	a1 f4       	brne	.+40     	; 0x147a <__vector_11+0xa2>
	{
		//
		TCNT0_REG = 256 - NumberOFRemainingTicks;
    1452:	e2 e5       	ldi	r30, 0x52	; 82
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 91 fe 01 	lds	r24, 0x01FE
    145a:	90 91 ff 01 	lds	r25, 0x01FF
    145e:	a0 91 00 02 	lds	r26, 0x0200
    1462:	b0 91 01 02 	lds	r27, 0x0201
    1466:	81 95       	neg	r24
    1468:	80 83       	st	Z, r24
		//counter = 0
		Loc_OVFCounter = 0;
    146a:	10 92 06 02 	sts	0x0206, r1
    146e:	10 92 07 02 	sts	0x0207, r1
    1472:	10 92 08 02 	sts	0x0208, r1
    1476:	10 92 09 02 	sts	0x0209, r1
		//taeke action
	}

	if(Arr_CallBack[TIMER0_OVF_INT_ID]  != NULL)
    147a:	80 91 02 02 	lds	r24, 0x0202
    147e:	90 91 03 02 	lds	r25, 0x0203
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	29 f0       	breq	.+10     	; 0x1490 <__vector_11+0xb8>
	Arr_CallBack[TIMER0_OVF_INT_ID]() ;
    1486:	e0 91 02 02 	lds	r30, 0x0202
    148a:	f0 91 03 02 	lds	r31, 0x0203
    148e:	09 95       	icall
}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	Arr_CallBack[TIMER0_OVF_INT_ID];

}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <M_GIE_void_enable>:
#include "GIE_priv.h"
#include "GIE_int.h"
#include "GIE_config.h"

void M_GIE_void_enable(void)
 {
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
	//method 1 :
	//  SET_BIT(SREG_REG,I_BIT);
	//METHOD 2:

	asm("SEI");
    14de:	78 94       	sei

 }
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	//method 1 :
	//CLR_BIT(SREG_REG,I_BIT);

	//method 2:
	asm("CLI");
    14ee:	f8 94       	cli
}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <M_EXIT_void_Enable>:

//ARRAY of 3 pointers to functions (Call_Back_fn
static void(*Arr_CallBack[3]) (void)={NULL,NULL,NULL};

void M_EXIT_void_Enable(u8 copy_u8IntID, u8 copy_u8Sense)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <M_EXIT_void_Enable+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <M_EXIT_void_Enable+0x8>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6a 83       	std	Y+2, r22	; 0x02
    //STEP 1 : CONFIG SENSE
	if(copy_u8Sense < EXIT_TRIG_LOW_LEVEL || copy_u8Sense >EXIT_TRIG_FALL_EDGE )
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	08 f0       	brcs	.+2      	; 0x150e <M_EXIT_void_Enable+0x18>
    150c:	72 c0       	rjmp	.+228    	; 0x15f2 <M_EXIT_void_Enable+0xfc>
	{
		return ;
	}

	switch (copy_u8IntID)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3c 83       	std	Y+4, r19	; 0x04
    1516:	2b 83       	std	Y+3, r18	; 0x03
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	86 30       	cpi	r24, 0x06	; 6
    151e:	91 05       	cpc	r25, r1
    1520:	59 f0       	breq	.+22     	; 0x1538 <M_EXIT_void_Enable+0x42>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	27 30       	cpi	r18, 0x07	; 7
    1528:	31 05       	cpc	r19, r1
    152a:	b1 f0       	breq	.+44     	; 0x1558 <M_EXIT_void_Enable+0x62>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	85 30       	cpi	r24, 0x05	; 5
    1532:	91 05       	cpc	r25, r1
    1534:	41 f1       	breq	.+80     	; 0x1586 <M_EXIT_void_Enable+0x90>
    1536:	44 c0       	rjmp	.+136    	; 0x15c0 <M_EXIT_void_Enable+0xca>
		  {
		     case EXIT_INT0_ID:
		    	 //step 1 : applyt mask
		    	 MCUCR_REG &= EXIT_INT0_TRIG_MASK;
    1538:	a5 e5       	ldi	r26, 0x55	; 85
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e5       	ldi	r30, 0x55	; 85
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8c 7f       	andi	r24, 0xFC	; 252
    1544:	8c 93       	st	X, r24
		    	 //step 2 : insert value
				 MCUCR_REG |= copy_u8Sense;
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	90 81       	ld	r25, Z
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	89 2b       	or	r24, r25
    1554:	8c 93       	st	X, r24
    1556:	34 c0       	rjmp	.+104    	; 0x15c0 <M_EXIT_void_Enable+0xca>
                  break ;
		     case EXIT_INT1_ID:
		    	 //step 1 : applyt mask
		    	 	MCUCR_REG &= EXIT_INT1_TRIG_MASK;
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	83 7f       	andi	r24, 0xF3	; 243
    1564:	8c 93       	st	X, r24
		       	 //step 2 : insert value
					MCUCR_REG |= copy_u8Sense << EXIT_INT1_TRIG_SHIFT ;
    1566:	a5 e5       	ldi	r26, 0x55	; 85
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e5       	ldi	r30, 0x55	; 85
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	28 2f       	mov	r18, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	82 2b       	or	r24, r18
    1582:	8c 93       	st	X, r24
    1584:	1d c0       	rjmp	.+58     	; 0x15c0 <M_EXIT_void_Enable+0xca>
					break;
		     case EXIT_INT2_ID:
		    	 //step 1 : applyt mask
		    	 CLR_BIT(MCUCSR_REG , ISC2_BIT);
    1586:	a4 e5       	ldi	r26, 0x54	; 84
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e4 e5       	ldi	r30, 0x54	; 84
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 7b       	andi	r24, 0xBF	; 191
    1592:	8c 93       	st	X, r24
		    	 //step 2 : insert value
		    	   //  (reg |= 1 <<(bit));
		    	 MCUCSR_REG |= (GET_BIT(copy_u8Sense , 0))<< EXIT_INT2_TRIG_SHIFT;
    1594:	a4 e5       	ldi	r26, 0x54	; 84
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e5       	ldi	r30, 0x54	; 84
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	90 70       	andi	r25, 0x00	; 0
    15aa:	00 24       	eor	r0, r0
    15ac:	96 95       	lsr	r25
    15ae:	87 95       	ror	r24
    15b0:	07 94       	ror	r0
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	07 94       	ror	r0
    15b8:	98 2f       	mov	r25, r24
    15ba:	80 2d       	mov	r24, r0
    15bc:	82 2b       	or	r24, r18
    15be:	8c 93       	st	X, r24
		    	 break;
		  }


	//STEP 2 : ENABLE PIE
		    	 if (copy_u8IntID>=EXIT_INT2_ID && copy_u8IntID <= EXIT_INT1_ID)
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	85 30       	cpi	r24, 0x05	; 5
    15c4:	b0 f0       	brcs	.+44     	; 0x15f2 <M_EXIT_void_Enable+0xfc>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	88 30       	cpi	r24, 0x08	; 8
    15ca:	98 f4       	brcc	.+38     	; 0x15f2 <M_EXIT_void_Enable+0xfc>
		    	 		SET_BIT(GICR_REG , copy_u8IntID);
    15cc:	ab e5       	ldi	r26, 0x5B	; 91
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	eb e5       	ldi	r30, 0x5B	; 91
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <M_EXIT_void_Enable+0xf4>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <M_EXIT_void_Enable+0xf0>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24

}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <M_EXIT_void_Disable>:


void M_EXIT_void_Disable(u8 copy_u8IntID)
 {
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	89 83       	std	Y+1, r24	; 0x01
	 *        CLR_BIT(GICR_REG , INT2_BIT)
	 *        break;
 	 * }
	 */
	//method 2
	if (copy_u8IntID>=EXIT_INT2_ID && copy_u8IntID <= EXIT_INT1_ID)
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	85 30       	cpi	r24, 0x05	; 5
    1610:	b8 f0       	brcs	.+46     	; 0x1640 <M_EXIT_void_Disable+0x40>
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	a0 f4       	brcc	.+40     	; 0x1640 <M_EXIT_void_Disable+0x40>
		CLR_BIT(GICR_REG , copy_u8IntID);
    1618:	ab e5       	ldi	r26, 0x5B	; 91
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e5       	ldi	r30, 0x5B	; 91
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <M_EXIT_void_Disable+0x36>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <M_EXIT_void_Disable+0x32>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
 }
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <M_EXIT_void_setCallBack>:


void M_EXIT_void_setCallBack(void (*ptrfn) (void), u8 copy_u8IntID)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <M_EXIT_void_setCallBack+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <M_EXIT_void_setCallBack+0x8>
    1650:	0f 92       	push	r0
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntID)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	86 30       	cpi	r24, 0x06	; 6
    166c:	91 05       	cpc	r25, r1
    166e:	59 f0       	breq	.+22     	; 0x1686 <M_EXIT_void_setCallBack+0x3e>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	27 30       	cpi	r18, 0x07	; 7
    1676:	31 05       	cpc	r19, r1
    1678:	69 f0       	breq	.+26     	; 0x1694 <M_EXIT_void_setCallBack+0x4c>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	85 30       	cpi	r24, 0x05	; 5
    1680:	91 05       	cpc	r25, r1
    1682:	79 f0       	breq	.+30     	; 0x16a2 <M_EXIT_void_setCallBack+0x5a>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <M_EXIT_void_setCallBack+0x66>
	{
     case EXIT_INT0_ID:
    	 Arr_CallBack[0] = ptrfn;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	90 93 0b 02 	sts	0x020B, r25
    168e:	80 93 0a 02 	sts	0x020A, r24
    1692:	0d c0       	rjmp	.+26     	; 0x16ae <M_EXIT_void_setCallBack+0x66>
    	 break;
     case EXIT_INT1_ID:
          Arr_CallBack[1] = ptrfn;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	90 93 0d 02 	sts	0x020D, r25
    169c:	80 93 0c 02 	sts	0x020C, r24
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <M_EXIT_void_setCallBack+0x66>
       	 break;
     case EXIT_INT2_ID:
       	 Arr_CallBack[2] = ptrfn;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	90 93 0f 02 	sts	0x020F, r25
    16aa:	80 93 0e 02 	sts	0x020E, r24
       	 break;
	}
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <__vector_1>:

ISR(INT0_vect)
{
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]  !=NULL )
    16e8:	80 91 0a 02 	lds	r24, 0x020A
    16ec:	90 91 0b 02 	lds	r25, 0x020B
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	29 f0       	breq	.+10     	; 0x16fe <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    16f4:	e0 91 0a 02 	lds	r30, 0x020A
    16f8:	f0 91 0b 02 	lds	r31, 0x020B
    16fc:	09 95       	icall
	}
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	0f 90       	pop	r0
    1720:	1f 90       	pop	r1
    1722:	18 95       	reti

00001724 <__vector_2>:

ISR(INT1_vect)
{
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	2f 93       	push	r18
    1730:	3f 93       	push	r19
    1732:	4f 93       	push	r20
    1734:	5f 93       	push	r21
    1736:	6f 93       	push	r22
    1738:	7f 93       	push	r23
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
    173e:	af 93       	push	r26
    1740:	bf 93       	push	r27
    1742:	ef 93       	push	r30
    1744:	ff 93       	push	r31
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]  !=NULL )
    174e:	80 91 0c 02 	lds	r24, 0x020C
    1752:	90 91 0d 02 	lds	r25, 0x020D
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	29 f0       	breq	.+10     	; 0x1764 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
    175a:	e0 91 0c 02 	lds	r30, 0x020C
    175e:	f0 91 0d 02 	lds	r31, 0x020D
    1762:	09 95       	icall
		}
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_3>:
ISR(INT2_vect)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]  !=NULL )
    17b4:	80 91 0e 02 	lds	r24, 0x020E
    17b8:	90 91 0f 02 	lds	r25, 0x020F
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	29 f0       	breq	.+10     	; 0x17ca <__vector_3+0x40>
		{
			Arr_CallBack[2]();
    17c0:	e0 91 0e 02 	lds	r30, 0x020E
    17c4:	f0 91 0f 02 	lds	r31, 0x020F
    17c8:	09 95       	icall
		}
}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	bf 91       	pop	r27
    17d4:	af 91       	pop	r26
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	7f 91       	pop	r23
    17dc:	6f 91       	pop	r22
    17de:	5f 91       	pop	r21
    17e0:	4f 91       	pop	r20
    17e2:	3f 91       	pop	r19
    17e4:	2f 91       	pop	r18
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <M_Dio_void_setPinDir>:
#include "Dio_config.h"
#include "Dio_int.h"


void M_Dio_void_setPinDir(u8 port,u8 pin,u8 dir )
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	2d 97       	sbiw	r28, 0x0d	; 13
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	6a 83       	std	Y+2, r22	; 0x02
    1808:	4b 83       	std	Y+3, r20	; 0x03
  switch (port)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3d 87       	std	Y+13, r19	; 0x0d
    1812:	2c 87       	std	Y+12, r18	; 0x0c
    1814:	8c 85       	ldd	r24, Y+12	; 0x0c
    1816:	9d 85       	ldd	r25, Y+13	; 0x0d
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <M_Dio_void_setPinDir+0x30>
    181e:	50 c0       	rjmp	.+160    	; 0x18c0 <M_Dio_void_setPinDir+0xd0>
    1820:	2c 85       	ldd	r18, Y+12	; 0x0c
    1822:	3d 85       	ldd	r19, Y+13	; 0x0d
    1824:	23 30       	cpi	r18, 0x03	; 3
    1826:	31 05       	cpc	r19, r1
    1828:	34 f4       	brge	.+12     	; 0x1836 <M_Dio_void_setPinDir+0x46>
    182a:	8c 85       	ldd	r24, Y+12	; 0x0c
    182c:	9d 85       	ldd	r25, Y+13	; 0x0d
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	71 f0       	breq	.+28     	; 0x1850 <M_Dio_void_setPinDir+0x60>
    1834:	ec c0       	rjmp	.+472    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
    1836:	2c 85       	ldd	r18, Y+12	; 0x0c
    1838:	3d 85       	ldd	r19, Y+13	; 0x0d
    183a:	23 30       	cpi	r18, 0x03	; 3
    183c:	31 05       	cpc	r19, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <M_Dio_void_setPinDir+0x52>
    1840:	77 c0       	rjmp	.+238    	; 0x1930 <M_Dio_void_setPinDir+0x140>
    1842:	8c 85       	ldd	r24, Y+12	; 0x0c
    1844:	9d 85       	ldd	r25, Y+13	; 0x0d
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	91 05       	cpc	r25, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <M_Dio_void_setPinDir+0x5e>
    184c:	a9 c0       	rjmp	.+338    	; 0x19a0 <M_Dio_void_setPinDir+0x1b0>
    184e:	df c0       	rjmp	.+446    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
  {
  case PORTA_ID:
	  switch(dir)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3b 87       	std	Y+11, r19	; 0x0b
    1858:	2a 87       	std	Y+10, r18	; 0x0a
    185a:	8a 85       	ldd	r24, Y+10	; 0x0a
    185c:	9b 85       	ldd	r25, Y+11	; 0x0b
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	31 f0       	breq	.+12     	; 0x186e <M_Dio_void_setPinDir+0x7e>
    1862:	2a 85       	ldd	r18, Y+10	; 0x0a
    1864:	3b 85       	ldd	r19, Y+11	; 0x0b
    1866:	21 30       	cpi	r18, 0x01	; 1
    1868:	31 05       	cpc	r19, r1
    186a:	b1 f0       	breq	.+44     	; 0x1898 <M_Dio_void_setPinDir+0xa8>
    186c:	d0 c0       	rjmp	.+416    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  {
	  case  INPUT:
		  CLR_BIT(DDRA_REG,pin);
    186e:	aa e3       	ldi	r26, 0x3A	; 58
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	ea e3       	ldi	r30, 0x3A	; 58
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <M_Dio_void_setPinDir+0x9c>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <M_Dio_void_setPinDir+0x98>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	bb c0       	rjmp	.+374    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
		  break;
	  case  OUPUT:
		  SET_BIT(DDRA_REG,pin);
    1898:	aa e3       	ldi	r26, 0x3A	; 58
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ea e3       	ldi	r30, 0x3A	; 58
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <M_Dio_void_setPinDir+0xc6>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <M_Dio_void_setPinDir+0xc2>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	a7 c0       	rjmp	.+334    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
		  break;

	  }
	  break;
  case PORTB_ID:
	  switch(dir)
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	39 87       	std	Y+9, r19	; 0x09
    18c8:	28 87       	std	Y+8, r18	; 0x08
    18ca:	88 85       	ldd	r24, Y+8	; 0x08
    18cc:	99 85       	ldd	r25, Y+9	; 0x09
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	31 f0       	breq	.+12     	; 0x18de <M_Dio_void_setPinDir+0xee>
    18d2:	28 85       	ldd	r18, Y+8	; 0x08
    18d4:	39 85       	ldd	r19, Y+9	; 0x09
    18d6:	21 30       	cpi	r18, 0x01	; 1
    18d8:	31 05       	cpc	r19, r1
    18da:	b1 f0       	breq	.+44     	; 0x1908 <M_Dio_void_setPinDir+0x118>
    18dc:	98 c0       	rjmp	.+304    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  	  {
	  	  case  INPUT:
	  		  CLR_BIT(DDRB_REG,pin);
    18de:	a7 e3       	ldi	r26, 0x37	; 55
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e7 e3       	ldi	r30, 0x37	; 55
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <M_Dio_void_setPinDir+0x10c>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <M_Dio_void_setPinDir+0x108>
    1900:	80 95       	com	r24
    1902:	84 23       	and	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	83 c0       	rjmp	.+262    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  		  break;
	  	  case  OUPUT:
	  		  SET_BIT(DDRB_REG,pin);
    1908:	a7 e3       	ldi	r26, 0x37	; 55
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e7 e3       	ldi	r30, 0x37	; 55
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <M_Dio_void_setPinDir+0x136>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <M_Dio_void_setPinDir+0x132>
    192a:	84 2b       	or	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	6f c0       	rjmp	.+222    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  		  break;

	  	  }
 	  break;
  case PORTC_ID:
	  switch(dir)
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3f 83       	std	Y+7, r19	; 0x07
    1938:	2e 83       	std	Y+6, r18	; 0x06
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	9f 81       	ldd	r25, Y+7	; 0x07
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	31 f0       	breq	.+12     	; 0x194e <M_Dio_void_setPinDir+0x15e>
    1942:	2e 81       	ldd	r18, Y+6	; 0x06
    1944:	3f 81       	ldd	r19, Y+7	; 0x07
    1946:	21 30       	cpi	r18, 0x01	; 1
    1948:	31 05       	cpc	r19, r1
    194a:	b1 f0       	breq	.+44     	; 0x1978 <M_Dio_void_setPinDir+0x188>
    194c:	60 c0       	rjmp	.+192    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  	  {
	  	  case  INPUT:
	  		  CLR_BIT(DDRC_REG,pin);
    194e:	a4 e3       	ldi	r26, 0x34	; 52
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e4 e3       	ldi	r30, 0x34	; 52
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <M_Dio_void_setPinDir+0x17c>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <M_Dio_void_setPinDir+0x178>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	4b c0       	rjmp	.+150    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  		  break;
	  	  case  OUPUT:
	  		  SET_BIT(DDRC_REG,pin);
    1978:	a4 e3       	ldi	r26, 0x34	; 52
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e4 e3       	ldi	r30, 0x34	; 52
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <M_Dio_void_setPinDir+0x1a6>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <M_Dio_void_setPinDir+0x1a2>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	37 c0       	rjmp	.+110    	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  		  break;

	  	  }
 	  break;
  case PORTD_ID:
	  switch(dir)
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3d 83       	std	Y+5, r19	; 0x05
    19a8:	2c 83       	std	Y+4, r18	; 0x04
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	31 f0       	breq	.+12     	; 0x19be <M_Dio_void_setPinDir+0x1ce>
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	21 30       	cpi	r18, 0x01	; 1
    19b8:	31 05       	cpc	r19, r1
    19ba:	b1 f0       	breq	.+44     	; 0x19e8 <M_Dio_void_setPinDir+0x1f8>
    19bc:	28 c0       	rjmp	.+80     	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  	  {
	  	  case  INPUT:
	  		  CLR_BIT(DDRD_REG,pin);
    19be:	a1 e3       	ldi	r26, 0x31	; 49
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e1 e3       	ldi	r30, 0x31	; 49
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <M_Dio_void_setPinDir+0x1ec>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <M_Dio_void_setPinDir+0x1e8>
    19e0:	80 95       	com	r24
    19e2:	84 23       	and	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <M_Dio_void_setPinDir+0x21e>
	  		  break;
	  	  case  OUPUT:
	  		  SET_BIT(DDRD_REG,pin);
    19e8:	a1 e3       	ldi	r26, 0x31	; 49
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e1 e3       	ldi	r30, 0x31	; 49
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <M_Dio_void_setPinDir+0x216>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <M_Dio_void_setPinDir+0x212>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
	  	  }
 	  break;
  }


}
    1a0e:	2d 96       	adiw	r28, 0x0d	; 13
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <M_Dio_void_setPinValue>:
void M_Dio_void_setPinValue(u8 port,u8 pin,u8 value)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	2d 97       	sbiw	r28, 0x0d	; 13
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	6a 83       	std	Y+2, r22	; 0x02
    1a38:	4b 83       	std	Y+3, r20	; 0x03
	// this function used to set output
 // I will Access PORT register
	// according to value (high , low) -->(SET_BIT ,CLR_BIT )
	switch(port)
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3d 87       	std	Y+13, r19	; 0x0d
    1a42:	2c 87       	std	Y+12, r18	; 0x0c
    1a44:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a46:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <M_Dio_void_setPinValue+0x30>
    1a4e:	50 c0       	rjmp	.+160    	; 0x1af0 <M_Dio_void_setPinValue+0xd0>
    1a50:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a52:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a54:	23 30       	cpi	r18, 0x03	; 3
    1a56:	31 05       	cpc	r19, r1
    1a58:	34 f4       	brge	.+12     	; 0x1a66 <M_Dio_void_setPinValue+0x46>
    1a5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	91 05       	cpc	r25, r1
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <M_Dio_void_setPinValue+0x60>
    1a64:	eb c0       	rjmp	.+470    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
    1a66:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a68:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a6a:	23 30       	cpi	r18, 0x03	; 3
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <M_Dio_void_setPinValue+0x52>
    1a70:	77 c0       	rjmp	.+238    	; 0x1b60 <M_Dio_void_setPinValue+0x140>
    1a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <M_Dio_void_setPinValue+0x5e>
    1a7c:	a9 c0       	rjmp	.+338    	; 0x1bd0 <M_Dio_void_setPinValue+0x1b0>
    1a7e:	de c0       	rjmp	.+444    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
	{
	case PORTA_ID:
		switch(value)
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3b 87       	std	Y+11, r19	; 0x0b
    1a88:	2a 87       	std	Y+10, r18	; 0x0a
    1a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	d1 f0       	breq	.+52     	; 0x1ac6 <M_Dio_void_setPinValue+0xa6>
    1a92:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a94:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a96:	21 30       	cpi	r18, 0x01	; 1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <M_Dio_void_setPinValue+0x7e>
    1a9c:	cf c0       	rjmp	.+414    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTA_REG,pin);
    1a9e:	ab e3       	ldi	r26, 0x3B	; 59
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	eb e3       	ldi	r30, 0x3B	; 59
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <M_Dio_void_setPinValue+0x9c>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <M_Dio_void_setPinValue+0x98>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	bb c0       	rjmp	.+374    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTA_REG,pin);
    1ac6:	ab e3       	ldi	r26, 0x3B	; 59
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	eb e3       	ldi	r30, 0x3B	; 59
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <M_Dio_void_setPinValue+0xc4>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <M_Dio_void_setPinValue+0xc0>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	a6 c0       	rjmp	.+332    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		}
		break;
	case PORTB_ID:
		switch(value)
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	39 87       	std	Y+9, r19	; 0x09
    1af8:	28 87       	std	Y+8, r18	; 0x08
    1afa:	88 85       	ldd	r24, Y+8	; 0x08
    1afc:	99 85       	ldd	r25, Y+9	; 0x09
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	d1 f0       	breq	.+52     	; 0x1b36 <M_Dio_void_setPinValue+0x116>
    1b02:	28 85       	ldd	r18, Y+8	; 0x08
    1b04:	39 85       	ldd	r19, Y+9	; 0x09
    1b06:	21 30       	cpi	r18, 0x01	; 1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <M_Dio_void_setPinValue+0xee>
    1b0c:	97 c0       	rjmp	.+302    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTB_REG,pin);
    1b0e:	a8 e3       	ldi	r26, 0x38	; 56
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <M_Dio_void_setPinValue+0x10c>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <M_Dio_void_setPinValue+0x108>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	83 c0       	rjmp	.+262    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTB_REG,pin);
    1b36:	a8 e3       	ldi	r26, 0x38	; 56
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e8 e3       	ldi	r30, 0x38	; 56
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <M_Dio_void_setPinValue+0x134>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <M_Dio_void_setPinValue+0x130>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	6e c0       	rjmp	.+220    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		}
			break;
	case PORTC_ID:
		switch(value)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3f 83       	std	Y+7, r19	; 0x07
    1b68:	2e 83       	std	Y+6, r18	; 0x06
    1b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <M_Dio_void_setPinValue+0x186>
    1b72:	2e 81       	ldd	r18, Y+6	; 0x06
    1b74:	3f 81       	ldd	r19, Y+7	; 0x07
    1b76:	21 30       	cpi	r18, 0x01	; 1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <M_Dio_void_setPinValue+0x15e>
    1b7c:	5f c0       	rjmp	.+190    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTC_REG,pin);
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <M_Dio_void_setPinValue+0x17c>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <M_Dio_void_setPinValue+0x178>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	4b c0       	rjmp	.+150    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTC_REG,pin);
    1ba6:	a5 e3       	ldi	r26, 0x35	; 53
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e5 e3       	ldi	r30, 0x35	; 53
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <M_Dio_void_setPinValue+0x1a4>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <M_Dio_void_setPinValue+0x1a0>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	36 c0       	rjmp	.+108    	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		}
			break;
	case PORTD_ID:
		switch(value)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3d 83       	std	Y+5, r19	; 0x05
    1bd8:	2c 83       	std	Y+4, r18	; 0x04
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	c9 f0       	breq	.+50     	; 0x1c14 <M_Dio_void_setPinValue+0x1f4>
    1be2:	2c 81       	ldd	r18, Y+4	; 0x04
    1be4:	3d 81       	ldd	r19, Y+5	; 0x05
    1be6:	21 30       	cpi	r18, 0x01	; 1
    1be8:	31 05       	cpc	r19, r1
    1bea:	41 f5       	brne	.+80     	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTD_REG,pin);
    1bec:	a2 e3       	ldi	r26, 0x32	; 50
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e2 e3       	ldi	r30, 0x32	; 50
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <M_Dio_void_setPinValue+0x1ea>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <M_Dio_void_setPinValue+0x1e6>
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTD_REG,pin);
    1c14:	a2 e3       	ldi	r26, 0x32	; 50
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e2 e3       	ldi	r30, 0x32	; 50
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <M_Dio_void_setPinValue+0x212>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <M_Dio_void_setPinValue+0x20e>
    1c36:	80 95       	com	r24
    1c38:	84 23       	and	r24, r20
    1c3a:	8c 93       	st	X, r24
			break;
		}
			break;
	}
}
    1c3c:	2d 96       	adiw	r28, 0x0d	; 13
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <M_Dio_void_getPinValue>:
void M_Dio_void_getPinValue(u8 port,u8 pin, u8* pvalue)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <M_Dio_void_getPinValue+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <M_Dio_void_getPinValue+0x8>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <M_Dio_void_getPinValue+0xa>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6a 83       	std	Y+2, r22	; 0x02
    1c60:	5c 83       	std	Y+4, r21	; 0x04
    1c62:	4b 83       	std	Y+3, r20	; 0x03
	// this function used to get input
	// I will Access PIN register
	// return (high, low)
	// GET_BIT
	switch(port)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3e 83       	std	Y+6, r19	; 0x06
    1c6c:	2d 83       	std	Y+5, r18	; 0x05
    1c6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1c70:	5e 81       	ldd	r21, Y+6	; 0x06
    1c72:	42 30       	cpi	r20, 0x02	; 2
    1c74:	51 05       	cpc	r21, r1
    1c76:	59 f1       	breq	.+86     	; 0x1cce <M_Dio_void_getPinValue+0x80>
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	34 f4       	brge	.+12     	; 0x1c8e <M_Dio_void_getPinValue+0x40>
    1c82:	2d 81       	ldd	r18, Y+5	; 0x05
    1c84:	3e 81       	ldd	r19, Y+6	; 0x06
    1c86:	21 30       	cpi	r18, 0x01	; 1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	69 f0       	breq	.+26     	; 0x1ca6 <M_Dio_void_getPinValue+0x58>
    1c8c:	5b c0       	rjmp	.+182    	; 0x1d44 <M_Dio_void_getPinValue+0xf6>
    1c8e:	4d 81       	ldd	r20, Y+5	; 0x05
    1c90:	5e 81       	ldd	r21, Y+6	; 0x06
    1c92:	43 30       	cpi	r20, 0x03	; 3
    1c94:	51 05       	cpc	r21, r1
    1c96:	79 f1       	breq	.+94     	; 0x1cf6 <M_Dio_void_getPinValue+0xa8>
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	84 30       	cpi	r24, 0x04	; 4
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <M_Dio_void_getPinValue+0x56>
    1ca2:	3d c0       	rjmp	.+122    	; 0x1d1e <M_Dio_void_getPinValue+0xd0>
    1ca4:	4f c0       	rjmp	.+158    	; 0x1d44 <M_Dio_void_getPinValue+0xf6>
		{
		case PORTA_ID:
			*pvalue = GET_BIT(PINA_REG,pin);
    1ca6:	e9 e3       	ldi	r30, 0x39	; 57
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a9 01       	movw	r20, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <M_Dio_void_getPinValue+0x70>
    1cba:	55 95       	asr	r21
    1cbc:	47 95       	ror	r20
    1cbe:	8a 95       	dec	r24
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <M_Dio_void_getPinValue+0x6c>
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	81 70       	andi	r24, 0x01	; 1
    1cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cca:	80 83       	st	Z, r24
    1ccc:	3b c0       	rjmp	.+118    	; 0x1d44 <M_Dio_void_getPinValue+0xf6>
			break;
		case PORTB_ID:
			*pvalue = GET_BIT(PINB_REG,pin);
    1cce:	e6 e3       	ldi	r30, 0x36	; 54
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <M_Dio_void_getPinValue+0x98>
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	8a 95       	dec	r24
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <M_Dio_void_getPinValue+0x94>
    1cea:	ca 01       	movw	r24, r20
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf2:	80 83       	st	Z, r24
    1cf4:	27 c0       	rjmp	.+78     	; 0x1d44 <M_Dio_void_getPinValue+0xf6>
				break;
		case PORTC_ID:
			*pvalue = GET_BIT(PINC_REG,pin);
    1cf6:	e3 e3       	ldi	r30, 0x33	; 51
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <M_Dio_void_getPinValue+0xc0>
    1d0a:	55 95       	asr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <M_Dio_void_getPinValue+0xbc>
    1d12:	ca 01       	movw	r24, r20
    1d14:	81 70       	andi	r24, 0x01	; 1
    1d16:	eb 81       	ldd	r30, Y+3	; 0x03
    1d18:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1a:	80 83       	st	Z, r24
    1d1c:	13 c0       	rjmp	.+38     	; 0x1d44 <M_Dio_void_getPinValue+0xf6>
				break;
		case PORTD_ID:
			*pvalue = GET_BIT(PIND_REG,pin);
    1d1e:	e0 e3       	ldi	r30, 0x30	; 48
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a9 01       	movw	r20, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <M_Dio_void_getPinValue+0xe8>
    1d32:	55 95       	asr	r21
    1d34:	47 95       	ror	r20
    1d36:	8a 95       	dec	r24
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <M_Dio_void_getPinValue+0xe4>
    1d3a:	ca 01       	movw	r24, r20
    1d3c:	81 70       	andi	r24, 0x01	; 1
    1d3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d40:	fc 81       	ldd	r31, Y+4	; 0x04
    1d42:	80 83       	st	Z, r24
				break;
		}
}
    1d44:	26 96       	adiw	r28, 0x06	; 6
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <M_Dio_void_TogPinValue>:
void M_Dio_void_TogPinValue(u8 port,u8 pin )
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <M_Dio_void_TogPinValue+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <M_Dio_void_TogPinValue+0x8>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	6a 83       	std	Y+2, r22	; 0x02
    // TOG_BIT
	switch(port)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3c 83       	std	Y+4, r19	; 0x04
    1d6e:	2b 83       	std	Y+3, r18	; 0x03
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	82 30       	cpi	r24, 0x02	; 2
    1d76:	91 05       	cpc	r25, r1
    1d78:	51 f1       	breq	.+84     	; 0x1dce <M_Dio_void_TogPinValue+0x78>
    1d7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7e:	23 30       	cpi	r18, 0x03	; 3
    1d80:	31 05       	cpc	r19, r1
    1d82:	34 f4       	brge	.+12     	; 0x1d90 <M_Dio_void_TogPinValue+0x3a>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	61 f0       	breq	.+24     	; 0x1da6 <M_Dio_void_TogPinValue+0x50>
    1d8e:	5a c0       	rjmp	.+180    	; 0x1e44 <M_Dio_void_TogPinValue+0xee>
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	23 30       	cpi	r18, 0x03	; 3
    1d96:	31 05       	cpc	r19, r1
    1d98:	71 f1       	breq	.+92     	; 0x1df6 <M_Dio_void_TogPinValue+0xa0>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	91 05       	cpc	r25, r1
    1da2:	e9 f1       	breq	.+122    	; 0x1e1e <M_Dio_void_TogPinValue+0xc8>
    1da4:	4f c0       	rjmp	.+158    	; 0x1e44 <M_Dio_void_TogPinValue+0xee>
	{
	 case PORTA_ID:
		 TOG_BIT(PORTA_REG,pin);
    1da6:	ab e3       	ldi	r26, 0x3B	; 59
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	eb e3       	ldi	r30, 0x3B	; 59
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <M_Dio_void_TogPinValue+0x6e>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <M_Dio_void_TogPinValue+0x6a>
    1dc8:	84 27       	eor	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	3b c0       	rjmp	.+118    	; 0x1e44 <M_Dio_void_TogPinValue+0xee>
		 break;
	 case PORTB_ID:
		 TOG_BIT(PORTB_REG,pin);
    1dce:	a8 e3       	ldi	r26, 0x38	; 56
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e8 e3       	ldi	r30, 0x38	; 56
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <M_Dio_void_TogPinValue+0x96>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <M_Dio_void_TogPinValue+0x92>
    1df0:	84 27       	eor	r24, r20
    1df2:	8c 93       	st	X, r24
    1df4:	27 c0       	rjmp	.+78     	; 0x1e44 <M_Dio_void_TogPinValue+0xee>
	 		 break;
	 case PORTC_ID:
		 TOG_BIT(PORTC_REG,pin);
    1df6:	a5 e3       	ldi	r26, 0x35	; 53
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e5 e3       	ldi	r30, 0x35	; 53
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <M_Dio_void_TogPinValue+0xbe>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <M_Dio_void_TogPinValue+0xba>
    1e18:	84 27       	eor	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	13 c0       	rjmp	.+38     	; 0x1e44 <M_Dio_void_TogPinValue+0xee>
	 		 break;
	 case PORTD_ID:
		 TOG_BIT(PORTA_REG,pin);
    1e1e:	ab e3       	ldi	r26, 0x3B	; 59
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	eb e3       	ldi	r30, 0x3B	; 59
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <M_Dio_void_TogPinValue+0xe6>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <M_Dio_void_TogPinValue+0xe2>
    1e40:	84 27       	eor	r24, r20
    1e42:	8c 93       	st	X, r24
	 		 break;
	}

}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <M_ADC_void_Init>:
#include "ADC_config.h"
#include "ADC_int.h"

u16 gADC_value = 0;
void M_ADC_void_Init(prescaler_t copy_prescaler ,vref_t  copy_vref )
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <M_ADC_void_Init+0x6>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	6a 83       	std	Y+2, r22	; 0x02
  // step 1 : config prescaler
    // step : apply mask
	ADCSRA_REG &= ADC_PRESCALER_MASK;
    1e60:	a6 e2       	ldi	r26, 0x26	; 38
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e6 e2       	ldi	r30, 0x26	; 38
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 7f       	andi	r24, 0xF8	; 248
    1e6c:	8c 93       	st	X, r24

	// step :insert value
	ADCSRA_REG |=  copy_prescaler;
    1e6e:	a6 e2       	ldi	r26, 0x26	; 38
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e6 e2       	ldi	r30, 0x26	; 38
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	90 81       	ld	r25, Z
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	89 2b       	or	r24, r25
    1e7c:	8c 93       	st	X, r24

  // step 3 : config right adjust
    CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1e7e:	a7 e2       	ldi	r26, 0x27	; 39
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e7 e2       	ldi	r30, 0x27	; 39
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7d       	andi	r24, 0xDF	; 223
    1e8a:	8c 93       	st	X, r24

#if (ADC_TYPE == ADC_POLLING)
    //step 2 : Disable Interrupt
    	CLR_BIT(ADCSRA_REG,ADIE_BIT);
    1e8c:	a6 e2       	ldi	r26, 0x26	; 38
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e2       	ldi	r30, 0x26	; 38
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	8c 93       	st	X, r24
    // step 4 : disable auto trigger
    CLR_BIT(ADCSRA_REG , ADATE_BIT);
    1e9a:	a6 e2       	ldi	r26, 0x26	; 38
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e6 e2       	ldi	r30, 0x26	; 38
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 7d       	andi	r24, 0xDF	; 223
    1ea6:	8c 93       	st	X, r24
    SET_BIT(ADCSRA_REG , ADSC_BIT);
    SET_BIT(ADCSRA_REG,3);// Interrupt Enable
#endif
  // step 5 : chose vref
	// step : apply mask
    ADMUX_REG &= ADC_VREF_MASK;
    1ea8:	a7 e2       	ldi	r26, 0x27	; 39
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e7 e2       	ldi	r30, 0x27	; 39
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8f 73       	andi	r24, 0x3F	; 63
    1eb4:	8c 93       	st	X, r24
	// step :insert value
    ADMUX_REG |= copy_vref << ADC_VREF_SHIFT;
    1eb6:	a7 e2       	ldi	r26, 0x27	; 39
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e2       	ldi	r30, 0x27	; 39
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	00 24       	eor	r0, r0
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	07 94       	ror	r0
    1ed0:	96 95       	lsr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	07 94       	ror	r0
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	80 2d       	mov	r24, r0
    1eda:	82 2b       	or	r24, r18
    1edc:	8c 93       	st	X, r24
  // step 6 : Enable ADC
    SET_BIT(ADCSRA_REG , ADEN_BIT);
    1ede:	a6 e2       	ldi	r26, 0x26	; 38
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e6 e2       	ldi	r30, 0x26	; 38
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 68       	ori	r24, 0x80	; 128
    1eea:	8c 93       	st	X, r24
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <M_ADC_u16_adcRead>:
#if (ADC_TYPE == ADC_POLLING)
u16 M_ADC_u16_adcRead(channel_t copy_channel )
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01

	// step 1 : config channel
	     // step : apply mask
	     ADMUX_REG  &= ADC_CHANNEL_MASK;
    1f02:	a7 e2       	ldi	r26, 0x27	; 39
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e7 e2       	ldi	r30, 0x27	; 39
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 7e       	andi	r24, 0xE0	; 224
    1f0e:	8c 93       	st	X, r24
		// step :insert value
	     ADMUX_REG  |= copy_channel;
    1f10:	a7 e2       	ldi	r26, 0x27	; 39
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e7 e2       	ldi	r30, 0x27	; 39
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	90 81       	ld	r25, Z
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	89 2b       	or	r24, r25
    1f1e:	8c 93       	st	X, r24
	// step 2 : for single Conversion (start conversion )
      SET_BIT(ADCSRA_REG , ADSC_BIT);
    1f20:	a6 e2       	ldi	r26, 0x26	; 38
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e6 e2       	ldi	r30, 0x26	; 38
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	80 64       	ori	r24, 0x40	; 64
    1f2c:	8c 93       	st	X, r24
	// step 3 : polling wait until conversion is done
      while((GET_BIT(ADCSRA_REG , ADIF_BIT))== 0);
    1f2e:	e6 e2       	ldi	r30, 0x26	; 38
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	82 95       	swap	r24
    1f36:	8f 70       	andi	r24, 0x0F	; 15
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	90 70       	andi	r25, 0x00	; 0
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	a9 f3       	breq	.-22     	; 0x1f2e <M_ADC_u16_adcRead+0x38>
    //  while(SET_BIT(ADCSRA_REG , ADSC_BIT)== 0);
     // SET_BIT(ADCSRA_REG , ADIF_BIT);
	// step 4 : return digital value
    return ADC_REG;
    1f44:	e4 e2       	ldi	r30, 0x24	; 36
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <H_DcMotor_void_init>:
#include "STD_TYPES.h"
#include "Dio_int.h"


void H_DcMotor_void_init(void)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinDir(PORTB_ID ,PIN0_ID ,OUPUT);
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <H_DcMotor_void_ON>:
void H_DcMotor_void_ON(void)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(PORTB_ID,PIN0_ID,HIGH);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <H_DcMotor_void_OF>:
void H_DcMotor_void_OF(void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(PORTB_ID,PIN0_ID,LOW);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
}
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <ultrasonic_vinit>:




void ultrasonic_vinit(u8 triger_port,u8 triger_pin)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <ultrasonic_vinit+0x6>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
	M_Dio_void_setPinDir(triger_port,triger_pin,OUPUT);
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	6a 81       	ldd	r22, Y+2	; 0x02
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <ultrasonic_u16distance>:

u16 ultrasonic_u16distance(u8 triger_port,u8 triger_pin)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	a2 97       	sbiw	r28, 0x22	; 34
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	89 a3       	std	Y+33, r24	; 0x21
    1fd4:	6a a3       	std	Y+34, r22	; 0x22
	u16 a , b , high , distance;
	TCCR1A = 0;
    1fd6:	ef e4       	ldi	r30, 0x4F	; 79
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	10 82       	st	Z, r1
	//TIFR = (1<<ICF1);
	SET_BIT(TIFR,ICF1);
    1fdc:	a8 e5       	ldi	r26, 0x58	; 88
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e8 e5       	ldi	r30, 0x58	; 88
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 62       	ori	r24, 0x20	; 32
    1fe8:	8c 93       	st	X, r24
	M_Dio_void_setPinValue(triger_port,triger_pin,HIGH);
    1fea:	89 a1       	ldd	r24, Y+33	; 0x21
    1fec:	6a a1       	ldd	r22, Y+34	; 0x22
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	8d 8b       	std	Y+21, r24	; 0x15
    1ffe:	9e 8b       	std	Y+22, r25	; 0x16
    2000:	af 8b       	std	Y+23, r26	; 0x17
    2002:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	2b ea       	ldi	r18, 0xAB	; 171
    200e:	3a ea       	ldi	r19, 0xAA	; 170
    2010:	4a ea       	ldi	r20, 0xAA	; 170
    2012:	50 e4       	ldi	r21, 0x40	; 64
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 8b       	std	Y+17, r24	; 0x11
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	ab 8b       	std	Y+19, r26	; 0x13
    2022:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2024:	69 89       	ldd	r22, Y+17	; 0x11
    2026:	7a 89       	ldd	r23, Y+18	; 0x12
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	1c f4       	brge	.+6      	; 0x2042 <ultrasonic_u16distance+0x84>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	88 8b       	std	Y+16, r24	; 0x10
    2040:	91 c0       	rjmp	.+290    	; 0x2164 <ultrasonic_u16distance+0x1a6>
	else if (__tmp > 255)
    2042:	69 89       	ldd	r22, Y+17	; 0x11
    2044:	7a 89       	ldd	r23, Y+18	; 0x12
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	53 e4       	ldi	r21, 0x43	; 67
    2052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	0c f0       	brlt	.+2      	; 0x205c <ultrasonic_u16distance+0x9e>
    205a:	7b c0       	rjmp	.+246    	; 0x2152 <ultrasonic_u16distance+0x194>
	{
		_delay_ms(__us / 1000.0);
    205c:	6d 89       	ldd	r22, Y+21	; 0x15
    205e:	7e 89       	ldd	r23, Y+22	; 0x16
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a e7       	ldi	r20, 0x7A	; 122
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	8c 87       	std	Y+12, r24	; 0x0c
    2076:	9d 87       	std	Y+13, r25	; 0x0d
    2078:	ae 87       	std	Y+14, r26	; 0x0e
    207a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6c 85       	ldd	r22, Y+12	; 0x0c
    207e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2080:	8e 85       	ldd	r24, Y+14	; 0x0e
    2082:	9f 85       	ldd	r25, Y+15	; 0x0f
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	88 87       	std	Y+8, r24	; 0x08
    2096:	99 87       	std	Y+9, r25	; 0x09
    2098:	aa 87       	std	Y+10, r26	; 0x0a
    209a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    209c:	68 85       	ldd	r22, Y+8	; 0x08
    209e:	79 85       	ldd	r23, Y+9	; 0x09
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <ultrasonic_u16distance+0x100>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9f 83       	std	Y+7, r25	; 0x07
    20ba:	8e 83       	std	Y+6, r24	; 0x06
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <ultrasonic_u16distance+0x17e>
	else if (__tmp > 65535)
    20be:	68 85       	ldd	r22, Y+8	; 0x08
    20c0:	79 85       	ldd	r23, Y+9	; 0x09
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <ultrasonic_u16distance+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20da:	8e 85       	ldd	r24, Y+14	; 0x0e
    20dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9f 83       	std	Y+7, r25	; 0x07
    20fc:	8e 83       	std	Y+6, r24	; 0x06
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <ultrasonic_u16distance+0x160>
    2100:	80 e9       	ldi	r24, 0x90	; 144
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	9d 83       	std	Y+5, r25	; 0x05
    2106:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <ultrasonic_u16distance+0x14e>
    2110:	9d 83       	std	Y+5, r25	; 0x05
    2112:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8e 81       	ldd	r24, Y+6	; 0x06
    2116:	9f 81       	ldd	r25, Y+7	; 0x07
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9f 83       	std	Y+7, r25	; 0x07
    211c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <ultrasonic_u16distance+0x142>
    2126:	24 c0       	rjmp	.+72     	; 0x2170 <ultrasonic_u16distance+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	68 85       	ldd	r22, Y+8	; 0x08
    212a:	79 85       	ldd	r23, Y+9	; 0x09
    212c:	8a 85       	ldd	r24, Y+10	; 0x0a
    212e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9f 83       	std	Y+7, r25	; 0x07
    213a:	8e 83       	std	Y+6, r24	; 0x06
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	9f 81       	ldd	r25, Y+7	; 0x07
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <ultrasonic_u16distance+0x18a>
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <ultrasonic_u16distance+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2152:	69 89       	ldd	r22, Y+17	; 0x11
    2154:	7a 89       	ldd	r23, Y+18	; 0x12
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	88 8b       	std	Y+16, r24	; 0x10
    2164:	88 89       	ldd	r24, Y+16	; 0x10
    2166:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8a 95       	dec	r24
    216c:	f1 f7       	brne	.-4      	; 0x216a <ultrasonic_u16distance+0x1ac>
    216e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	M_Dio_void_setPinValue(triger_port,triger_pin,LOW);
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	6a a1       	ldd	r22, Y+34	; 0x22
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>

	TCCR1B = 0XC1;
    217a:	ee e4       	ldi	r30, 0x4E	; 78
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	81 ec       	ldi	r24, 0xC1	; 193
    2180:	80 83       	st	Z, r24
	while(0 == GET_BIT(TIFR,ICF1));
    2182:	e8 e5       	ldi	r30, 0x58	; 88
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	82 95       	swap	r24
    218a:	86 95       	lsr	r24
    218c:	87 70       	andi	r24, 0x07	; 7
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	81 70       	andi	r24, 0x01	; 1
    2194:	90 70       	andi	r25, 0x00	; 0
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	a1 f3       	breq	.-24     	; 0x2182 <ultrasonic_u16distance+0x1c4>
	a = ICR1;
    219a:	e6 e4       	ldi	r30, 0x46	; 70
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	98 a3       	std	Y+32, r25	; 0x20
    21a4:	8f 8f       	std	Y+31, r24	; 0x1f
	//TIFR = (1<<ICF1);
	SET_BIT(TIFR,ICF1);
    21a6:	a8 e5       	ldi	r26, 0x58	; 88
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e8 e5       	ldi	r30, 0x58	; 88
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 62       	ori	r24, 0x20	; 32
    21b2:	8c 93       	st	X, r24
	TCCR1B = 0X81;
    21b4:	ee e4       	ldi	r30, 0x4E	; 78
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	81 e8       	ldi	r24, 0x81	; 129
    21ba:	80 83       	st	Z, r24
	while(0 == GET_BIT(TIFR,ICF1));
    21bc:	e8 e5       	ldi	r30, 0x58	; 88
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	82 95       	swap	r24
    21c4:	86 95       	lsr	r24
    21c6:	87 70       	andi	r24, 0x07	; 7
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	81 70       	andi	r24, 0x01	; 1
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	a1 f3       	breq	.-24     	; 0x21bc <ultrasonic_u16distance+0x1fe>
	b = ICR1;
    21d4:	e6 e4       	ldi	r30, 0x46	; 70
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	9e 8f       	std	Y+30, r25	; 0x1e
    21de:	8d 8f       	std	Y+29, r24	; 0x1d
	//TIFR = (1<<ICF1);
	SET_BIT(TIFR,ICF1);
    21e0:	a8 e5       	ldi	r26, 0x58	; 88
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e8 e5       	ldi	r30, 0x58	; 88
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 62       	ori	r24, 0x20	; 32
    21ec:	8c 93       	st	X, r24
	TCNT1 = (u16)0;
    21ee:	ec e4       	ldi	r30, 0x4C	; 76
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	11 82       	std	Z+1, r1	; 0x01
    21f4:	10 82       	st	Z, r1
	TCCR1B = 0;
    21f6:	ee e4       	ldi	r30, 0x4E	; 78
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	10 82       	st	Z, r1
	high = b - a;
    21fc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    21fe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2200:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2202:	98 a1       	ldd	r25, Y+32	; 0x20
    2204:	a9 01       	movw	r20, r18
    2206:	48 1b       	sub	r20, r24
    2208:	59 0b       	sbc	r21, r25
    220a:	ca 01       	movw	r24, r20
    220c:	9c 8f       	std	Y+28, r25	; 0x1c
    220e:	8b 8f       	std	Y+27, r24	; 0x1b
	distance = ((f32)(high*34600)/(16000000UL*2));
    2210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2214:	cc 01       	movw	r24, r24
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	28 e2       	ldi	r18, 0x28	; 40
    221c:	37 e8       	ldi	r19, 0x87	; 135
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__mulsi3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	34 e2       	ldi	r19, 0x24	; 36
    2242:	44 ef       	ldi	r20, 0xF4	; 244
    2244:	5b e4       	ldi	r21, 0x4B	; 75
    2246:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9a 8f       	std	Y+26, r25	; 0x1a
    225c:	89 8f       	std	Y+25, r24	; 0x19
	return distance;
    225e:	89 8d       	ldd	r24, Y+25	; 0x19
    2260:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    2262:	a2 96       	adiw	r28, 0x22	; 34
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <H_SSD_void_init>:
#include "SSD_priv.h"
#include "SSD_config.h"
#include "SSD_int.h"
// u8 arr[]={0x3F, };
void H_SSD_void_init(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	// set all SSD pins as output
	M_Dio_void_setPinDir(SSD_LED_A_PORT,SSD_LED_A_PIN,OUPUT );
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_B_PORT,SSD_LED_B_PIN,OUPUT );
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	62 e0       	ldi	r22, 0x02	; 2
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_C_PORT,SSD_LED_C_PIN,OUPUT );
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	63 e0       	ldi	r22, 0x03	; 3
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_D_PORT,SSD_LED_D_PIN,OUPUT );
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	64 e0       	ldi	r22, 0x04	; 4
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_E_PORT,SSD_LED_E_PIN,OUPUT );
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	65 e0       	ldi	r22, 0x05	; 5
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_F_PORT,SSD_LED_F_PIN,OUPUT );
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	66 e0       	ldi	r22, 0x06	; 6
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_G_PORT,SSD_LED_G_PIN,OUPUT );
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	67 e0       	ldi	r22, 0x07	; 7
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,OUPUT );
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>

	// set Enable pins as output
	M_Dio_void_setPinDir(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,OUPUT );
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	66 e0       	ldi	r22, 0x06	; 6
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,OUPUT );
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	67 e0       	ldi	r22, 0x07	; 7
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	a7 97       	sbiw	r28, 0x27	; 39
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	8b a3       	std	Y+35, r24	; 0x23
	if(number > 99 )
    22fc:	8b a1       	ldd	r24, Y+35	; 0x23
    22fe:	84 36       	cpi	r24, 0x64	; 100
    2300:	08 f0       	brcs	.+2      	; 0x2304 <H_SSD_void_DisplayNumber+0x1e>
    2302:	9b c4       	rjmp	.+2358   	; 0x2c3a <H_SSD_void_DisplayNumber+0x954>
	{
		return ;
	}
	u32 i ;
	u8 units = number % 10;
    2304:	8b a1       	ldd	r24, Y+35	; 0x23
    2306:	9a e0       	ldi	r25, 0x0A	; 10
    2308:	69 2f       	mov	r22, r25
    230a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodqi4>
    230e:	89 2f       	mov	r24, r25
    2310:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number / 10 ;
    2312:	8b a1       	ldd	r24, Y+35	; 0x23
    2314:	9a e0       	ldi	r25, 0x0A	; 10
    2316:	69 2f       	mov	r22, r25
    2318:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodqi4>
    231c:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i= 0;i< SSD_DISPLAY_TIME ;i++)
    231e:	1f 8e       	std	Y+31, r1	; 0x1f
    2320:	18 a2       	std	Y+32, r1	; 0x20
    2322:	19 a2       	std	Y+33, r1	; 0x21
    2324:	1a a2       	std	Y+34, r1	; 0x22
    2326:	7f c4       	rjmp	.+2302   	; 0x2c26 <H_SSD_void_DisplayNumber+0x940>
	{
		switch(units)
    2328:	8e 8d       	ldd	r24, Y+30	; 0x1e
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	3f a3       	std	Y+39, r19	; 0x27
    2330:	2e a3       	std	Y+38, r18	; 0x26
    2332:	8e a1       	ldd	r24, Y+38	; 0x26
    2334:	9f a1       	ldd	r25, Y+39	; 0x27
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	91 05       	cpc	r25, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <H_SSD_void_DisplayNumber+0x58>
    233c:	d7 c0       	rjmp	.+430    	; 0x24ec <H_SSD_void_DisplayNumber+0x206>
    233e:	2e a1       	ldd	r18, Y+38	; 0x26
    2340:	3f a1       	ldd	r19, Y+39	; 0x27
    2342:	25 30       	cpi	r18, 0x05	; 5
    2344:	31 05       	cpc	r19, r1
    2346:	ec f4       	brge	.+58     	; 0x2382 <H_SSD_void_DisplayNumber+0x9c>
    2348:	8e a1       	ldd	r24, Y+38	; 0x26
    234a:	9f a1       	ldd	r25, Y+39	; 0x27
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	91 05       	cpc	r25, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <H_SSD_void_DisplayNumber+0x6e>
    2352:	60 c0       	rjmp	.+192    	; 0x2414 <H_SSD_void_DisplayNumber+0x12e>
    2354:	2e a1       	ldd	r18, Y+38	; 0x26
    2356:	3f a1       	ldd	r19, Y+39	; 0x27
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	31 05       	cpc	r19, r1
    235c:	2c f4       	brge	.+10     	; 0x2368 <H_SSD_void_DisplayNumber+0x82>
    235e:	8e a1       	ldd	r24, Y+38	; 0x26
    2360:	9f a1       	ldd	r25, Y+39	; 0x27
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	99 f1       	breq	.+102    	; 0x23cc <H_SSD_void_DisplayNumber+0xe6>
    2366:	99 c1       	rjmp	.+818    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
    2368:	2e a1       	ldd	r18, Y+38	; 0x26
    236a:	3f a1       	ldd	r19, Y+39	; 0x27
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	31 05       	cpc	r19, r1
    2370:	09 f4       	brne	.+2      	; 0x2374 <H_SSD_void_DisplayNumber+0x8e>
    2372:	74 c0       	rjmp	.+232    	; 0x245c <H_SSD_void_DisplayNumber+0x176>
    2374:	8e a1       	ldd	r24, Y+38	; 0x26
    2376:	9f a1       	ldd	r25, Y+39	; 0x27
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <H_SSD_void_DisplayNumber+0x9a>
    237e:	92 c0       	rjmp	.+292    	; 0x24a4 <H_SSD_void_DisplayNumber+0x1be>
    2380:	8c c1       	rjmp	.+792    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
    2382:	2e a1       	ldd	r18, Y+38	; 0x26
    2384:	3f a1       	ldd	r19, Y+39	; 0x27
    2386:	27 30       	cpi	r18, 0x07	; 7
    2388:	31 05       	cpc	r19, r1
    238a:	09 f4       	brne	.+2      	; 0x238e <H_SSD_void_DisplayNumber+0xa8>
    238c:	1b c1       	rjmp	.+566    	; 0x25c4 <H_SSD_void_DisplayNumber+0x2de>
    238e:	8e a1       	ldd	r24, Y+38	; 0x26
    2390:	9f a1       	ldd	r25, Y+39	; 0x27
    2392:	88 30       	cpi	r24, 0x08	; 8
    2394:	91 05       	cpc	r25, r1
    2396:	6c f4       	brge	.+26     	; 0x23b2 <H_SSD_void_DisplayNumber+0xcc>
    2398:	2e a1       	ldd	r18, Y+38	; 0x26
    239a:	3f a1       	ldd	r19, Y+39	; 0x27
    239c:	25 30       	cpi	r18, 0x05	; 5
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <H_SSD_void_DisplayNumber+0xbe>
    23a2:	c8 c0       	rjmp	.+400    	; 0x2534 <H_SSD_void_DisplayNumber+0x24e>
    23a4:	8e a1       	ldd	r24, Y+38	; 0x26
    23a6:	9f a1       	ldd	r25, Y+39	; 0x27
    23a8:	86 30       	cpi	r24, 0x06	; 6
    23aa:	91 05       	cpc	r25, r1
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <H_SSD_void_DisplayNumber+0xca>
    23ae:	e6 c0       	rjmp	.+460    	; 0x257c <H_SSD_void_DisplayNumber+0x296>
    23b0:	74 c1       	rjmp	.+744    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
    23b2:	2e a1       	ldd	r18, Y+38	; 0x26
    23b4:	3f a1       	ldd	r19, Y+39	; 0x27
    23b6:	28 30       	cpi	r18, 0x08	; 8
    23b8:	31 05       	cpc	r19, r1
    23ba:	09 f4       	brne	.+2      	; 0x23be <H_SSD_void_DisplayNumber+0xd8>
    23bc:	27 c1       	rjmp	.+590    	; 0x260c <H_SSD_void_DisplayNumber+0x326>
    23be:	8e a1       	ldd	r24, Y+38	; 0x26
    23c0:	9f a1       	ldd	r25, Y+39	; 0x27
    23c2:	89 30       	cpi	r24, 0x09	; 9
    23c4:	91 05       	cpc	r25, r1
    23c6:	09 f4       	brne	.+2      	; 0x23ca <H_SSD_void_DisplayNumber+0xe4>
    23c8:	45 c1       	rjmp	.+650    	; 0x2654 <H_SSD_void_DisplayNumber+0x36e>
    23ca:	67 c1       	rjmp	.+718    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
			{
			case 0:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	62 e0       	ldi	r22, 0x02	; 2
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	63 e0       	ldi	r22, 0x03	; 3
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	64 e0       	ldi	r22, 0x04	; 4
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	65 e0       	ldi	r22, 0x05	; 5
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	66 e0       	ldi	r22, 0x06	; 6
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , LOW);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	67 e0       	ldi	r22, 0x07	; 7
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2412:	43 c1       	rjmp	.+646    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 1:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , LOW);
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	63 e0       	ldi	r22, 0x03	; 3
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , LOW);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	64 e0       	ldi	r22, 0x04	; 4
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	65 e0       	ldi	r22, 0x05	; 5
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	66 e0       	ldi	r22, 0x06	; 6
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , LOW);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	67 e0       	ldi	r22, 0x07	; 7
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    245a:	1f c1       	rjmp	.+574    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 2 :
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , LOW);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	64 e0       	ldi	r22, 0x04	; 4
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	65 e0       	ldi	r22, 0x05	; 5
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	67 e0       	ldi	r22, 0x07	; 7
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    24a2:	fb c0       	rjmp	.+502    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 3:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	62 e0       	ldi	r22, 0x02	; 2
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	63 e0       	ldi	r22, 0x03	; 3
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	64 e0       	ldi	r22, 0x04	; 4
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	65 e0       	ldi	r22, 0x05	; 5
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	66 e0       	ldi	r22, 0x06	; 6
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	67 e0       	ldi	r22, 0x07	; 7
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    24ea:	d7 c0       	rjmp	.+430    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 4:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , LOW);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	62 e0       	ldi	r22, 0x02	; 2
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , LOW);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	64 e0       	ldi	r22, 0x04	; 4
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	65 e0       	ldi	r22, 0x05	; 5
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	66 e0       	ldi	r22, 0x06	; 6
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	67 e0       	ldi	r22, 0x07	; 7
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2532:	b3 c0       	rjmp	.+358    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 5:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , LOW);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	62 e0       	ldi	r22, 0x02	; 2
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	63 e0       	ldi	r22, 0x03	; 3
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	64 e0       	ldi	r22, 0x04	; 4
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	65 e0       	ldi	r22, 0x05	; 5
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	66 e0       	ldi	r22, 0x06	; 6
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	67 e0       	ldi	r22, 0x07	; 7
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    257a:	8f c0       	rjmp	.+286    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 6:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , LOW);
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	62 e0       	ldi	r22, 0x02	; 2
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	63 e0       	ldi	r22, 0x03	; 3
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	64 e0       	ldi	r22, 0x04	; 4
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	65 e0       	ldi	r22, 0x05	; 5
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	66 e0       	ldi	r22, 0x06	; 6
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	67 e0       	ldi	r22, 0x07	; 7
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    25c2:	6b c0       	rjmp	.+214    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 7:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	62 e0       	ldi	r22, 0x02	; 2
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	63 e0       	ldi	r22, 0x03	; 3
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , LOW);
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	64 e0       	ldi	r22, 0x04	; 4
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	65 e0       	ldi	r22, 0x05	; 5
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	66 e0       	ldi	r22, 0x06	; 6
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , LOW);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	67 e0       	ldi	r22, 0x07	; 7
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    260a:	47 c0       	rjmp	.+142    	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 8:
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	63 e0       	ldi	r22, 0x03	; 3
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	65 e0       	ldi	r22, 0x05	; 5
    2638:	41 e0       	ldi	r20, 0x01	; 1
    263a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	66 e0       	ldi	r22, 0x06	; 6
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	67 e0       	ldi	r22, 0x07	; 7
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2652:	23 c0       	rjmp	.+70     	; 0x269a <H_SSD_void_DisplayNumber+0x3b4>
				break;
			case 9 :
				M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	61 e0       	ldi	r22, 0x01	; 1
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	62 e0       	ldi	r22, 0x02	; 2
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	63 e0       	ldi	r22, 0x03	; 3
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	64 e0       	ldi	r22, 0x04	; 4
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	65 e0       	ldi	r22, 0x05	; 5
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	66 e0       	ldi	r22, 0x06	; 6
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	67 e0       	ldi	r22, 0x07	; 7
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				break;
			}
			// enable Dig 1 (units)
			M_Dio_void_setPinValue(SSD_DIG_1_EN_PORT , SSD_DIG_1_EN_PIN , HIGH);
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	66 e0       	ldi	r22, 0x06	; 6
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
			// disable Dig 2 (tens)
			M_Dio_void_setPinValue(SSD_DIG_2_EN_PORT , SSD_DIG_2_EN_PIN , LOW);
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	67 e0       	ldi	r22, 0x07	; 7
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e8       	ldi	r26, 0x80	; 128
    26b4:	bf e3       	ldi	r27, 0x3F	; 63
    26b6:	89 8f       	std	Y+25, r24	; 0x19
    26b8:	9a 8f       	std	Y+26, r25	; 0x1a
    26ba:	ab 8f       	std	Y+27, r26	; 0x1b
    26bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	69 8d       	ldd	r22, Y+25	; 0x19
    26c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a e7       	ldi	r20, 0x7A	; 122
    26cc:	55 e4       	ldi	r21, 0x45	; 69
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8d 8b       	std	Y+21, r24	; 0x15
    26d8:	9e 8b       	std	Y+22, r25	; 0x16
    26da:	af 8b       	std	Y+23, r26	; 0x17
    26dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <H_SSD_void_DisplayNumber+0x41a>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <H_SSD_void_DisplayNumber+0x498>
	else if (__tmp > 65535)
    2700:	6d 89       	ldd	r22, Y+21	; 0x15
    2702:	7e 89       	ldd	r23, Y+22	; 0x16
    2704:	8f 89       	ldd	r24, Y+23	; 0x17
    2706:	98 8d       	ldd	r25, Y+24	; 0x18
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <H_SSD_void_DisplayNumber+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	69 8d       	ldd	r22, Y+25	; 0x19
    271a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9c 8b       	std	Y+20, r25	; 0x14
    273e:	8b 8b       	std	Y+19, r24	; 0x13
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <H_SSD_void_DisplayNumber+0x47a>
    2742:	80 e9       	ldi	r24, 0x90	; 144
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	9a 8b       	std	Y+18, r25	; 0x12
    2748:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	9a 89       	ldd	r25, Y+18	; 0x12
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <H_SSD_void_DisplayNumber+0x468>
    2752:	9a 8b       	std	Y+18, r25	; 0x12
    2754:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9c 8b       	std	Y+20, r25	; 0x14
    275e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	9c 89       	ldd	r25, Y+20	; 0x14
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <H_SSD_void_DisplayNumber+0x45c>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <H_SSD_void_DisplayNumber+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6d 89       	ldd	r22, Y+21	; 0x15
    276c:	7e 89       	ldd	r23, Y+22	; 0x16
    276e:	8f 89       	ldd	r24, Y+23	; 0x17
    2770:	98 8d       	ldd	r25, Y+24	; 0x18
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9c 8b       	std	Y+20, r25	; 0x14
    277c:	8b 8b       	std	Y+19, r24	; 0x13
    277e:	8b 89       	ldd	r24, Y+19	; 0x13
    2780:	9c 89       	ldd	r25, Y+20	; 0x14
    2782:	98 8b       	std	Y+16, r25	; 0x10
    2784:	8f 87       	std	Y+15, r24	; 0x0f
    2786:	8f 85       	ldd	r24, Y+15	; 0x0f
    2788:	98 89       	ldd	r25, Y+16	; 0x10
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <H_SSD_void_DisplayNumber+0x4a4>
    278e:	98 8b       	std	Y+16, r25	; 0x10
    2790:	8f 87       	std	Y+15, r24	; 0x0f
			// delay
			_delay_ms(1);
			// disable Dig 1(units )
			M_Dio_void_setPinValue(SSD_DIG_1_EN_PORT , SSD_DIG_1_EN_PIN , LOW);
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	66 e0       	ldi	r22, 0x06	; 6
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>

			switch(tens)
    279c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	3d a3       	std	Y+37, r19	; 0x25
    27a4:	2c a3       	std	Y+36, r18	; 0x24
    27a6:	8c a1       	ldd	r24, Y+36	; 0x24
    27a8:	9d a1       	ldd	r25, Y+37	; 0x25
    27aa:	84 30       	cpi	r24, 0x04	; 4
    27ac:	91 05       	cpc	r25, r1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <H_SSD_void_DisplayNumber+0x4cc>
    27b0:	d7 c0       	rjmp	.+430    	; 0x2960 <H_SSD_void_DisplayNumber+0x67a>
    27b2:	2c a1       	ldd	r18, Y+36	; 0x24
    27b4:	3d a1       	ldd	r19, Y+37	; 0x25
    27b6:	25 30       	cpi	r18, 0x05	; 5
    27b8:	31 05       	cpc	r19, r1
    27ba:	ec f4       	brge	.+58     	; 0x27f6 <H_SSD_void_DisplayNumber+0x510>
    27bc:	8c a1       	ldd	r24, Y+36	; 0x24
    27be:	9d a1       	ldd	r25, Y+37	; 0x25
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <H_SSD_void_DisplayNumber+0x4e2>
    27c6:	60 c0       	rjmp	.+192    	; 0x2888 <H_SSD_void_DisplayNumber+0x5a2>
    27c8:	2c a1       	ldd	r18, Y+36	; 0x24
    27ca:	3d a1       	ldd	r19, Y+37	; 0x25
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f4       	brge	.+10     	; 0x27dc <H_SSD_void_DisplayNumber+0x4f6>
    27d2:	8c a1       	ldd	r24, Y+36	; 0x24
    27d4:	9d a1       	ldd	r25, Y+37	; 0x25
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	99 f1       	breq	.+102    	; 0x2840 <H_SSD_void_DisplayNumber+0x55a>
    27da:	99 c1       	rjmp	.+818    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
    27dc:	2c a1       	ldd	r18, Y+36	; 0x24
    27de:	3d a1       	ldd	r19, Y+37	; 0x25
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <H_SSD_void_DisplayNumber+0x502>
    27e6:	74 c0       	rjmp	.+232    	; 0x28d0 <H_SSD_void_DisplayNumber+0x5ea>
    27e8:	8c a1       	ldd	r24, Y+36	; 0x24
    27ea:	9d a1       	ldd	r25, Y+37	; 0x25
    27ec:	83 30       	cpi	r24, 0x03	; 3
    27ee:	91 05       	cpc	r25, r1
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <H_SSD_void_DisplayNumber+0x50e>
    27f2:	92 c0       	rjmp	.+292    	; 0x2918 <H_SSD_void_DisplayNumber+0x632>
    27f4:	8c c1       	rjmp	.+792    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
    27f6:	2c a1       	ldd	r18, Y+36	; 0x24
    27f8:	3d a1       	ldd	r19, Y+37	; 0x25
    27fa:	27 30       	cpi	r18, 0x07	; 7
    27fc:	31 05       	cpc	r19, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <H_SSD_void_DisplayNumber+0x51c>
    2800:	1b c1       	rjmp	.+566    	; 0x2a38 <H_SSD_void_DisplayNumber+0x752>
    2802:	8c a1       	ldd	r24, Y+36	; 0x24
    2804:	9d a1       	ldd	r25, Y+37	; 0x25
    2806:	88 30       	cpi	r24, 0x08	; 8
    2808:	91 05       	cpc	r25, r1
    280a:	6c f4       	brge	.+26     	; 0x2826 <H_SSD_void_DisplayNumber+0x540>
    280c:	2c a1       	ldd	r18, Y+36	; 0x24
    280e:	3d a1       	ldd	r19, Y+37	; 0x25
    2810:	25 30       	cpi	r18, 0x05	; 5
    2812:	31 05       	cpc	r19, r1
    2814:	09 f4       	brne	.+2      	; 0x2818 <H_SSD_void_DisplayNumber+0x532>
    2816:	c8 c0       	rjmp	.+400    	; 0x29a8 <H_SSD_void_DisplayNumber+0x6c2>
    2818:	8c a1       	ldd	r24, Y+36	; 0x24
    281a:	9d a1       	ldd	r25, Y+37	; 0x25
    281c:	86 30       	cpi	r24, 0x06	; 6
    281e:	91 05       	cpc	r25, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <H_SSD_void_DisplayNumber+0x53e>
    2822:	e6 c0       	rjmp	.+460    	; 0x29f0 <H_SSD_void_DisplayNumber+0x70a>
    2824:	74 c1       	rjmp	.+744    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
    2826:	2c a1       	ldd	r18, Y+36	; 0x24
    2828:	3d a1       	ldd	r19, Y+37	; 0x25
    282a:	28 30       	cpi	r18, 0x08	; 8
    282c:	31 05       	cpc	r19, r1
    282e:	09 f4       	brne	.+2      	; 0x2832 <H_SSD_void_DisplayNumber+0x54c>
    2830:	27 c1       	rjmp	.+590    	; 0x2a80 <H_SSD_void_DisplayNumber+0x79a>
    2832:	8c a1       	ldd	r24, Y+36	; 0x24
    2834:	9d a1       	ldd	r25, Y+37	; 0x25
    2836:	89 30       	cpi	r24, 0x09	; 9
    2838:	91 05       	cpc	r25, r1
    283a:	09 f4       	brne	.+2      	; 0x283e <H_SSD_void_DisplayNumber+0x558>
    283c:	45 c1       	rjmp	.+650    	; 0x2ac8 <H_SSD_void_DisplayNumber+0x7e2>
    283e:	67 c1       	rjmp	.+718    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
				{
				case 0:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	62 e0       	ldi	r22, 0x02	; 2
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	63 e0       	ldi	r22, 0x03	; 3
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	64 e0       	ldi	r22, 0x04	; 4
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	65 e0       	ldi	r22, 0x05	; 5
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	66 e0       	ldi	r22, 0x06	; 6
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , LOW);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	67 e0       	ldi	r22, 0x07	; 7
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2886:	43 c1       	rjmp	.+646    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 1:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , LOW);
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	62 e0       	ldi	r22, 0x02	; 2
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , LOW);
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	64 e0       	ldi	r22, 0x04	; 4
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	65 e0       	ldi	r22, 0x05	; 5
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	66 e0       	ldi	r22, 0x06	; 6
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , LOW);
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	67 e0       	ldi	r22, 0x07	; 7
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    28ce:	1f c1       	rjmp	.+574    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 2 :
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , LOW);
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	63 e0       	ldi	r22, 0x03	; 3
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	65 e0       	ldi	r22, 0x05	; 5
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	66 e0       	ldi	r22, 0x06	; 6
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	67 e0       	ldi	r22, 0x07	; 7
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2916:	fb c0       	rjmp	.+502    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 3:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	62 e0       	ldi	r22, 0x02	; 2
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	63 e0       	ldi	r22, 0x03	; 3
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	64 e0       	ldi	r22, 0x04	; 4
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	65 e0       	ldi	r22, 0x05	; 5
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	66 e0       	ldi	r22, 0x06	; 6
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	67 e0       	ldi	r22, 0x07	; 7
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    295e:	d7 c0       	rjmp	.+430    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 4:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , LOW);
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	62 e0       	ldi	r22, 0x02	; 2
    296e:	41 e0       	ldi	r20, 0x01	; 1
    2970:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	63 e0       	ldi	r22, 0x03	; 3
    2978:	41 e0       	ldi	r20, 0x01	; 1
    297a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , LOW);
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	64 e0       	ldi	r22, 0x04	; 4
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	65 e0       	ldi	r22, 0x05	; 5
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	66 e0       	ldi	r22, 0x06	; 6
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	67 e0       	ldi	r22, 0x07	; 7
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    29a6:	b3 c0       	rjmp	.+358    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 5:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , LOW);
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	62 e0       	ldi	r22, 0x02	; 2
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	63 e0       	ldi	r22, 0x03	; 3
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	64 e0       	ldi	r22, 0x04	; 4
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	65 e0       	ldi	r22, 0x05	; 5
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	66 e0       	ldi	r22, 0x06	; 6
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	67 e0       	ldi	r22, 0x07	; 7
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    29ee:	8f c0       	rjmp	.+286    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 6:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , LOW);
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	62 e0       	ldi	r22, 0x02	; 2
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	63 e0       	ldi	r22, 0x03	; 3
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	64 e0       	ldi	r22, 0x04	; 4
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	65 e0       	ldi	r22, 0x05	; 5
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	66 e0       	ldi	r22, 0x06	; 6
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	67 e0       	ldi	r22, 0x07	; 7
    2a30:	41 e0       	ldi	r20, 0x01	; 1
    2a32:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2a36:	6b c0       	rjmp	.+214    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 7:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	62 e0       	ldi	r22, 0x02	; 2
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	63 e0       	ldi	r22, 0x03	; 3
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , LOW);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	64 e0       	ldi	r22, 0x04	; 4
    2a5a:	40 e0       	ldi	r20, 0x00	; 0
    2a5c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	65 e0       	ldi	r22, 0x05	; 5
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , LOW);
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	66 e0       	ldi	r22, 0x06	; 6
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , LOW);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	67 e0       	ldi	r22, 0x07	; 7
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2a7e:	47 c0       	rjmp	.+142    	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 8:
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	61 e0       	ldi	r22, 0x01	; 1
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	62 e0       	ldi	r22, 0x02	; 2
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	63 e0       	ldi	r22, 0x03	; 3
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	64 e0       	ldi	r22, 0x04	; 4
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , HIGH);
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	65 e0       	ldi	r22, 0x05	; 5
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	66 e0       	ldi	r22, 0x06	; 6
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	67 e0       	ldi	r22, 0x07	; 7
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2ac6:	23 c0       	rjmp	.+70     	; 0x2b0e <H_SSD_void_DisplayNumber+0x828>
					break;
				case 9 :
					M_Dio_void_setPinValue(SSD_LED_A_PORT , SSD_LED_A_PIN , HIGH);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	41 e0       	ldi	r20, 0x01	; 1
    2ace:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT , SSD_LED_B_PIN , HIGH);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	62 e0       	ldi	r22, 0x02	; 2
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT , SSD_LED_C_PIN , HIGH);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	63 e0       	ldi	r22, 0x03	; 3
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT , SSD_LED_D_PIN , HIGH);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	64 e0       	ldi	r22, 0x04	; 4
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT , SSD_LED_E_PIN , LOW);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	65 e0       	ldi	r22, 0x05	; 5
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT , SSD_LED_F_PIN , HIGH);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	66 e0       	ldi	r22, 0x06	; 6
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT , SSD_LED_G_PIN , HIGH);
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	67 e0       	ldi	r22, 0x07	; 7
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
					break;
				}
			    // enable Dig 2 (tens)
				M_Dio_void_setPinValue(SSD_DIG_2_EN_PORT , SSD_DIG_2_EN_PIN , HIGH);
    2b0e:	83 e0       	ldi	r24, 0x03	; 3
    2b10:	67 e0       	ldi	r22, 0x07	; 7
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e8       	ldi	r26, 0x80	; 128
    2b1e:	bf e3       	ldi	r27, 0x3F	; 63
    2b20:	8b 87       	std	Y+11, r24	; 0x0b
    2b22:	9c 87       	std	Y+12, r25	; 0x0c
    2b24:	ad 87       	std	Y+13, r26	; 0x0d
    2b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	55 e4       	ldi	r21, 0x45	; 69
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f 83       	std	Y+7, r24	; 0x07
    2b42:	98 87       	std	Y+8, r25	; 0x08
    2b44:	a9 87       	std	Y+9, r26	; 0x09
    2b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <H_SSD_void_DisplayNumber+0x884>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <H_SSD_void_DisplayNumber+0x902>
	else if (__tmp > 65535)
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <H_SSD_void_DisplayNumber+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <H_SSD_void_DisplayNumber+0x8e4>
    2bac:	80 e9       	ldi	r24, 0x90	; 144
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <H_SSD_void_DisplayNumber+0x8d2>
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <H_SSD_void_DisplayNumber+0x8c6>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <H_SSD_void_DisplayNumber+0x916>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <H_SSD_void_DisplayNumber+0x90e>
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
					// delay
				_delay_ms(1);
				// disable Dig 1(units )
				M_Dio_void_setPinValue(SSD_DIG_1_EN_PORT , SSD_DIG_1_EN_PIN , LOW);
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	66 e0       	ldi	r22, 0x06	; 6
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
				//disable Dig 2 (tens )
				M_Dio_void_setPinValue(SSD_DIG_2_EN_PORT , SSD_DIG_2_EN_PIN , LOW);
    2c06:	83 e0       	ldi	r24, 0x03	; 3
    2c08:	67 e0       	ldi	r22, 0x07	; 7
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
		return ;
	}
	u32 i ;
	u8 units = number % 10;
	u8 tens = number / 10 ;
	for(i= 0;i< SSD_DISPLAY_TIME ;i++)
    2c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c12:	98 a1       	ldd	r25, Y+32	; 0x20
    2c14:	a9 a1       	ldd	r26, Y+33	; 0x21
    2c16:	ba a1       	ldd	r27, Y+34	; 0x22
    2c18:	01 96       	adiw	r24, 0x01	; 1
    2c1a:	a1 1d       	adc	r26, r1
    2c1c:	b1 1d       	adc	r27, r1
    2c1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c20:	98 a3       	std	Y+32, r25	; 0x20
    2c22:	a9 a3       	std	Y+33, r26	; 0x21
    2c24:	ba a3       	std	Y+34, r27	; 0x22
    2c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c28:	98 a1       	ldd	r25, Y+32	; 0x20
    2c2a:	a9 a1       	ldd	r26, Y+33	; 0x21
    2c2c:	ba a1       	ldd	r27, Y+34	; 0x22
    2c2e:	8a 3f       	cpi	r24, 0xFA	; 250
    2c30:	91 05       	cpc	r25, r1
    2c32:	a1 05       	cpc	r26, r1
    2c34:	b1 05       	cpc	r27, r1
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <H_SSD_void_DisplayNumber+0x954>
    2c38:	77 cb       	rjmp	.-2322   	; 0x2328 <H_SSD_void_DisplayNumber+0x42>
				M_Dio_void_setPinValue(SSD_DIG_1_EN_PORT , SSD_DIG_1_EN_PIN , LOW);
				//disable Dig 2 (tens )
				M_Dio_void_setPinValue(SSD_DIG_2_EN_PORT , SSD_DIG_2_EN_PIN , LOW);
	}

}
    2c3a:	a7 96       	adiw	r28, 0x27	; 39
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <H_PB_void_init>:
#include "PB_priv.h"
#include "PB_config.h"
#include "PB_int.h"

void H_PB_void_init(const PB_t * ptr)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <H_PB_void_init+0x6>
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01
  // set direction
	M_Dio_void_setPinDir(ptr->PB_port,ptr->PB_pin, INPUT);
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	81 81       	ldd	r24, Z+1	; 0x01
    2c60:	e9 81       	ldd	r30, Y+1	; 0x01
    2c62:	fa 81       	ldd	r31, Y+2	; 0x02
    2c64:	92 81       	ldd	r25, Z+2	; 0x02
    2c66:	69 2f       	mov	r22, r25
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
}
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <H_PB_void_read>:


void H_PB_void_read (const PB_t * ptr,u8 *pvalue )
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	a1 97       	sbiw	r28, 0x21	; 33
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	9f 8f       	std	Y+31, r25	; 0x1f
    2c8e:	8e 8f       	std	Y+30, r24	; 0x1e
    2c90:	79 a3       	std	Y+33, r23	; 0x21
    2c92:	68 a3       	std	Y+32, r22	; 0x20
	u8  read;
   if(ptr->PB_ActiveMode == ACTIVE_LOW)
    2c94:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c96:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c98:	83 81       	ldd	r24, Z+3	; 0x03
    2c9a:	88 23       	and	r24, r24
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <H_PB_void_read+0x28>
    2c9e:	ad c0       	rjmp	.+346    	; 0x2dfa <H_PB_void_read+0x182>
   {
	   *pvalue = NOT_PRESSED_ACTIVE_LOW;
    2ca0:	e8 a1       	ldd	r30, Y+32	; 0x20
    2ca2:	f9 a1       	ldd	r31, Y+33	; 0x21
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	80 83       	st	Z, r24
       // get pin value
	   M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
    2ca8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2caa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2cac:	81 81       	ldd	r24, Z+1	; 0x01
    2cae:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2cb0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2cb2:	92 81       	ldd	r25, Z+2	; 0x02
    2cb4:	9e 01       	movw	r18, r28
    2cb6:	23 5e       	subi	r18, 0xE3	; 227
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	69 2f       	mov	r22, r25
    2cbc:	a9 01       	movw	r20, r18
    2cbe:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
	   if(read == PRESSED_ACTIVE_LOW)
    2cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc4:	88 23       	and	r24, r24
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <H_PB_void_read+0x52>
    2cc8:	49 c1       	rjmp	.+658    	; 0x2f5c <H_PB_void_read+0x2e4>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a8 e4       	ldi	r26, 0x48	; 72
    2cd0:	b3 e4       	ldi	r27, 0x43	; 67
    2cd2:	89 8f       	std	Y+25, r24	; 0x19
    2cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	69 8d       	ldd	r22, Y+25	; 0x19
    2cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a e7       	ldi	r20, 0x7A	; 122
    2ce8:	55 e4       	ldi	r21, 0x45	; 69
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8d 8b       	std	Y+21, r24	; 0x15
    2cf4:	9e 8b       	std	Y+22, r25	; 0x16
    2cf6:	af 8b       	std	Y+23, r26	; 0x17
    2cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2d00:	98 8d       	ldd	r25, Y+24	; 0x18
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	2c f4       	brge	.+10     	; 0x2d1c <H_PB_void_read+0xa4>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9c 8b       	std	Y+20, r25	; 0x14
    2d18:	8b 8b       	std	Y+19, r24	; 0x13
    2d1a:	3f c0       	rjmp	.+126    	; 0x2d9a <H_PB_void_read+0x122>
	else if (__tmp > 65535)
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	3f ef       	ldi	r19, 0xFF	; 255
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	57 e4       	ldi	r21, 0x47	; 71
    2d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	4c f5       	brge	.+82     	; 0x2d86 <H_PB_void_read+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d34:	69 8d       	ldd	r22, Y+25	; 0x19
    2d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9c 8b       	std	Y+20, r25	; 0x14
    2d5a:	8b 8b       	std	Y+19, r24	; 0x13
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <H_PB_void_read+0x104>
    2d5e:	80 e9       	ldi	r24, 0x90	; 144
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	9a 8b       	std	Y+18, r25	; 0x12
    2d64:	89 8b       	std	Y+17, r24	; 0x11
    2d66:	89 89       	ldd	r24, Y+17	; 0x11
    2d68:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <H_PB_void_read+0xf2>
    2d6e:	9a 8b       	std	Y+18, r25	; 0x12
    2d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	8b 89       	ldd	r24, Y+19	; 0x13
    2d74:	9c 89       	ldd	r25, Y+20	; 0x14
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <H_PB_void_read+0xe6>
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <H_PB_void_read+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	6d 89       	ldd	r22, Y+21	; 0x15
    2d88:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9c 8b       	std	Y+20, r25	; 0x14
    2d98:	8b 8b       	std	Y+19, r24	; 0x13
    2d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9e:	98 8b       	std	Y+16, r25	; 0x10
    2da0:	8f 87       	std	Y+15, r24	; 0x0f
    2da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da4:	98 89       	ldd	r25, Y+16	; 0x10
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <H_PB_void_read+0x12e>
    2daa:	98 8b       	std	Y+16, r25	; 0x10
    2dac:	8f 87       	std	Y+15, r24	; 0x0f
	   {
		   // debouncing delay
		   _delay_ms(200);
		   //get 2nd reading to make sure it is not noise
		   M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
    2dae:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2db0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2db2:	81 81       	ldd	r24, Z+1	; 0x01
    2db4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2db6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2db8:	92 81       	ldd	r25, Z+2	; 0x02
    2dba:	9e 01       	movw	r18, r28
    2dbc:	23 5e       	subi	r18, 0xE3	; 227
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	69 2f       	mov	r22, r25
    2dc2:	a9 01       	movw	r20, r18
    2dc4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>

		   if(read == PRESSED_ACTIVE_LOW)
    2dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dca:	88 23       	and	r24, r24
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <H_PB_void_read+0x158>
    2dce:	c6 c0       	rjmp	.+396    	; 0x2f5c <H_PB_void_read+0x2e4>
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <H_PB_void_read+0x174>
		   {
			   // to register a single press
			  while(read == PRESSED_ACTIVE_LOW)
			  {
				  M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
    2dd2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2dd4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2dd6:	81 81       	ldd	r24, Z+1	; 0x01
    2dd8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2dda:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ddc:	92 81       	ldd	r25, Z+2	; 0x02
    2dde:	9e 01       	movw	r18, r28
    2de0:	23 5e       	subi	r18, 0xE3	; 227
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	69 2f       	mov	r22, r25
    2de6:	a9 01       	movw	r20, r18
    2de8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
		   M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);

		   if(read == PRESSED_ACTIVE_LOW)
		   {
			   // to register a single press
			  while(read == PRESSED_ACTIVE_LOW)
    2dec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dee:	88 23       	and	r24, r24
    2df0:	81 f3       	breq	.-32     	; 0x2dd2 <H_PB_void_read+0x15a>
			  {
				  M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
			  }// while (single press )
			  *pvalue = PRESSED_ACTIVE_LOW;
    2df2:	e8 a1       	ldd	r30, Y+32	; 0x20
    2df4:	f9 a1       	ldd	r31, Y+33	; 0x21
    2df6:	10 82       	st	Z, r1
    2df8:	b1 c0       	rjmp	.+354    	; 0x2f5c <H_PB_void_read+0x2e4>
		   }// if 2nd reading is low

	   }// if 1st reading is low

   }// if Active_LOW
   else if(ptr->PB_ActiveMode == ACTIVE_HIGH)
    2dfa:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2dfc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2dfe:	83 81       	ldd	r24, Z+3	; 0x03
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <H_PB_void_read+0x18e>
    2e04:	ab c0       	rjmp	.+342    	; 0x2f5c <H_PB_void_read+0x2e4>
   {
	   *pvalue = NOT_PRESSED_ACTIVE_HIGH;
    2e06:	e8 a1       	ldd	r30, Y+32	; 0x20
    2e08:	f9 a1       	ldd	r31, Y+33	; 0x21
    2e0a:	10 82       	st	Z, r1
   // get pin value
	   M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
    2e0c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2e0e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2e10:	81 81       	ldd	r24, Z+1	; 0x01
    2e12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2e14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2e16:	92 81       	ldd	r25, Z+2	; 0x02
    2e18:	9e 01       	movw	r18, r28
    2e1a:	23 5e       	subi	r18, 0xE3	; 227
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	69 2f       	mov	r22, r25
    2e20:	a9 01       	movw	r20, r18
    2e22:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
	   if(read == PRESSED_ACTIVE_HIGH)
    2e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <H_PB_void_read+0x1b6>
    2e2c:	97 c0       	rjmp	.+302    	; 0x2f5c <H_PB_void_read+0x2e4>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a8 e4       	ldi	r26, 0x48	; 72
    2e34:	b3 e4       	ldi	r27, 0x43	; 67
    2e36:	8b 87       	std	Y+11, r24	; 0x0b
    2e38:	9c 87       	std	Y+12, r25	; 0x0c
    2e3a:	ad 87       	std	Y+13, r26	; 0x0d
    2e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a e7       	ldi	r20, 0x7A	; 122
    2e4c:	55 e4       	ldi	r21, 0x45	; 69
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8f 83       	std	Y+7, r24	; 0x07
    2e58:	98 87       	std	Y+8, r25	; 0x08
    2e5a:	a9 87       	std	Y+9, r26	; 0x09
    2e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <H_PB_void_read+0x208>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9e 83       	std	Y+6, r25	; 0x06
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <H_PB_void_read+0x286>
	else if (__tmp > 65535)
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <H_PB_void_read+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	8d 83       	std	Y+5, r24	; 0x05
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <H_PB_void_read+0x268>
    2ec2:	80 e9       	ldi	r24, 0x90	; 144
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <H_PB_void_read+0x256>
    2ed2:	9c 83       	std	Y+4, r25	; 0x04
    2ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <H_PB_void_read+0x24a>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <H_PB_void_read+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	9e 81       	ldd	r25, Y+6	; 0x06
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <H_PB_void_read+0x292>
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
	   {
		   // debouncing delay
		   _delay_ms(200);
		   //get 2nd reading to make sure it is not noise
		   M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
    2f12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2f14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2f16:	81 81       	ldd	r24, Z+1	; 0x01
    2f18:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2f1a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2f1c:	92 81       	ldd	r25, Z+2	; 0x02
    2f1e:	9e 01       	movw	r18, r28
    2f20:	23 5e       	subi	r18, 0xE3	; 227
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	69 2f       	mov	r22, r25
    2f26:	a9 01       	movw	r20, r18
    2f28:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>

		   if(read == PRESSED_ACTIVE_HIGH)
    2f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2e:	81 30       	cpi	r24, 0x01	; 1
    2f30:	a9 f4       	brne	.+42     	; 0x2f5c <H_PB_void_read+0x2e4>
    2f32:	0d c0       	rjmp	.+26     	; 0x2f4e <H_PB_void_read+0x2d6>
		   {
			   // to register a single press
			  while(read == PRESSED_ACTIVE_HIGH)
			  {
				  M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
    2f34:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2f36:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2f38:	81 81       	ldd	r24, Z+1	; 0x01
    2f3a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2f3c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2f3e:	92 81       	ldd	r25, Z+2	; 0x02
    2f40:	9e 01       	movw	r18, r28
    2f42:	23 5e       	subi	r18, 0xE3	; 227
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	69 2f       	mov	r22, r25
    2f48:	a9 01       	movw	r20, r18
    2f4a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
		   M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);

		   if(read == PRESSED_ACTIVE_HIGH)
		   {
			   // to register a single press
			  while(read == PRESSED_ACTIVE_HIGH)
    2f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	81 f3       	breq	.-32     	; 0x2f34 <H_PB_void_read+0x2bc>
			  {
				  M_Dio_void_getPinValue(ptr->PB_port,ptr->PB_pin,&read);
			  }// while (single press )
			  *pvalue = PRESSED_ACTIVE_HIGH;
    2f54:	e8 a1       	ldd	r30, Y+32	; 0x20
    2f56:	f9 a1       	ldd	r31, Y+33	; 0x21
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	80 83       	st	Z, r24
		   }// if 2nd reading is low

	   }// if 1st reading is low
   }// if Active_HIGH

}
    2f5c:	a1 96       	adiw	r28, 0x21	; 33
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <H_TEMPSENSOR_void_Init>:
#include "ADC_int.h"
#include "LM35_priv.h"
#include "LM35_config.h"
#include "LM35_int.h"
void H_TEMPSENSOR_void_Init()
{
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
   //set direction of temp Sensor channel  pin as input
	M_Dio_void_setPinDir(PORTA_ID, TEMP_SENSOR_CHANNEL, INPUT);
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	// ADC init
	M_ADC_void_Init(prescaler_128, vref_AVCC);
    2f80:	87 e0       	ldi	r24, 0x07	; 7
    2f82:	61 e0       	ldi	r22, 0x01	; 1
    2f84:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <M_ADC_void_Init>
}
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <H_TEMPSENSOR_u8_readTemp>:

u8   H_TEMPSENSOR_u8_readTemp()
{
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	27 97       	sbiw	r28, 0x07	; 7
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
	// step 1 : call adc to convert (read digital value)
	u16 adc_read = M_ADC_u16_adcRead(TEMP_SENSOR_CHANNEL);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <M_ADC_u16_adcRead>
    2fa8:	9f 83       	std	Y+7, r25	; 0x07
    2faa:	8e 83       	std	Y+6, r24	; 0x06
	// step 2: convert digital value to analog
    u32 read_mv =   ( (u32)adc_read * TEMP_VREF)/ TEMP_RES;
    2fac:	8e 81       	ldd	r24, Y+6	; 0x06
    2fae:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb0:	cc 01       	movw	r24, r24
    2fb2:	a0 e0       	ldi	r26, 0x00	; 0
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	28 e8       	ldi	r18, 0x88	; 136
    2fb8:	33 e1       	ldi	r19, 0x13	; 19
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <__mulsi3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	07 2e       	mov	r0, r23
    2fcc:	7a e0       	ldi	r23, 0x0A	; 10
    2fce:	b6 95       	lsr	r27
    2fd0:	a7 95       	ror	r26
    2fd2:	97 95       	ror	r25
    2fd4:	87 95       	ror	r24
    2fd6:	7a 95       	dec	r23
    2fd8:	d1 f7       	brne	.-12     	; 0x2fce <H_TEMPSENSOR_u8_readTemp+0x40>
    2fda:	70 2d       	mov	r23, r0
    2fdc:	8a 83       	std	Y+2, r24	; 0x02
    2fde:	9b 83       	std	Y+3, r25	; 0x03
    2fe0:	ac 83       	std	Y+4, r26	; 0x04
    2fe2:	bd 83       	std	Y+5, r27	; 0x05
    //step 3 : convert from mv to degree C
    u8 temp =  read_mv / 10;
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe8:	ac 81       	ldd	r26, Y+4	; 0x04
    2fea:	bd 81       	ldd	r27, Y+5	; 0x05
    2fec:	2a e0       	ldi	r18, 0x0A	; 10
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	50 e0       	ldi	r21, 0x00	; 0
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__udivmodsi4>
    2ffc:	da 01       	movw	r26, r20
    2ffe:	c9 01       	movw	r24, r18
    3000:	89 83       	std	Y+1, r24	; 0x01
    //step 4 : return temp
    return temp;
    3002:	89 81       	ldd	r24, Y+1	; 0x01
}
    3004:	27 96       	adiw	r28, 0x07	; 7
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	cf 91       	pop	r28
    3012:	df 91       	pop	r29
    3014:	08 95       	ret

00003016 <H_Led_void_ledInit>:
#include "LED_priv.h"
#include "LED_config.h"
#include "LED_int.h"

void H_Led_void_ledInit(u8 LedID)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <H_Led_void_ledInit+0x6>
    301c:	0f 92       	push	r0
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	89 83       	std	Y+1, r24	; 0x01
  switch(LedID)
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	3b 83       	std	Y+3, r19	; 0x03
    302c:	2a 83       	std	Y+2, r18	; 0x02
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	9b 81       	ldd	r25, Y+3	; 0x03
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	91 05       	cpc	r25, r1
    3036:	79 f0       	breq	.+30     	; 0x3056 <H_Led_void_ledInit+0x40>
    3038:	2a 81       	ldd	r18, Y+2	; 0x02
    303a:	3b 81       	ldd	r19, Y+3	; 0x03
    303c:	22 30       	cpi	r18, 0x02	; 2
    303e:	31 05       	cpc	r19, r1
    3040:	81 f0       	breq	.+32     	; 0x3062 <H_Led_void_ledInit+0x4c>
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	89 f4       	brne	.+34     	; 0x306c <H_Led_void_ledInit+0x56>
  {
  case RED_LED :
	 M_Dio_void_setPinDir(LED_RED_PORT,LED_RED_PIN,OUPUT);
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    3054:	0b c0       	rjmp	.+22     	; 0x306c <H_Led_void_ledInit+0x56>
	  break;
  case GRN_LED:
	  M_Dio_void_setPinDir(LED_GRN_PORT,LED_GRN_PIN,OUPUT);
    3056:	83 e0       	ldi	r24, 0x03	; 3
    3058:	61 e0       	ldi	r22, 0x01	; 1
    305a:	41 e0       	ldi	r20, 0x01	; 1
    305c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    3060:	05 c0       	rjmp	.+10     	; 0x306c <H_Led_void_ledInit+0x56>
	  break;
  case BLU_LED :
	  M_Dio_void_setPinDir(LED_BLU_PORT,LED_BLU_PIN,OUPUT);
    3062:	83 e0       	ldi	r24, 0x03	; 3
    3064:	62 e0       	ldi	r22, 0x02	; 2
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	  break;
  }
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <H_Led_void_setON>:
void H_Led_void_setON(u8 LedID)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <H_Led_void_setON+0x6>
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	89 83       	std	Y+1, r24	; 0x01
	 switch(LedID)
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	3b 83       	std	Y+3, r19	; 0x03
    308e:	2a 83       	std	Y+2, r18	; 0x02
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	91 05       	cpc	r25, r1
    3098:	79 f0       	breq	.+30     	; 0x30b8 <H_Led_void_setON+0x40>
    309a:	2a 81       	ldd	r18, Y+2	; 0x02
    309c:	3b 81       	ldd	r19, Y+3	; 0x03
    309e:	22 30       	cpi	r18, 0x02	; 2
    30a0:	31 05       	cpc	r19, r1
    30a2:	81 f0       	breq	.+32     	; 0x30c4 <H_Led_void_setON+0x4c>
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	9b 81       	ldd	r25, Y+3	; 0x03
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	89 f4       	brne	.+34     	; 0x30ce <H_Led_void_setON+0x56>
	  {
	  case RED_LED :
#if(LED_RED_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    30ac:	83 e0       	ldi	r24, 0x03	; 3
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    30b6:	0b c0       	rjmp	.+22     	; 0x30ce <H_Led_void_setON+0x56>
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
#endif
		  break;
	  case GRN_LED:
#if(LED_GRN_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    30b8:	83 e0       	ldi	r24, 0x03	; 3
    30ba:	61 e0       	ldi	r22, 0x01	; 1
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <H_Led_void_setON+0x56>
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		  break;
	  case BLU_LED :
#if(LED_BLU_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	62 e0       	ldi	r22, 0x02	; 2
    30c8:	41 e0       	ldi	r20, 0x01	; 1
    30ca:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
#elif(LED_BLU_DIRECTION  ==   LED_REVERSE)
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
#endif
		  break;
	  }
}
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <H_Led_void_setOFF>:
void H_Led_void_setOFF(u8 LedID)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <H_Led_void_setOFF+0x6>
    30e0:	0f 92       	push	r0
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	89 83       	std	Y+1, r24	; 0x01
	 switch(LedID)
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	3b 83       	std	Y+3, r19	; 0x03
    30f0:	2a 83       	std	Y+2, r18	; 0x02
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	91 05       	cpc	r25, r1
    30fa:	79 f0       	breq	.+30     	; 0x311a <H_Led_void_setOFF+0x40>
    30fc:	2a 81       	ldd	r18, Y+2	; 0x02
    30fe:	3b 81       	ldd	r19, Y+3	; 0x03
    3100:	22 30       	cpi	r18, 0x02	; 2
    3102:	31 05       	cpc	r19, r1
    3104:	81 f0       	breq	.+32     	; 0x3126 <H_Led_void_setOFF+0x4c>
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	9b 81       	ldd	r25, Y+3	; 0x03
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	89 f4       	brne	.+34     	; 0x3130 <H_Led_void_setOFF+0x56>
		  {
		  case RED_LED :
#if(LED_RED_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    310e:	83 e0       	ldi	r24, 0x03	; 3
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    3118:	0b c0       	rjmp	.+22     	; 0x3130 <H_Led_void_setOFF+0x56>
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
#endif
			  break;
		  case GRN_LED:
#if(LED_GRN_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	61 e0       	ldi	r22, 0x01	; 1
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    3124:	05 c0       	rjmp	.+10     	; 0x3130 <H_Led_void_setOFF+0x56>
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
#endif
			  break;
		  case BLU_LED :
#if(LED_BLU_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    3126:	83 e0       	ldi	r24, 0x03	; 3
    3128:	62 e0       	ldi	r22, 0x02	; 2
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
#endif
			  break;
		  }

}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <H_Led_void_toggle>:
void H_Led_void_toggle(u8 LedID)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <H_Led_void_toggle+0x6>
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	89 83       	std	Y+1, r24	; 0x01
	 switch(LedID)
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	3b 83       	std	Y+3, r19	; 0x03
    3152:	2a 83       	std	Y+2, r18	; 0x02
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	81 30       	cpi	r24, 0x01	; 1
    315a:	91 05       	cpc	r25, r1
    315c:	71 f0       	breq	.+28     	; 0x317a <H_Led_void_toggle+0x3e>
    315e:	2a 81       	ldd	r18, Y+2	; 0x02
    3160:	3b 81       	ldd	r19, Y+3	; 0x03
    3162:	22 30       	cpi	r18, 0x02	; 2
    3164:	31 05       	cpc	r19, r1
    3166:	71 f0       	breq	.+28     	; 0x3184 <H_Led_void_toggle+0x48>
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	9b 81       	ldd	r25, Y+3	; 0x03
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	71 f4       	brne	.+28     	; 0x318c <H_Led_void_toggle+0x50>
		  {
		  case RED_LED :
			  M_Dio_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <M_Dio_void_TogPinValue>
    3178:	09 c0       	rjmp	.+18     	; 0x318c <H_Led_void_toggle+0x50>
			  break;
		  case GRN_LED:
			  M_Dio_void_TogPinValue(LED_GRN_PORT,LED_GRN_PIN);
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	61 e0       	ldi	r22, 0x01	; 1
    317e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <M_Dio_void_TogPinValue>
    3182:	04 c0       	rjmp	.+8      	; 0x318c <H_Led_void_toggle+0x50>
			  break;
		  case BLU_LED :
			  M_Dio_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	62 e0       	ldi	r22, 0x02	; 2
    3188:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <M_Dio_void_TogPinValue>
			  break;
		  }

}
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	aa 97       	sbiw	r28, 0x2a	; 42
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61

	// set direction Rs, EN
	M_Dio_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUPUT);
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUPUT);
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	62 e0       	ldi	r22, 0x02	; 2
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	//set direction D4 .. D7
	M_Dio_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUPUT);
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	66 e0       	ldi	r22, 0x06	; 6
    31c4:	41 e0       	ldi	r20, 0x01	; 1
    31c6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUPUT);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	65 e0       	ldi	r22, 0x05	; 5
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUPUT);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	64 e0       	ldi	r22, 0x04	; 4
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUPUT);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	63 e0       	ldi	r22, 0x03	; 3
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	ac e0       	ldi	r26, 0x0C	; 12
    31ee:	b2 e4       	ldi	r27, 0x42	; 66
    31f0:	8f a3       	std	Y+39, r24	; 0x27
    31f2:	98 a7       	std	Y+40, r25	; 0x28
    31f4:	a9 a7       	std	Y+41, r26	; 0x29
    31f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f8:	6f a1       	ldd	r22, Y+39	; 0x27
    31fa:	78 a5       	ldd	r23, Y+40	; 0x28
    31fc:	89 a5       	ldd	r24, Y+41	; 0x29
    31fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	4a e7       	ldi	r20, 0x7A	; 122
    3206:	55 e4       	ldi	r21, 0x45	; 69
    3208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8b a3       	std	Y+35, r24	; 0x23
    3212:	9c a3       	std	Y+36, r25	; 0x24
    3214:	ad a3       	std	Y+37, r26	; 0x25
    3216:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3218:	6b a1       	ldd	r22, Y+35	; 0x23
    321a:	7c a1       	ldd	r23, Y+36	; 0x24
    321c:	8d a1       	ldd	r24, Y+37	; 0x25
    321e:	9e a1       	ldd	r25, Y+38	; 0x26
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	5f e3       	ldi	r21, 0x3F	; 63
    3228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322c:	88 23       	and	r24, r24
    322e:	2c f4       	brge	.+10     	; 0x323a <H_LCD_void_Init+0xa2>
		__ticks = 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9a a3       	std	Y+34, r25	; 0x22
    3236:	89 a3       	std	Y+33, r24	; 0x21
    3238:	3f c0       	rjmp	.+126    	; 0x32b8 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    323a:	6b a1       	ldd	r22, Y+35	; 0x23
    323c:	7c a1       	ldd	r23, Y+36	; 0x24
    323e:	8d a1       	ldd	r24, Y+37	; 0x25
    3240:	9e a1       	ldd	r25, Y+38	; 0x26
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	3f ef       	ldi	r19, 0xFF	; 255
    3246:	4f e7       	ldi	r20, 0x7F	; 127
    3248:	57 e4       	ldi	r21, 0x47	; 71
    324a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324e:	18 16       	cp	r1, r24
    3250:	4c f5       	brge	.+82     	; 0x32a4 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3252:	6f a1       	ldd	r22, Y+39	; 0x27
    3254:	78 a5       	ldd	r23, Y+40	; 0x28
    3256:	89 a5       	ldd	r24, Y+41	; 0x29
    3258:	9a a5       	ldd	r25, Y+42	; 0x2a
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9a a3       	std	Y+34, r25	; 0x22
    3278:	89 a3       	std	Y+33, r24	; 0x21
    327a:	0f c0       	rjmp	.+30     	; 0x329a <H_LCD_void_Init+0x102>
    327c:	80 e9       	ldi	r24, 0x90	; 144
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	98 a3       	std	Y+32, r25	; 0x20
    3282:	8f 8f       	std	Y+31, r24	; 0x1f
    3284:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3286:	98 a1       	ldd	r25, Y+32	; 0x20
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <H_LCD_void_Init+0xf0>
    328c:	98 a3       	std	Y+32, r25	; 0x20
    328e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	89 a1       	ldd	r24, Y+33	; 0x21
    3292:	9a a1       	ldd	r25, Y+34	; 0x22
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	69 f7       	brne	.-38     	; 0x327c <H_LCD_void_Init+0xe4>
    32a2:	14 c0       	rjmp	.+40     	; 0x32cc <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	6b a1       	ldd	r22, Y+35	; 0x23
    32a6:	7c a1       	ldd	r23, Y+36	; 0x24
    32a8:	8d a1       	ldd	r24, Y+37	; 0x25
    32aa:	9e a1       	ldd	r25, Y+38	; 0x26
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9a a3       	std	Y+34, r25	; 0x22
    32b6:	89 a3       	std	Y+33, r24	; 0x21
    32b8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ba:	9a a1       	ldd	r25, Y+34	; 0x22
    32bc:	9e 8f       	std	Y+30, r25	; 0x1e
    32be:	8d 8f       	std	Y+29, r24	; 0x1d
    32c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <H_LCD_void_Init+0x12c>
    32c8:	9e 8f       	std	Y+30, r25	; 0x1e
    32ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
	// Rs = command = 0
	M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	61 e0       	ldi	r22, 0x01	; 1
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	// EN = 0 disabled
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	62 e0       	ldi	r22, 0x02	; 2
    32da:	40 e0       	ldi	r20, 0x00	; 0
    32dc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	// prepare data
	M_Dio_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	66 e0       	ldi	r22, 0x06	; 6
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	65 e0       	ldi	r22, 0x05	; 5
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	64 e0       	ldi	r22, 0x04	; 4
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	63 e0       	ldi	r22, 0x03	; 3
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	//EN = 1
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	62 e0       	ldi	r22, 0x02	; 2
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	a0 e8       	ldi	r26, 0x80	; 128
    3318:	bf e3       	ldi	r27, 0x3F	; 63
    331a:	89 8f       	std	Y+25, r24	; 0x19
    331c:	9a 8f       	std	Y+26, r25	; 0x1a
    331e:	ab 8f       	std	Y+27, r26	; 0x1b
    3320:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3322:	69 8d       	ldd	r22, Y+25	; 0x19
    3324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4a e7       	ldi	r20, 0x7A	; 122
    3330:	55 e4       	ldi	r21, 0x45	; 69
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	8d 8b       	std	Y+21, r24	; 0x15
    333c:	9e 8b       	std	Y+22, r25	; 0x16
    333e:	af 8b       	std	Y+23, r26	; 0x17
    3340:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3342:	6d 89       	ldd	r22, Y+21	; 0x15
    3344:	7e 89       	ldd	r23, Y+22	; 0x16
    3346:	8f 89       	ldd	r24, Y+23	; 0x17
    3348:	98 8d       	ldd	r25, Y+24	; 0x18
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e8       	ldi	r20, 0x80	; 128
    3350:	5f e3       	ldi	r21, 0x3F	; 63
    3352:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3356:	88 23       	and	r24, r24
    3358:	2c f4       	brge	.+10     	; 0x3364 <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9c 8b       	std	Y+20, r25	; 0x14
    3360:	8b 8b       	std	Y+19, r24	; 0x13
    3362:	3f c0       	rjmp	.+126    	; 0x33e2 <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    3364:	6d 89       	ldd	r22, Y+21	; 0x15
    3366:	7e 89       	ldd	r23, Y+22	; 0x16
    3368:	8f 89       	ldd	r24, Y+23	; 0x17
    336a:	98 8d       	ldd	r25, Y+24	; 0x18
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	3f ef       	ldi	r19, 0xFF	; 255
    3370:	4f e7       	ldi	r20, 0x7F	; 127
    3372:	57 e4       	ldi	r21, 0x47	; 71
    3374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3378:	18 16       	cp	r1, r24
    337a:	4c f5       	brge	.+82     	; 0x33ce <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337c:	69 8d       	ldd	r22, Y+25	; 0x19
    337e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e2       	ldi	r20, 0x20	; 32
    338a:	51 e4       	ldi	r21, 0x41	; 65
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9c 8b       	std	Y+20, r25	; 0x14
    33a2:	8b 8b       	std	Y+19, r24	; 0x13
    33a4:	0f c0       	rjmp	.+30     	; 0x33c4 <H_LCD_void_Init+0x22c>
    33a6:	80 e9       	ldi	r24, 0x90	; 144
    33a8:	91 e0       	ldi	r25, 0x01	; 1
    33aa:	9a 8b       	std	Y+18, r25	; 0x12
    33ac:	89 8b       	std	Y+17, r24	; 0x11
    33ae:	89 89       	ldd	r24, Y+17	; 0x11
    33b0:	9a 89       	ldd	r25, Y+18	; 0x12
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <H_LCD_void_Init+0x21a>
    33b6:	9a 8b       	std	Y+18, r25	; 0x12
    33b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	8b 89       	ldd	r24, Y+19	; 0x13
    33bc:	9c 89       	ldd	r25, Y+20	; 0x14
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	9c 8b       	std	Y+20, r25	; 0x14
    33c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c4:	8b 89       	ldd	r24, Y+19	; 0x13
    33c6:	9c 89       	ldd	r25, Y+20	; 0x14
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	69 f7       	brne	.-38     	; 0x33a6 <H_LCD_void_Init+0x20e>
    33cc:	14 c0       	rjmp	.+40     	; 0x33f6 <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ce:	6d 89       	ldd	r22, Y+21	; 0x15
    33d0:	7e 89       	ldd	r23, Y+22	; 0x16
    33d2:	8f 89       	ldd	r24, Y+23	; 0x17
    33d4:	98 8d       	ldd	r25, Y+24	; 0x18
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9c 8b       	std	Y+20, r25	; 0x14
    33e0:	8b 8b       	std	Y+19, r24	; 0x13
    33e2:	8b 89       	ldd	r24, Y+19	; 0x13
    33e4:	9c 89       	ldd	r25, Y+20	; 0x14
    33e6:	98 8b       	std	Y+16, r25	; 0x10
    33e8:	8f 87       	std	Y+15, r24	; 0x0f
    33ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ec:	98 89       	ldd	r25, Y+16	; 0x10
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <H_LCD_void_Init+0x256>
    33f2:	98 8b       	std	Y+16, r25	; 0x10
    33f4:	8f 87       	std	Y+15, r24	; 0x0f
	// delay 1 msec (to allow latching)
	_delay_ms(1);
	// EN = 0
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	62 e0       	ldi	r22, 0x02	; 2
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	a0 ea       	ldi	r26, 0xA0	; 160
    3406:	b0 e4       	ldi	r27, 0x40	; 64
    3408:	8b 87       	std	Y+11, r24	; 0x0b
    340a:	9c 87       	std	Y+12, r25	; 0x0c
    340c:	ad 87       	std	Y+13, r26	; 0x0d
    340e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	4a e7       	ldi	r20, 0x7A	; 122
    341e:	55 e4       	ldi	r21, 0x45	; 69
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	8f 83       	std	Y+7, r24	; 0x07
    342a:	98 87       	std	Y+8, r25	; 0x08
    342c:	a9 87       	std	Y+9, r26	; 0x09
    342e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3430:	6f 81       	ldd	r22, Y+7	; 0x07
    3432:	78 85       	ldd	r23, Y+8	; 0x08
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	5f e3       	ldi	r21, 0x3F	; 63
    3440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3444:	88 23       	and	r24, r24
    3446:	2c f4       	brge	.+10     	; 0x3452 <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    3452:	6f 81       	ldd	r22, Y+7	; 0x07
    3454:	78 85       	ldd	r23, Y+8	; 0x08
    3456:	89 85       	ldd	r24, Y+9	; 0x09
    3458:	9a 85       	ldd	r25, Y+10	; 0x0a
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	3f ef       	ldi	r19, 0xFF	; 255
    345e:	4f e7       	ldi	r20, 0x7F	; 127
    3460:	57 e4       	ldi	r21, 0x47	; 71
    3462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3466:	18 16       	cp	r1, r24
    3468:	4c f5       	brge	.+82     	; 0x34bc <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346a:	6b 85       	ldd	r22, Y+11	; 0x0b
    346c:	7c 85       	ldd	r23, Y+12	; 0x0c
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e2       	ldi	r20, 0x20	; 32
    3478:	51 e4       	ldi	r21, 0x41	; 65
    347a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <H_LCD_void_Init+0x31a>
    3494:	80 e9       	ldi	r24, 0x90	; 144
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	9c 83       	std	Y+4, r25	; 0x04
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <H_LCD_void_Init+0x308>
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	69 f7       	brne	.-38     	; 0x3494 <H_LCD_void_Init+0x2fc>
    34ba:	14 c0       	rjmp	.+40     	; 0x34e4 <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34bc:	6f 81       	ldd	r22, Y+7	; 0x07
    34be:	78 85       	ldd	r23, Y+8	; 0x08
    34c0:	89 85       	ldd	r24, Y+9	; 0x09
    34c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	8d 83       	std	Y+5, r24	; 0x05
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <H_LCD_void_Init+0x344>
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
	// delay to allow processing
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    34e4:	88 e2       	ldi	r24, 0x28	; 40
    34e6:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
    34ea:	8e e0       	ldi	r24, 0x0E	; 14
    34ec:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    34f6:	86 e0       	ldi	r24, 0x06	; 6
    34f8:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>

}
    34fc:	aa 96       	adiw	r28, 0x2a	; 42
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	0f 92       	push	r0
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select RS to be in data mode (RS = 1)
   M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	61 e0       	ldi	r22, 0x01	; 1
    351e:	41 e0       	ldi	r20, 0x01	; 1
    3520:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	0e 94 b3 1b 	call	0x3766	; 0x3766 <H_LCD_void_writeNlatch>
}
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	0f 92       	push	r0
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : select RS to be in command mode (RS = 0)
	M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	0e 94 b3 1b 	call	0x3766	; 0x3766 <H_LCD_void_writeNlatch>

}
    354e:	0f 90       	pop	r0
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	00 d0       	rcall	.+0      	; 0x355c <H_LCD_void_sendString+0x6>
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	9a 83       	std	Y+2, r25	; 0x02
    3562:	89 83       	std	Y+1, r24	; 0x01
    3564:	0a c0       	rjmp	.+20     	; 0x357a <H_LCD_void_sendString+0x24>
   while(*pstr)
   {
	   H_LCD_void_sendData(*pstr);
    3566:	e9 81       	ldd	r30, Y+1	; 0x01
    3568:	fa 81       	ldd	r31, Y+2	; 0x02
    356a:	80 81       	ld	r24, Z
    356c:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
	   pstr++;
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_writeNlatch(copy_u8Command);

}
void H_LCD_void_sendString(const s8 * pstr)
{
   while(*pstr)
    357a:	e9 81       	ldd	r30, Y+1	; 0x01
    357c:	fa 81       	ldd	r31, Y+2	; 0x02
    357e:	80 81       	ld	r24, Z
    3580:	88 23       	and	r24, r24
    3582:	89 f7       	brne	.-30     	; 0x3566 <H_LCD_void_sendString+0x10>
   {
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	08 95       	ret

0000358e <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    358e:	df 93       	push	r29
    3590:	cf 93       	push	r28
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>
}
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	08 95       	ret

000035a2 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	2f 97       	sbiw	r28, 0x0f	; 15
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	6c 87       	std	Y+12, r22	; 0x0c
    35bc:	7d 87       	std	Y+13, r23	; 0x0d
    35be:	8e 87       	std	Y+14, r24	; 0x0e
    35c0:	9f 87       	std	Y+15, r25	; 0x0f
   u8 Loc_Arr[10]= {0};
    35c2:	8a e0       	ldi	r24, 0x0A	; 10
    35c4:	fe 01       	movw	r30, r28
    35c6:	32 96       	adiw	r30, 0x02	; 2
    35c8:	df 01       	movw	r26, r30
    35ca:	98 2f       	mov	r25, r24
    35cc:	1d 92       	st	X+, r1
    35ce:	9a 95       	dec	r25
    35d0:	e9 f7       	brne	.-6      	; 0x35cc <H_LCD_void_sendIntNum+0x2a>
   s8 i = 0;
    35d2:	19 82       	std	Y+1, r1	; 0x01
   if(copy_s32Num == 0)
    35d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    35d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    35d8:	ae 85       	ldd	r26, Y+14	; 0x0e
    35da:	bf 85       	ldd	r27, Y+15	; 0x0f
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	a1 05       	cpc	r26, r1
    35e0:	b1 05       	cpc	r27, r1
    35e2:	21 f4       	brne	.+8      	; 0x35ec <H_LCD_void_sendIntNum+0x4a>
   {
	   H_LCD_void_sendData('0');
    35e4:	80 e3       	ldi	r24, 0x30	; 48
    35e6:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
    35ea:	69 c0       	rjmp	.+210    	; 0x36be <H_LCD_void_sendIntNum+0x11c>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
    35ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    35f0:	ae 85       	ldd	r26, Y+14	; 0x0e
    35f2:	bf 85       	ldd	r27, Y+15	; 0x0f
    35f4:	bb 23       	and	r27, r27
    35f6:	0c f0       	brlt	.+2      	; 0x35fa <H_LCD_void_sendIntNum+0x58>
    35f8:	42 c0       	rjmp	.+132    	; 0x367e <H_LCD_void_sendIntNum+0xdc>
   {
	   H_LCD_void_sendData('-');
    35fa:	8d e2       	ldi	r24, 0x2D	; 45
    35fc:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    3600:	8c 85       	ldd	r24, Y+12	; 0x0c
    3602:	9d 85       	ldd	r25, Y+13	; 0x0d
    3604:	ae 85       	ldd	r26, Y+14	; 0x0e
    3606:	bf 85       	ldd	r27, Y+15	; 0x0f
    3608:	b0 95       	com	r27
    360a:	a0 95       	com	r26
    360c:	90 95       	com	r25
    360e:	81 95       	neg	r24
    3610:	9f 4f       	sbci	r25, 0xFF	; 255
    3612:	af 4f       	sbci	r26, 0xFF	; 255
    3614:	bf 4f       	sbci	r27, 0xFF	; 255
    3616:	8c 87       	std	Y+12, r24	; 0x0c
    3618:	9d 87       	std	Y+13, r25	; 0x0d
    361a:	ae 87       	std	Y+14, r26	; 0x0e
    361c:	bf 87       	std	Y+15, r27	; 0x0f
    361e:	2f c0       	rjmp	.+94     	; 0x367e <H_LCD_void_sendIntNum+0xdc>
   }
   while(copy_s32Num != 0)
   {
	   Loc_Arr[i] = copy_s32Num % 10;
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	08 2f       	mov	r16, r24
    3624:	11 27       	eor	r17, r17
    3626:	07 fd       	sbrc	r16, 7
    3628:	10 95       	com	r17
    362a:	8c 85       	ldd	r24, Y+12	; 0x0c
    362c:	9d 85       	ldd	r25, Y+13	; 0x0d
    362e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3630:	bf 85       	ldd	r27, Y+15	; 0x0f
    3632:	2a e0       	ldi	r18, 0x0A	; 10
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e0       	ldi	r20, 0x00	; 0
    3638:	50 e0       	ldi	r21, 0x00	; 0
    363a:	bc 01       	movw	r22, r24
    363c:	cd 01       	movw	r24, r26
    363e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__divmodsi4>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	28 2f       	mov	r18, r24
    3648:	ce 01       	movw	r24, r28
    364a:	02 96       	adiw	r24, 0x02	; 2
    364c:	fc 01       	movw	r30, r24
    364e:	e0 0f       	add	r30, r16
    3650:	f1 1f       	adc	r31, r17
    3652:	20 83       	st	Z, r18
	   copy_s32Num = copy_s32Num /10 ;
    3654:	8c 85       	ldd	r24, Y+12	; 0x0c
    3656:	9d 85       	ldd	r25, Y+13	; 0x0d
    3658:	ae 85       	ldd	r26, Y+14	; 0x0e
    365a:	bf 85       	ldd	r27, Y+15	; 0x0f
    365c:	2a e0       	ldi	r18, 0x0A	; 10
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e0       	ldi	r20, 0x00	; 0
    3662:	50 e0       	ldi	r21, 0x00	; 0
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__divmodsi4>
    366c:	da 01       	movw	r26, r20
    366e:	c9 01       	movw	r24, r18
    3670:	8c 87       	std	Y+12, r24	; 0x0c
    3672:	9d 87       	std	Y+13, r25	; 0x0d
    3674:	ae 87       	std	Y+14, r26	; 0x0e
    3676:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	8f 5f       	subi	r24, 0xFF	; 255
    367c:	89 83       	std	Y+1, r24	; 0x01
   else if(copy_s32Num < 0)//negative
   {
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   while(copy_s32Num != 0)
    367e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3680:	9d 85       	ldd	r25, Y+13	; 0x0d
    3682:	ae 85       	ldd	r26, Y+14	; 0x0e
    3684:	bf 85       	ldd	r27, Y+15	; 0x0f
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	a1 05       	cpc	r26, r1
    368a:	b1 05       	cpc	r27, r1
    368c:	49 f6       	brne	.-110    	; 0x3620 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	81 50       	subi	r24, 0x01	; 1
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	11 c0       	rjmp	.+34     	; 0x36b8 <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	28 2f       	mov	r18, r24
    369a:	33 27       	eor	r19, r19
    369c:	27 fd       	sbrc	r18, 7
    369e:	30 95       	com	r19
    36a0:	ce 01       	movw	r24, r28
    36a2:	02 96       	adiw	r24, 0x02	; 2
    36a4:	fc 01       	movw	r30, r24
    36a6:	e2 0f       	add	r30, r18
    36a8:	f3 1f       	adc	r31, r19
    36aa:	80 81       	ld	r24, Z
    36ac:	80 5d       	subi	r24, 0xD0	; 208
    36ae:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
	   i--;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	81 50       	subi	r24, 0x01	; 1
    36b6:	89 83       	std	Y+1, r24	; 0x01
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
   while(i>=0)
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	88 23       	and	r24, r24
    36bc:	64 f7       	brge	.-40     	; 0x3696 <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
    36be:	2f 96       	adiw	r28, 0x0f	; 15
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	08 95       	ret

000036d4 <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	00 d0       	rcall	.+0      	; 0x36da <H_LCD_void_gotXY+0x6>
    36da:	00 d0       	rcall	.+0      	; 0x36dc <H_LCD_void_gotXY+0x8>
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	6a 83       	std	Y+2, r22	; 0x02
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	88 23       	and	r24, r24
    36e8:	19 f0       	breq	.+6      	; 0x36f0 <H_LCD_void_gotXY+0x1c>
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	d9 f4       	brne	.+54     	; 0x3726 <H_LCD_void_gotXY+0x52>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	80 31       	cpi	r24, 0x10	; 16
    36f4:	c0 f4       	brcc	.+48     	; 0x3726 <H_LCD_void_gotXY+0x52>
	  {
          switch(copy_u8Row)
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	3c 83       	std	Y+4, r19	; 0x04
    36fe:	2b 83       	std	Y+3, r18	; 0x03
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	9c 81       	ldd	r25, Y+4	; 0x04
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	31 f0       	breq	.+12     	; 0x3714 <H_LCD_void_gotXY+0x40>
    3708:	2b 81       	ldd	r18, Y+3	; 0x03
    370a:	3c 81       	ldd	r19, Y+4	; 0x04
    370c:	21 30       	cpi	r18, 0x01	; 1
    370e:	31 05       	cpc	r19, r1
    3710:	31 f0       	breq	.+12     	; 0x371e <H_LCD_void_gotXY+0x4a>
    3712:	09 c0       	rjmp	.+18     	; 0x3726 <H_LCD_void_gotXY+0x52>
          {
          case 0 :
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	80 58       	subi	r24, 0x80	; 128
    3718:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>
    371c:	04 c0       	rjmp	.+8      	; 0x3726 <H_LCD_void_gotXY+0x52>
        	  break;
          case 1 :
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	80 54       	subi	r24, 0x40	; 64
    3722:	0e 94 99 1a 	call	0x3532	; 0x3532 <H_LCD_void_sendCommand>
        	  break;
          }
	  }
  }
}
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	cf 91       	pop	r28
    3730:	df 91       	pop	r29
    3732:	08 95       	ret

00003734 <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    3734:	df 93       	push	r29
    3736:	cf 93       	push	r28
    3738:	00 d0       	rcall	.+0      	; 0x373a <H_LCD_void_creatCustomChar+0x6>
    373a:	0f 92       	push	r0
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	9a 83       	std	Y+2, r25	; 0x02
    3742:	89 83       	std	Y+1, r24	; 0x01
    3744:	6b 83       	std	Y+3, r22	; 0x03

}
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	0f 92       	push	r0
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	89 83       	std	Y+1, r24	; 0x01

}
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <H_LCD_void_writeNlatch>:
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	e9 97       	sbiw	r28, 0x39	; 57
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	89 af       	std	Y+57, r24	; 0x39
 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	62 e0       	ldi	r22, 0x02	; 2
    3780:	40 e0       	ldi	r20, 0x00	; 0
    3782:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_Dio_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
    3786:	89 ad       	ldd	r24, Y+57	; 0x39
    3788:	82 95       	swap	r24
    378a:	8f 70       	andi	r24, 0x0F	; 15
    378c:	98 2f       	mov	r25, r24
    378e:	91 70       	andi	r25, 0x01	; 1
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	63 e0       	ldi	r22, 0x03	; 3
    3794:	49 2f       	mov	r20, r25
    3796:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
    379a:	89 ad       	ldd	r24, Y+57	; 0x39
    379c:	82 95       	swap	r24
    379e:	86 95       	lsr	r24
    37a0:	87 70       	andi	r24, 0x07	; 7
    37a2:	98 2f       	mov	r25, r24
    37a4:	91 70       	andi	r25, 0x01	; 1
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	64 e0       	ldi	r22, 0x04	; 4
    37aa:	49 2f       	mov	r20, r25
    37ac:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
    37b0:	89 ad       	ldd	r24, Y+57	; 0x39
    37b2:	82 95       	swap	r24
    37b4:	86 95       	lsr	r24
    37b6:	86 95       	lsr	r24
    37b8:	83 70       	andi	r24, 0x03	; 3
    37ba:	98 2f       	mov	r25, r24
    37bc:	91 70       	andi	r25, 0x01	; 1
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	65 e0       	ldi	r22, 0x05	; 5
    37c2:	49 2f       	mov	r20, r25
    37c4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
    37c8:	89 ad       	ldd	r24, Y+57	; 0x39
    37ca:	98 2f       	mov	r25, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	99 27       	eor	r25, r25
    37d0:	99 1f       	adc	r25, r25
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	66 e0       	ldi	r22, 0x06	; 6
    37d6:	49 2f       	mov	r20, r25
    37d8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	62 e0       	ldi	r22, 0x02	; 2
    37e0:	41 e0       	ldi	r20, 0x01	; 1
    37e2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a0 e8       	ldi	r26, 0x80	; 128
    37ec:	bf e3       	ldi	r27, 0x3F	; 63
    37ee:	8d ab       	std	Y+53, r24	; 0x35
    37f0:	9e ab       	std	Y+54, r25	; 0x36
    37f2:	af ab       	std	Y+55, r26	; 0x37
    37f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	6d a9       	ldd	r22, Y+53	; 0x35
    37f8:	7e a9       	ldd	r23, Y+54	; 0x36
    37fa:	8f a9       	ldd	r24, Y+55	; 0x37
    37fc:	98 ad       	ldd	r25, Y+56	; 0x38
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	4a e7       	ldi	r20, 0x7A	; 122
    3804:	55 e4       	ldi	r21, 0x45	; 69
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	89 ab       	std	Y+49, r24	; 0x31
    3810:	9a ab       	std	Y+50, r25	; 0x32
    3812:	ab ab       	std	Y+51, r26	; 0x33
    3814:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3816:	69 a9       	ldd	r22, Y+49	; 0x31
    3818:	7a a9       	ldd	r23, Y+50	; 0x32
    381a:	8b a9       	ldd	r24, Y+51	; 0x33
    381c:	9c a9       	ldd	r25, Y+52	; 0x34
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <H_LCD_void_writeNlatch+0xd2>
		__ticks = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	98 ab       	std	Y+48, r25	; 0x30
    3834:	8f a7       	std	Y+47, r24	; 0x2f
    3836:	3f c0       	rjmp	.+126    	; 0x38b6 <H_LCD_void_writeNlatch+0x150>
	else if (__tmp > 65535)
    3838:	69 a9       	ldd	r22, Y+49	; 0x31
    383a:	7a a9       	ldd	r23, Y+50	; 0x32
    383c:	8b a9       	ldd	r24, Y+51	; 0x33
    383e:	9c a9       	ldd	r25, Y+52	; 0x34
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	3f ef       	ldi	r19, 0xFF	; 255
    3844:	4f e7       	ldi	r20, 0x7F	; 127
    3846:	57 e4       	ldi	r21, 0x47	; 71
    3848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    384c:	18 16       	cp	r1, r24
    384e:	4c f5       	brge	.+82     	; 0x38a2 <H_LCD_void_writeNlatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	6d a9       	ldd	r22, Y+53	; 0x35
    3852:	7e a9       	ldd	r23, Y+54	; 0x36
    3854:	8f a9       	ldd	r24, Y+55	; 0x37
    3856:	98 ad       	ldd	r25, Y+56	; 0x38
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	98 ab       	std	Y+48, r25	; 0x30
    3876:	8f a7       	std	Y+47, r24	; 0x2f
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <H_LCD_void_writeNlatch+0x132>
    387a:	80 e9       	ldi	r24, 0x90	; 144
    387c:	91 e0       	ldi	r25, 0x01	; 1
    387e:	9e a7       	std	Y+46, r25	; 0x2e
    3880:	8d a7       	std	Y+45, r24	; 0x2d
    3882:	8d a5       	ldd	r24, Y+45	; 0x2d
    3884:	9e a5       	ldd	r25, Y+46	; 0x2e
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <H_LCD_void_writeNlatch+0x120>
    388a:	9e a7       	std	Y+46, r25	; 0x2e
    388c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3890:	98 a9       	ldd	r25, Y+48	; 0x30
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	98 ab       	std	Y+48, r25	; 0x30
    3896:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3898:	8f a5       	ldd	r24, Y+47	; 0x2f
    389a:	98 a9       	ldd	r25, Y+48	; 0x30
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	69 f7       	brne	.-38     	; 0x387a <H_LCD_void_writeNlatch+0x114>
    38a0:	14 c0       	rjmp	.+40     	; 0x38ca <H_LCD_void_writeNlatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a2:	69 a9       	ldd	r22, Y+49	; 0x31
    38a4:	7a a9       	ldd	r23, Y+50	; 0x32
    38a6:	8b a9       	ldd	r24, Y+51	; 0x33
    38a8:	9c a9       	ldd	r25, Y+52	; 0x34
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	98 ab       	std	Y+48, r25	; 0x30
    38b4:	8f a7       	std	Y+47, r24	; 0x2f
    38b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ba:	9c a7       	std	Y+44, r25	; 0x2c
    38bc:	8b a7       	std	Y+43, r24	; 0x2b
    38be:	8b a5       	ldd	r24, Y+43	; 0x2b
    38c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <H_LCD_void_writeNlatch+0x15c>
    38c6:	9c a7       	std	Y+44, r25	; 0x2c
    38c8:	8b a7       	std	Y+43, r24	; 0x2b
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	62 e0       	ldi	r22, 0x02	; 2
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	a0 ea       	ldi	r26, 0xA0	; 160
    38da:	b0 e4       	ldi	r27, 0x40	; 64
    38dc:	8f a3       	std	Y+39, r24	; 0x27
    38de:	98 a7       	std	Y+40, r25	; 0x28
    38e0:	a9 a7       	std	Y+41, r26	; 0x29
    38e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e4:	6f a1       	ldd	r22, Y+39	; 0x27
    38e6:	78 a5       	ldd	r23, Y+40	; 0x28
    38e8:	89 a5       	ldd	r24, Y+41	; 0x29
    38ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	4a e7       	ldi	r20, 0x7A	; 122
    38f2:	55 e4       	ldi	r21, 0x45	; 69
    38f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	8b a3       	std	Y+35, r24	; 0x23
    38fe:	9c a3       	std	Y+36, r25	; 0x24
    3900:	ad a3       	std	Y+37, r26	; 0x25
    3902:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3904:	6b a1       	ldd	r22, Y+35	; 0x23
    3906:	7c a1       	ldd	r23, Y+36	; 0x24
    3908:	8d a1       	ldd	r24, Y+37	; 0x25
    390a:	9e a1       	ldd	r25, Y+38	; 0x26
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e8       	ldi	r20, 0x80	; 128
    3912:	5f e3       	ldi	r21, 0x3F	; 63
    3914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3918:	88 23       	and	r24, r24
    391a:	2c f4       	brge	.+10     	; 0x3926 <H_LCD_void_writeNlatch+0x1c0>
		__ticks = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	9a a3       	std	Y+34, r25	; 0x22
    3922:	89 a3       	std	Y+33, r24	; 0x21
    3924:	3f c0       	rjmp	.+126    	; 0x39a4 <H_LCD_void_writeNlatch+0x23e>
	else if (__tmp > 65535)
    3926:	6b a1       	ldd	r22, Y+35	; 0x23
    3928:	7c a1       	ldd	r23, Y+36	; 0x24
    392a:	8d a1       	ldd	r24, Y+37	; 0x25
    392c:	9e a1       	ldd	r25, Y+38	; 0x26
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	3f ef       	ldi	r19, 0xFF	; 255
    3932:	4f e7       	ldi	r20, 0x7F	; 127
    3934:	57 e4       	ldi	r21, 0x47	; 71
    3936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    393a:	18 16       	cp	r1, r24
    393c:	4c f5       	brge	.+82     	; 0x3990 <H_LCD_void_writeNlatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393e:	6f a1       	ldd	r22, Y+39	; 0x27
    3940:	78 a5       	ldd	r23, Y+40	; 0x28
    3942:	89 a5       	ldd	r24, Y+41	; 0x29
    3944:	9a a5       	ldd	r25, Y+42	; 0x2a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e2       	ldi	r20, 0x20	; 32
    394c:	51 e4       	ldi	r21, 0x41	; 65
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	9a a3       	std	Y+34, r25	; 0x22
    3964:	89 a3       	std	Y+33, r24	; 0x21
    3966:	0f c0       	rjmp	.+30     	; 0x3986 <H_LCD_void_writeNlatch+0x220>
    3968:	80 e9       	ldi	r24, 0x90	; 144
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	98 a3       	std	Y+32, r25	; 0x20
    396e:	8f 8f       	std	Y+31, r24	; 0x1f
    3970:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3972:	98 a1       	ldd	r25, Y+32	; 0x20
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <H_LCD_void_writeNlatch+0x20e>
    3978:	98 a3       	std	Y+32, r25	; 0x20
    397a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397c:	89 a1       	ldd	r24, Y+33	; 0x21
    397e:	9a a1       	ldd	r25, Y+34	; 0x22
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	9a a3       	std	Y+34, r25	; 0x22
    3984:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	89 a1       	ldd	r24, Y+33	; 0x21
    3988:	9a a1       	ldd	r25, Y+34	; 0x22
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	69 f7       	brne	.-38     	; 0x3968 <H_LCD_void_writeNlatch+0x202>
    398e:	14 c0       	rjmp	.+40     	; 0x39b8 <H_LCD_void_writeNlatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3990:	6b a1       	ldd	r22, Y+35	; 0x23
    3992:	7c a1       	ldd	r23, Y+36	; 0x24
    3994:	8d a1       	ldd	r24, Y+37	; 0x25
    3996:	9e a1       	ldd	r25, Y+38	; 0x26
    3998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	9a a3       	std	Y+34, r25	; 0x22
    39a2:	89 a3       	std	Y+33, r24	; 0x21
    39a4:	89 a1       	ldd	r24, Y+33	; 0x21
    39a6:	9a a1       	ldd	r25, Y+34	; 0x22
    39a8:	9e 8f       	std	Y+30, r25	; 0x1e
    39aa:	8d 8f       	std	Y+29, r24	; 0x1d
    39ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <H_LCD_void_writeNlatch+0x24a>
    39b4:	9e 8f       	std	Y+30, r25	; 0x1e
    39b6:	8d 8f       	std	Y+29, r24	; 0x1d
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_Dio_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
    39b8:	89 ad       	ldd	r24, Y+57	; 0x39
    39ba:	98 2f       	mov	r25, r24
    39bc:	91 70       	andi	r25, 0x01	; 1
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	63 e0       	ldi	r22, 0x03	; 3
    39c2:	49 2f       	mov	r20, r25
    39c4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
    39c8:	89 ad       	ldd	r24, Y+57	; 0x39
    39ca:	86 95       	lsr	r24
    39cc:	98 2f       	mov	r25, r24
    39ce:	91 70       	andi	r25, 0x01	; 1
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	64 e0       	ldi	r22, 0x04	; 4
    39d4:	49 2f       	mov	r20, r25
    39d6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
    39da:	89 ad       	ldd	r24, Y+57	; 0x39
    39dc:	86 95       	lsr	r24
    39de:	86 95       	lsr	r24
    39e0:	98 2f       	mov	r25, r24
    39e2:	91 70       	andi	r25, 0x01	; 1
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	65 e0       	ldi	r22, 0x05	; 5
    39e8:	49 2f       	mov	r20, r25
    39ea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
    39ee:	89 ad       	ldd	r24, Y+57	; 0x39
    39f0:	86 95       	lsr	r24
    39f2:	86 95       	lsr	r24
    39f4:	86 95       	lsr	r24
    39f6:	98 2f       	mov	r25, r24
    39f8:	91 70       	andi	r25, 0x01	; 1
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	66 e0       	ldi	r22, 0x06	; 6
    39fe:	49 2f       	mov	r20, r25
    3a00:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	62 e0       	ldi	r22, 0x02	; 2
    3a08:	41 e0       	ldi	r20, 0x01	; 1
    3a0a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	a0 e8       	ldi	r26, 0x80	; 128
    3a14:	bf e3       	ldi	r27, 0x3F	; 63
    3a16:	89 8f       	std	Y+25, r24	; 0x19
    3a18:	9a 8f       	std	Y+26, r25	; 0x1a
    3a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    3a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	4a e7       	ldi	r20, 0x7A	; 122
    3a2c:	55 e4       	ldi	r21, 0x45	; 69
    3a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	8d 8b       	std	Y+21, r24	; 0x15
    3a38:	9e 8b       	std	Y+22, r25	; 0x16
    3a3a:	af 8b       	std	Y+23, r26	; 0x17
    3a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a40:	7e 89       	ldd	r23, Y+22	; 0x16
    3a42:	8f 89       	ldd	r24, Y+23	; 0x17
    3a44:	98 8d       	ldd	r25, Y+24	; 0x18
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e8       	ldi	r20, 0x80	; 128
    3a4c:	5f e3       	ldi	r21, 0x3F	; 63
    3a4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a52:	88 23       	and	r24, r24
    3a54:	2c f4       	brge	.+10     	; 0x3a60 <H_LCD_void_writeNlatch+0x2fa>
		__ticks = 1;
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	9c 8b       	std	Y+20, r25	; 0x14
    3a5c:	8b 8b       	std	Y+19, r24	; 0x13
    3a5e:	3f c0       	rjmp	.+126    	; 0x3ade <H_LCD_void_writeNlatch+0x378>
	else if (__tmp > 65535)
    3a60:	6d 89       	ldd	r22, Y+21	; 0x15
    3a62:	7e 89       	ldd	r23, Y+22	; 0x16
    3a64:	8f 89       	ldd	r24, Y+23	; 0x17
    3a66:	98 8d       	ldd	r25, Y+24	; 0x18
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	3f ef       	ldi	r19, 0xFF	; 255
    3a6c:	4f e7       	ldi	r20, 0x7F	; 127
    3a6e:	57 e4       	ldi	r21, 0x47	; 71
    3a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a74:	18 16       	cp	r1, r24
    3a76:	4c f5       	brge	.+82     	; 0x3aca <H_LCD_void_writeNlatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a78:	69 8d       	ldd	r22, Y+25	; 0x19
    3a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e2       	ldi	r20, 0x20	; 32
    3a86:	51 e4       	ldi	r21, 0x41	; 65
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	bc 01       	movw	r22, r24
    3a92:	cd 01       	movw	r24, r26
    3a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	9c 8b       	std	Y+20, r25	; 0x14
    3a9e:	8b 8b       	std	Y+19, r24	; 0x13
    3aa0:	0f c0       	rjmp	.+30     	; 0x3ac0 <H_LCD_void_writeNlatch+0x35a>
    3aa2:	80 e9       	ldi	r24, 0x90	; 144
    3aa4:	91 e0       	ldi	r25, 0x01	; 1
    3aa6:	9a 8b       	std	Y+18, r25	; 0x12
    3aa8:	89 8b       	std	Y+17, r24	; 0x11
    3aaa:	89 89       	ldd	r24, Y+17	; 0x11
    3aac:	9a 89       	ldd	r25, Y+18	; 0x12
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	f1 f7       	brne	.-4      	; 0x3aae <H_LCD_void_writeNlatch+0x348>
    3ab2:	9a 8b       	std	Y+18, r25	; 0x12
    3ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	9c 8b       	std	Y+20, r25	; 0x14
    3abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac4:	00 97       	sbiw	r24, 0x00	; 0
    3ac6:	69 f7       	brne	.-38     	; 0x3aa2 <H_LCD_void_writeNlatch+0x33c>
    3ac8:	14 c0       	rjmp	.+40     	; 0x3af2 <H_LCD_void_writeNlatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aca:	6d 89       	ldd	r22, Y+21	; 0x15
    3acc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ace:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	9c 8b       	std	Y+20, r25	; 0x14
    3adc:	8b 8b       	std	Y+19, r24	; 0x13
    3ade:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae2:	98 8b       	std	Y+16, r25	; 0x10
    3ae4:	8f 87       	std	Y+15, r24	; 0x0f
    3ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae8:	98 89       	ldd	r25, Y+16	; 0x10
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <H_LCD_void_writeNlatch+0x384>
    3aee:	98 8b       	std	Y+16, r25	; 0x10
    3af0:	8f 87       	std	Y+15, r24	; 0x0f
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	62 e0       	ldi	r22, 0x02	; 2
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a0 ea       	ldi	r26, 0xA0	; 160
    3b02:	b0 e4       	ldi	r27, 0x40	; 64
    3b04:	8b 87       	std	Y+11, r24	; 0x0b
    3b06:	9c 87       	std	Y+12, r25	; 0x0c
    3b08:	ad 87       	std	Y+13, r26	; 0x0d
    3b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a e7       	ldi	r20, 0x7A	; 122
    3b1a:	55 e4       	ldi	r21, 0x45	; 69
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8f 83       	std	Y+7, r24	; 0x07
    3b26:	98 87       	std	Y+8, r25	; 0x08
    3b28:	a9 87       	std	Y+9, r26	; 0x09
    3b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <H_LCD_void_writeNlatch+0x3e8>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <H_LCD_void_writeNlatch+0x466>
	else if (__tmp > 65535)
    3b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b50:	78 85       	ldd	r23, Y+8	; 0x08
    3b52:	89 85       	ldd	r24, Y+9	; 0x09
    3b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <H_LCD_void_writeNlatch+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9e 83       	std	Y+6, r25	; 0x06
    3b8c:	8d 83       	std	Y+5, r24	; 0x05
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <H_LCD_void_writeNlatch+0x448>
    3b90:	80 e9       	ldi	r24, 0x90	; 144
    3b92:	91 e0       	ldi	r25, 0x01	; 1
    3b94:	9c 83       	std	Y+4, r25	; 0x04
    3b96:	8b 83       	std	Y+3, r24	; 0x03
    3b98:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <H_LCD_void_writeNlatch+0x436>
    3ba0:	9c 83       	std	Y+4, r25	; 0x04
    3ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9e 83       	std	Y+6, r25	; 0x06
    3bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <H_LCD_void_writeNlatch+0x42a>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <H_LCD_void_writeNlatch+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <H_LCD_void_writeNlatch+0x472>
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
 	 	_delay_ms(5);
#else
  #error("Wrong LCD mode")
#endif

}
    3be0:	e9 96       	adiw	r28, 0x39	; 57
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	08 95       	ret

00003bf2 <H_KEYPAD_void_init>:

#include "Keypad_priv.h"
#include "Keypad_config.h"
#include "Keypad_int.h"
void H_KEYPAD_void_init(void)
{
    3bf2:	df 93       	push	r29
    3bf4:	cf 93       	push	r28
    3bf6:	cd b7       	in	r28, 0x3d	; 61
    3bf8:	de b7       	in	r29, 0x3e	; 62
    // set all rows direction as output
	M_Dio_void_setPinDir(KEYPAD_R0_PORT,KEYPAD_R0_PIN,OUPUT);
    3bfa:	82 e0       	ldi	r24, 0x02	; 2
    3bfc:	64 e0       	ldi	r22, 0x04	; 4
    3bfe:	41 e0       	ldi	r20, 0x01	; 1
    3c00:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(KEYPAD_R1_PORT,KEYPAD_R1_PIN,OUPUT);
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	65 e0       	ldi	r22, 0x05	; 5
    3c08:	41 e0       	ldi	r20, 0x01	; 1
    3c0a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(KEYPAD_R2_PORT,KEYPAD_R2_PIN,OUPUT);
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	66 e0       	ldi	r22, 0x06	; 6
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(KEYPAD_R3_PORT,KEYPAD_R3_PIN,OUPUT);
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	67 e0       	ldi	r22, 0x07	; 7
    3c1c:	41 e0       	ldi	r20, 0x01	; 1
    3c1e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    // set all coloumns direction as inputs
    M_Dio_void_setPinDir(KEYPAD_C0_PORT,KEYPAD_C0_PIN, INPUT);
    3c22:	84 e0       	ldi	r24, 0x04	; 4
    3c24:	62 e0       	ldi	r22, 0x02	; 2
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    M_Dio_void_setPinDir(KEYPAD_C1_PORT,KEYPAD_C1_PIN, INPUT);
    3c2c:	84 e0       	ldi	r24, 0x04	; 4
    3c2e:	63 e0       	ldi	r22, 0x03	; 3
    3c30:	40 e0       	ldi	r20, 0x00	; 0
    3c32:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    M_Dio_void_setPinDir(KEYPAD_C2_PORT,KEYPAD_C2_PIN, INPUT);
    3c36:	84 e0       	ldi	r24, 0x04	; 4
    3c38:	64 e0       	ldi	r22, 0x04	; 4
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    M_Dio_void_setPinDir(KEYPAD_C3_PORT,KEYPAD_C3_PIN, INPUT);
    3c40:	84 e0       	ldi	r24, 0x04	; 4
    3c42:	65 e0       	ldi	r22, 0x05	; 5
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_Dio_void_setPinDir>
    // deactivate rows (HIGH)
    M_Dio_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    3c4a:	82 e0       	ldi	r24, 0x02	; 2
    3c4c:	64 e0       	ldi	r22, 0x04	; 4
    3c4e:	41 e0       	ldi	r20, 0x01	; 1
    3c50:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    3c54:	82 e0       	ldi	r24, 0x02	; 2
    3c56:	65 e0       	ldi	r22, 0x05	; 5
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    3c5e:	82 e0       	ldi	r24, 0x02	; 2
    3c60:	66 e0       	ldi	r22, 0x06	; 6
    3c62:	41 e0       	ldi	r20, 0x01	; 1
    3c64:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    3c68:	82 e0       	ldi	r24, 0x02	; 2
    3c6a:	67 e0       	ldi	r22, 0x07	; 7
    3c6c:	41 e0       	ldi	r20, 0x01	; 1
    3c6e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
#if(KEYPAD_TYPE == KEYPAD_TYPE_SIM)
    M_Dio_void_setPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN, HIGH);
    3c72:	84 e0       	ldi	r24, 0x04	; 4
    3c74:	62 e0       	ldi	r22, 0x02	; 2
    3c76:	41 e0       	ldi	r20, 0x01	; 1
    3c78:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN, HIGH);
    3c7c:	84 e0       	ldi	r24, 0x04	; 4
    3c7e:	63 e0       	ldi	r22, 0x03	; 3
    3c80:	41 e0       	ldi	r20, 0x01	; 1
    3c82:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN, HIGH);
    3c86:	84 e0       	ldi	r24, 0x04	; 4
    3c88:	64 e0       	ldi	r22, 0x04	; 4
    3c8a:	41 e0       	ldi	r20, 0x01	; 1
    3c8c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN, HIGH);
    3c90:	84 e0       	ldi	r24, 0x04	; 4
    3c92:	65 e0       	ldi	r22, 0x05	; 5
    3c94:	41 e0       	ldi	r20, 0x01	; 1
    3c96:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
#endif
}
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	08 95       	ret

00003ca0 <H_KEYPAD_void_getPressesKey>:
u8   H_KEYPAD_void_getPressesKey(void)
{
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	a8 97       	sbiw	r28, 0x28	; 40
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
	 u8 Loc_key = NO_PRESSED_KEY;
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	89 8b       	std	Y+17, r24	; 0x11
	 u8 Loc_row_indx;
	 u8 Loc_col_indx;
	 u8 Loc_KEYPAD_ARR [4][4]= KEYPAD_ARR_MAP;
    3cb8:	ce 01       	movw	r24, r28
    3cba:	42 96       	adiw	r24, 0x12	; 18
    3cbc:	9d a3       	std	Y+37, r25	; 0x25
    3cbe:	8c a3       	std	Y+36, r24	; 0x24
    3cc0:	e7 ee       	ldi	r30, 0xE7	; 231
    3cc2:	f1 e0       	ldi	r31, 0x01	; 1
    3cc4:	ff a3       	std	Y+39, r31	; 0x27
    3cc6:	ee a3       	std	Y+38, r30	; 0x26
    3cc8:	f0 e1       	ldi	r31, 0x10	; 16
    3cca:	f8 a7       	std	Y+40, r31	; 0x28
    3ccc:	ee a1       	ldd	r30, Y+38	; 0x26
    3cce:	ff a1       	ldd	r31, Y+39	; 0x27
    3cd0:	00 80       	ld	r0, Z
    3cd2:	8e a1       	ldd	r24, Y+38	; 0x26
    3cd4:	9f a1       	ldd	r25, Y+39	; 0x27
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	9f a3       	std	Y+39, r25	; 0x27
    3cda:	8e a3       	std	Y+38, r24	; 0x26
    3cdc:	ec a1       	ldd	r30, Y+36	; 0x24
    3cde:	fd a1       	ldd	r31, Y+37	; 0x25
    3ce0:	00 82       	st	Z, r0
    3ce2:	8c a1       	ldd	r24, Y+36	; 0x24
    3ce4:	9d a1       	ldd	r25, Y+37	; 0x25
    3ce6:	01 96       	adiw	r24, 0x01	; 1
    3ce8:	9d a3       	std	Y+37, r25	; 0x25
    3cea:	8c a3       	std	Y+36, r24	; 0x24
    3cec:	98 a5       	ldd	r25, Y+40	; 0x28
    3cee:	91 50       	subi	r25, 0x01	; 1
    3cf0:	98 a7       	std	Y+40, r25	; 0x28
    3cf2:	e8 a5       	ldd	r30, Y+40	; 0x28
    3cf4:	ee 23       	and	r30, r30
    3cf6:	51 f7       	brne	.-44     	; 0x3ccc <H_KEYPAD_void_getPressesKey+0x2c>
	 u8 read;

     for(Loc_row_indx = KEYPAD_R0_PIN ; Loc_row_indx<= KEYPAD_R3_PIN  ; Loc_row_indx++)
    3cf8:	84 e0       	ldi	r24, 0x04	; 4
    3cfa:	88 8b       	std	Y+16, r24	; 0x10
    3cfc:	c9 c0       	rjmp	.+402    	; 0x3e90 <H_KEYPAD_void_getPressesKey+0x1f0>
     {
    	 // Activate row (LOW)
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,LOW);
    3cfe:	82 e0       	ldi	r24, 0x02	; 2
    3d00:	68 89       	ldd	r22, Y+16	; 0x10
    3d02:	40 e0       	ldi	r20, 0x00	; 0
    3d04:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
    	 for(Loc_col_indx= KEYPAD_C0_PIN ;Loc_col_indx<= KEYPAD_C3_PIN ; Loc_col_indx++)
    3d08:	82 e0       	ldi	r24, 0x02	; 2
    3d0a:	8f 87       	std	Y+15, r24	; 0x0f
    3d0c:	b5 c0       	rjmp	.+362    	; 0x3e78 <H_KEYPAD_void_getPressesKey+0x1d8>
    	 {
    		 // get 1st reading
             M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
    3d0e:	9e 01       	movw	r18, r28
    3d10:	2e 5d       	subi	r18, 0xDE	; 222
    3d12:	3f 4f       	sbci	r19, 0xFF	; 255
    3d14:	84 e0       	ldi	r24, 0x04	; 4
    3d16:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d18:	a9 01       	movw	r20, r18
    3d1a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
             if(read == ACTIVE_LOW_PRESSED)
    3d1e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d20:	88 23       	and	r24, r24
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <H_KEYPAD_void_getPressesKey+0x86>
    3d24:	a6 c0       	rjmp	.+332    	; 0x3e72 <H_KEYPAD_void_getPressesKey+0x1d2>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a8 ec       	ldi	r26, 0xC8	; 200
    3d2c:	b2 e4       	ldi	r27, 0x42	; 66
    3d2e:	8b 87       	std	Y+11, r24	; 0x0b
    3d30:	9c 87       	std	Y+12, r25	; 0x0c
    3d32:	ad 87       	std	Y+13, r26	; 0x0d
    3d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	4a e7       	ldi	r20, 0x7A	; 122
    3d44:	55 e4       	ldi	r21, 0x45	; 69
    3d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	8f 83       	std	Y+7, r24	; 0x07
    3d50:	98 87       	std	Y+8, r25	; 0x08
    3d52:	a9 87       	std	Y+9, r26	; 0x09
    3d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f4       	brge	.+10     	; 0x3d78 <H_KEYPAD_void_getPressesKey+0xd8>
		__ticks = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9e 83       	std	Y+6, r25	; 0x06
    3d74:	8d 83       	std	Y+5, r24	; 0x05
    3d76:	3f c0       	rjmp	.+126    	; 0x3df6 <H_KEYPAD_void_getPressesKey+0x156>
	else if (__tmp > 65535)
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	57 e4       	ldi	r21, 0x47	; 71
    3d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	4c f5       	brge	.+82     	; 0x3de2 <H_KEYPAD_void_getPressesKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e2       	ldi	r20, 0x20	; 32
    3d9e:	51 e4       	ldi	r21, 0x41	; 65
    3da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	9e 83       	std	Y+6, r25	; 0x06
    3db6:	8d 83       	std	Y+5, r24	; 0x05
    3db8:	0f c0       	rjmp	.+30     	; 0x3dd8 <H_KEYPAD_void_getPressesKey+0x138>
    3dba:	80 e9       	ldi	r24, 0x90	; 144
    3dbc:	91 e0       	ldi	r25, 0x01	; 1
    3dbe:	9c 83       	std	Y+4, r25	; 0x04
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <H_KEYPAD_void_getPressesKey+0x126>
    3dca:	9c 83       	std	Y+4, r25	; 0x04
    3dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	00 97       	sbiw	r24, 0x00	; 0
    3dde:	69 f7       	brne	.-38     	; 0x3dba <H_KEYPAD_void_getPressesKey+0x11a>
    3de0:	14 c0       	rjmp	.+40     	; 0x3e0a <H_KEYPAD_void_getPressesKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de2:	6f 81       	ldd	r22, Y+7	; 0x07
    3de4:	78 85       	ldd	r23, Y+8	; 0x08
    3de6:	89 85       	ldd	r24, Y+9	; 0x09
    3de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	9e 83       	std	Y+6, r25	; 0x06
    3df4:	8d 83       	std	Y+5, r24	; 0x05
    3df6:	8d 81       	ldd	r24, Y+5	; 0x05
    3df8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <H_KEYPAD_void_getPressesKey+0x162>
    3e06:	9a 83       	std	Y+2, r25	; 0x02
    3e08:	89 83       	std	Y+1, r24	; 0x01
             {
            	 // debouncing delay
            	 _delay_ms(100);
            	 //get 2nd reading
            	 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
    3e0a:	9e 01       	movw	r18, r28
    3e0c:	2e 5d       	subi	r18, 0xDE	; 222
    3e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e10:	84 e0       	ldi	r24, 0x04	; 4
    3e12:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e14:	a9 01       	movw	r20, r18
    3e16:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
            	 if(read == ACTIVE_LOW_PRESSED)
    3e1a:	8a a1       	ldd	r24, Y+34	; 0x22
    3e1c:	88 23       	and	r24, r24
    3e1e:	49 f5       	brne	.+82     	; 0x3e72 <H_KEYPAD_void_getPressesKey+0x1d2>
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <H_KEYPAD_void_getPressesKey+0x192>
            	 {
            		 // single press only
            		 while(read == ACTIVE_LOW_PRESSED)
            		 {
            			 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
    3e22:	9e 01       	movw	r18, r28
    3e24:	2e 5d       	subi	r18, 0xDE	; 222
    3e26:	3f 4f       	sbci	r19, 0xFF	; 255
    3e28:	84 e0       	ldi	r24, 0x04	; 4
    3e2a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e2c:	a9 01       	movw	r20, r18
    3e2e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <M_Dio_void_getPinValue>
            	 //get 2nd reading
            	 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
            	 if(read == ACTIVE_LOW_PRESSED)
            	 {
            		 // single press only
            		 while(read == ACTIVE_LOW_PRESSED)
    3e32:	8a a1       	ldd	r24, Y+34	; 0x22
    3e34:	88 23       	and	r24, r24
    3e36:	a9 f3       	breq	.-22     	; 0x3e22 <H_KEYPAD_void_getPressesKey+0x182>
            		 {
            			 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
            		 }//while
            		 Loc_key = Loc_KEYPAD_ARR[Loc_row_indx - KEYPAD_R0_PIN][Loc_col_indx - KEYPAD_C0_PIN];
    3e38:	88 89       	ldd	r24, Y+16	; 0x10
    3e3a:	88 2f       	mov	r24, r24
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	9c 01       	movw	r18, r24
    3e40:	24 50       	subi	r18, 0x04	; 4
    3e42:	30 40       	sbci	r19, 0x00	; 0
    3e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e46:	88 2f       	mov	r24, r24
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	ac 01       	movw	r20, r24
    3e4c:	42 50       	subi	r20, 0x02	; 2
    3e4e:	50 40       	sbci	r21, 0x00	; 0
    3e50:	22 0f       	add	r18, r18
    3e52:	33 1f       	adc	r19, r19
    3e54:	22 0f       	add	r18, r18
    3e56:	33 1f       	adc	r19, r19
    3e58:	ce 01       	movw	r24, r28
    3e5a:	01 96       	adiw	r24, 0x01	; 1
    3e5c:	82 0f       	add	r24, r18
    3e5e:	93 1f       	adc	r25, r19
    3e60:	84 0f       	add	r24, r20
    3e62:	95 1f       	adc	r25, r21
    3e64:	fc 01       	movw	r30, r24
    3e66:	71 96       	adiw	r30, 0x11	; 17
    3e68:	80 81       	ld	r24, Z
    3e6a:	89 8b       	std	Y+17, r24	; 0x11
            		 return Loc_key;
    3e6c:	f9 89       	ldd	r31, Y+17	; 0x11
    3e6e:	fb a3       	std	Y+35, r31	; 0x23
    3e70:	15 c0       	rjmp	.+42     	; 0x3e9c <H_KEYPAD_void_getPressesKey+0x1fc>

     for(Loc_row_indx = KEYPAD_R0_PIN ; Loc_row_indx<= KEYPAD_R3_PIN  ; Loc_row_indx++)
     {
    	 // Activate row (LOW)
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,LOW);
    	 for(Loc_col_indx= KEYPAD_C0_PIN ;Loc_col_indx<= KEYPAD_C3_PIN ; Loc_col_indx++)
    3e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e74:	8f 5f       	subi	r24, 0xFF	; 255
    3e76:	8f 87       	std	Y+15, r24	; 0x0f
    3e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e7a:	86 30       	cpi	r24, 0x06	; 6
    3e7c:	08 f4       	brcc	.+2      	; 0x3e80 <H_KEYPAD_void_getPressesKey+0x1e0>
    3e7e:	47 cf       	rjmp	.-370    	; 0x3d0e <H_KEYPAD_void_getPressesKey+0x6e>
            	 }// if 2nd reading

             }// if 1st reading
    	 }// for
    	 // Deactivate row (HIGH )
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,HIGH);
    3e80:	82 e0       	ldi	r24, 0x02	; 2
    3e82:	68 89       	ldd	r22, Y+16	; 0x10
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <M_Dio_void_setPinValue>
	 u8 Loc_row_indx;
	 u8 Loc_col_indx;
	 u8 Loc_KEYPAD_ARR [4][4]= KEYPAD_ARR_MAP;
	 u8 read;

     for(Loc_row_indx = KEYPAD_R0_PIN ; Loc_row_indx<= KEYPAD_R3_PIN  ; Loc_row_indx++)
    3e8a:	88 89       	ldd	r24, Y+16	; 0x10
    3e8c:	8f 5f       	subi	r24, 0xFF	; 255
    3e8e:	88 8b       	std	Y+16, r24	; 0x10
    3e90:	88 89       	ldd	r24, Y+16	; 0x10
    3e92:	88 30       	cpi	r24, 0x08	; 8
    3e94:	08 f4       	brcc	.+2      	; 0x3e98 <H_KEYPAD_void_getPressesKey+0x1f8>
    3e96:	33 cf       	rjmp	.-410    	; 0x3cfe <H_KEYPAD_void_getPressesKey+0x5e>
             }// if 1st reading
    	 }// for
    	 // Deactivate row (HIGH )
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,HIGH);
     }
     return Loc_key;
    3e98:	89 89       	ldd	r24, Y+17	; 0x11
    3e9a:	8b a3       	std	Y+35, r24	; 0x23
    3e9c:	8b a1       	ldd	r24, Y+35	; 0x23
}
    3e9e:	a8 96       	adiw	r28, 0x28	; 40
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <main>:
#include "dc_init.h"



int main ()
{
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	62 97       	sbiw	r28, 0x12	; 18
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	f8 94       	cli
    3ebe:	de bf       	out	0x3e, r29	; 62
    3ec0:	0f be       	out	0x3f, r0	; 63
    3ec2:	cd bf       	out	0x3d, r28	; 61


	Init_system(); //to open all system while
    3ec4:	0e 94 17 20 	call	0x402e	; 0x402e <Init_system>
	wlcome_screen(); //just repeated only one time
    3ec8:	0e 94 27 20 	call	0x404e	; 0x404e <wlcome_screen>

	u8 check = FAIL;
    3ecc:	18 8a       	std	Y+16, r1	; 0x10
	while(1)
	{


		update_US_read();
    3ece:	0e 94 b2 20 	call	0x4164	; 0x4164 <update_US_read>


		check = TAKE_action();
    3ed2:	0e 94 c1 20 	call	0x4182	; 0x4182 <TAKE_action>
    3ed6:	88 8b       	std	Y+16, r24	; 0x10
		if(check == FAIL)
    3ed8:	88 89       	ldd	r24, Y+16	; 0x10
    3eda:	88 23       	and	r24, r24
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <main+0x30>
    3ede:	a4 c0       	rjmp	.+328    	; 0x4028 <main+0x178>
		{

		}
		else if(check == PASS)
    3ee0:	88 89       	ldd	r24, Y+16	; 0x10
    3ee2:	81 30       	cpi	r24, 0x01	; 1
    3ee4:	09 f0       	breq	.+2      	; 0x3ee8 <main+0x38>
    3ee6:	a0 c0       	rjmp	.+320    	; 0x4028 <main+0x178>
		{
			H_LCD_void_clear();
    3ee8:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
			H_LCD_void_sendString((const s8*) "leds ON ");
    3eec:	80 e6       	ldi	r24, 0x60	; 96
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>

			H_LCD_void_gotXY(1, 0) ;
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <H_LCD_void_gotXY>
			H_LCD_void_sendString((const s8*) "leds oFF ");
    3efc:	89 e6       	ldi	r24, 0x69	; 105
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	aa e7       	ldi	r26, 0x7A	; 122
    3f0a:	b4 e4       	ldi	r27, 0x44	; 68
    3f0c:	8b 87       	std	Y+11, r24	; 0x0b
    3f0e:	9c 87       	std	Y+12, r25	; 0x0c
    3f10:	ad 87       	std	Y+13, r26	; 0x0d
    3f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4a e7       	ldi	r20, 0x7A	; 122
    3f22:	55 e4       	ldi	r21, 0x45	; 69
    3f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	8f 83       	std	Y+7, r24	; 0x07
    3f2e:	98 87       	std	Y+8, r25	; 0x08
    3f30:	a9 87       	std	Y+9, r26	; 0x09
    3f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f34:	6f 81       	ldd	r22, Y+7	; 0x07
    3f36:	78 85       	ldd	r23, Y+8	; 0x08
    3f38:	89 85       	ldd	r24, Y+9	; 0x09
    3f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e8       	ldi	r20, 0x80	; 128
    3f42:	5f e3       	ldi	r21, 0x3F	; 63
    3f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f48:	88 23       	and	r24, r24
    3f4a:	2c f4       	brge	.+10     	; 0x3f56 <main+0xa6>
		__ticks = 1;
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	9e 83       	std	Y+6, r25	; 0x06
    3f52:	8d 83       	std	Y+5, r24	; 0x05
    3f54:	3f c0       	rjmp	.+126    	; 0x3fd4 <main+0x124>
	else if (__tmp > 65535)
    3f56:	6f 81       	ldd	r22, Y+7	; 0x07
    3f58:	78 85       	ldd	r23, Y+8	; 0x08
    3f5a:	89 85       	ldd	r24, Y+9	; 0x09
    3f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	3f ef       	ldi	r19, 0xFF	; 255
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	57 e4       	ldi	r21, 0x47	; 71
    3f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f6a:	18 16       	cp	r1, r24
    3f6c:	4c f5       	brge	.+82     	; 0x3fc0 <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e2       	ldi	r20, 0x20	; 32
    3f7c:	51 e4       	ldi	r21, 0x41	; 65
    3f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	bc 01       	movw	r22, r24
    3f88:	cd 01       	movw	r24, r26
    3f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	9e 83       	std	Y+6, r25	; 0x06
    3f94:	8d 83       	std	Y+5, r24	; 0x05
    3f96:	0f c0       	rjmp	.+30     	; 0x3fb6 <main+0x106>
    3f98:	80 e9       	ldi	r24, 0x90	; 144
    3f9a:	91 e0       	ldi	r25, 0x01	; 1
    3f9c:	9c 83       	std	Y+4, r25	; 0x04
    3f9e:	8b 83       	std	Y+3, r24	; 0x03
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <main+0xf4>
    3fa8:	9c 83       	std	Y+4, r25	; 0x04
    3faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	9e 83       	std	Y+6, r25	; 0x06
    3fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	69 f7       	brne	.-38     	; 0x3f98 <main+0xe8>
    3fbe:	14 c0       	rjmp	.+40     	; 0x3fe8 <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc2:	78 85       	ldd	r23, Y+8	; 0x08
    3fc4:	89 85       	ldd	r24, Y+9	; 0x09
    3fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	9e 83       	std	Y+6, r25	; 0x06
    3fd2:	8d 83       	std	Y+5, r24	; 0x05
    3fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd8:	9a 83       	std	Y+2, r25	; 0x02
    3fda:	89 83       	std	Y+1, r24	; 0x01
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <main+0x130>
    3fe4:	9a 83       	std	Y+2, r25	; 0x02
    3fe6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			u8 get_num =NO_PRESSED_KEY ;
    3fe8:	8f ef       	ldi	r24, 0xFF	; 255
    3fea:	8f 87       	std	Y+15, r24	; 0x0f
    3fec:	03 c0       	rjmp	.+6      	; 0x3ff4 <main+0x144>
			while(get_num == NO_PRESSED_KEY)
			{
				get_num = H_KEYPAD_void_getPressesKey();
    3fee:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <H_KEYPAD_void_getPressesKey>
    3ff2:	8f 87       	std	Y+15, r24	; 0x0f
			H_LCD_void_gotXY(1, 0) ;
			H_LCD_void_sendString((const s8*) "leds oFF ");
			_delay_ms(1000);

			u8 get_num =NO_PRESSED_KEY ;
			while(get_num == NO_PRESSED_KEY)
    3ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ff8:	d1 f3       	breq	.-12     	; 0x3fee <main+0x13e>
			{
				get_num = H_KEYPAD_void_getPressesKey();
			}
			switch(get_num)
    3ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ffc:	28 2f       	mov	r18, r24
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	3a 8b       	std	Y+18, r19	; 0x12
    4002:	29 8b       	std	Y+17, r18	; 0x11
    4004:	89 89       	ldd	r24, Y+17	; 0x11
    4006:	9a 89       	ldd	r25, Y+18	; 0x12
    4008:	81 33       	cpi	r24, 0x31	; 49
    400a:	91 05       	cpc	r25, r1
    400c:	31 f0       	breq	.+12     	; 0x401a <main+0x16a>
    400e:	29 89       	ldd	r18, Y+17	; 0x11
    4010:	3a 89       	ldd	r19, Y+18	; 0x12
    4012:	22 33       	cpi	r18, 0x32	; 50
    4014:	31 05       	cpc	r19, r1
    4016:	21 f0       	breq	.+8      	; 0x4020 <main+0x170>
    4018:	05 c0       	rjmp	.+10     	; 0x4024 <main+0x174>
			{
			case '1' :

				ALL_LEDS_ON();
    401a:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <ALL_LEDS_ON>
    401e:	02 c0       	rjmp	.+4      	; 0x4024 <main+0x174>
				break ;
			case '2' :
				ALL_LEDS_OFF();
    4020:	0e 94 65 25 	call	0x4aca	; 0x4aca <ALL_LEDS_OFF>

				break;

			default: break;
			}
		get_num = NO_PRESSED_KEY;
    4024:	8f ef       	ldi	r24, 0xFF	; 255
    4026:	8f 87       	std	Y+15, r24	; 0x0f
		}
			H_LCD_void_clear();
    4028:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
    402c:	50 cf       	rjmp	.-352    	; 0x3ece <main+0x1e>

0000402e <Init_system>:
u8 pass_arr[MAX_PASS_SIZE] = {'1','1','1','1'};

u16 Temp_read = 0;

void Init_system(void)
{
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_Init();
    4036:	0e 94 cc 18 	call	0x3198	; 0x3198 <H_LCD_void_Init>
	H_KEYPAD_void_init();
    403a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <H_KEYPAD_void_init>
	//M_ADC_void_Init();
	H_TEMPSENSOR_void_Init();
    403e:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <H_TEMPSENSOR_void_Init>
	H_DcMotor_void_init();
    4042:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <H_DcMotor_void_init>
	asm("SEI");
    4046:	78 94       	sei
}
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	08 95       	ret

0000404e <wlcome_screen>:

void wlcome_screen(void)
{
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	2e 97       	sbiw	r28, 0x0e	; 14
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61

	H_LCD_void_sendString((const s8*)" welcome   ");
    4062:	83 e7       	ldi	r24, 0x73	; 115
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	aa ef       	ldi	r26, 0xFA	; 250
    4070:	b4 e4       	ldi	r27, 0x44	; 68
    4072:	8b 87       	std	Y+11, r24	; 0x0b
    4074:	9c 87       	std	Y+12, r25	; 0x0c
    4076:	ad 87       	std	Y+13, r26	; 0x0d
    4078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    407a:	6b 85       	ldd	r22, Y+11	; 0x0b
    407c:	7c 85       	ldd	r23, Y+12	; 0x0c
    407e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4080:	9e 85       	ldd	r25, Y+14	; 0x0e
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	4a e7       	ldi	r20, 0x7A	; 122
    4088:	55 e4       	ldi	r21, 0x45	; 69
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	8f 83       	std	Y+7, r24	; 0x07
    4094:	98 87       	std	Y+8, r25	; 0x08
    4096:	a9 87       	std	Y+9, r26	; 0x09
    4098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    409a:	6f 81       	ldd	r22, Y+7	; 0x07
    409c:	78 85       	ldd	r23, Y+8	; 0x08
    409e:	89 85       	ldd	r24, Y+9	; 0x09
    40a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e8       	ldi	r20, 0x80	; 128
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ae:	88 23       	and	r24, r24
    40b0:	2c f4       	brge	.+10     	; 0x40bc <wlcome_screen+0x6e>
		__ticks = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	9e 83       	std	Y+6, r25	; 0x06
    40b8:	8d 83       	std	Y+5, r24	; 0x05
    40ba:	3f c0       	rjmp	.+126    	; 0x413a <wlcome_screen+0xec>
	else if (__tmp > 65535)
    40bc:	6f 81       	ldd	r22, Y+7	; 0x07
    40be:	78 85       	ldd	r23, Y+8	; 0x08
    40c0:	89 85       	ldd	r24, Y+9	; 0x09
    40c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	3f ef       	ldi	r19, 0xFF	; 255
    40c8:	4f e7       	ldi	r20, 0x7F	; 127
    40ca:	57 e4       	ldi	r21, 0x47	; 71
    40cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d0:	18 16       	cp	r1, r24
    40d2:	4c f5       	brge	.+82     	; 0x4126 <wlcome_screen+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    40d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    40d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40da:	9e 85       	ldd	r25, Y+14	; 0x0e
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e2       	ldi	r20, 0x20	; 32
    40e2:	51 e4       	ldi	r21, 0x41	; 65
    40e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	bc 01       	movw	r22, r24
    40ee:	cd 01       	movw	r24, r26
    40f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	9e 83       	std	Y+6, r25	; 0x06
    40fa:	8d 83       	std	Y+5, r24	; 0x05
    40fc:	0f c0       	rjmp	.+30     	; 0x411c <wlcome_screen+0xce>
    40fe:	80 e9       	ldi	r24, 0x90	; 144
    4100:	91 e0       	ldi	r25, 0x01	; 1
    4102:	9c 83       	std	Y+4, r25	; 0x04
    4104:	8b 83       	std	Y+3, r24	; 0x03
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <wlcome_screen+0xbc>
    410e:	9c 83       	std	Y+4, r25	; 0x04
    4110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4112:	8d 81       	ldd	r24, Y+5	; 0x05
    4114:	9e 81       	ldd	r25, Y+6	; 0x06
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	9e 83       	std	Y+6, r25	; 0x06
    411a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411c:	8d 81       	ldd	r24, Y+5	; 0x05
    411e:	9e 81       	ldd	r25, Y+6	; 0x06
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	69 f7       	brne	.-38     	; 0x40fe <wlcome_screen+0xb0>
    4124:	14 c0       	rjmp	.+40     	; 0x414e <wlcome_screen+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4126:	6f 81       	ldd	r22, Y+7	; 0x07
    4128:	78 85       	ldd	r23, Y+8	; 0x08
    412a:	89 85       	ldd	r24, Y+9	; 0x09
    412c:	9a 85       	ldd	r25, Y+10	; 0x0a
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	9e 83       	std	Y+6, r25	; 0x06
    4138:	8d 83       	std	Y+5, r24	; 0x05
    413a:	8d 81       	ldd	r24, Y+5	; 0x05
    413c:	9e 81       	ldd	r25, Y+6	; 0x06
    413e:	9a 83       	std	Y+2, r25	; 0x02
    4140:	89 83       	std	Y+1, r24	; 0x01
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	9a 81       	ldd	r25, Y+2	; 0x02
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <wlcome_screen+0xf8>
    414a:	9a 83       	std	Y+2, r25	; 0x02
    414c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	H_LCD_void_clear();
    414e:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
}
    4152:	2e 96       	adiw	r28, 0x0e	; 14
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	f8 94       	cli
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	0f be       	out	0x3f, r0	; 63
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	08 95       	ret

00004164 <update_US_read>:

void update_US_read(void)  //ultra sonic to get read
{
    4164:	df 93       	push	r29
    4166:	cf 93       	push	r28
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
	distance = ultrasonic_u16distance(PORTC_ID ,PIN5_ID);
    416c:	83 e0       	ldi	r24, 0x03	; 3
    416e:	65 e0       	ldi	r22, 0x05	; 5
    4170:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <ultrasonic_u16distance>
    4174:	90 93 13 02 	sts	0x0213, r25
    4178:	80 93 12 02 	sts	0x0212, r24

}
    417c:	cf 91       	pop	r28
    417e:	df 91       	pop	r29
    4180:	08 95       	ret

00004182 <TAKE_action>:

u8 TAKE_action(void)
{
    4182:	0f 93       	push	r16
    4184:	1f 93       	push	r17
    4186:	df 93       	push	r29
    4188:	cf 93       	push	r28
    418a:	cd b7       	in	r28, 0x3d	; 61
    418c:	de b7       	in	r29, 0x3e	; 62
    418e:	ca 54       	subi	r28, 0x4A	; 74
    4190:	d0 40       	sbci	r29, 0x00	; 0
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
	u8 check = FAIL;
    419c:	fe 01       	movw	r30, r28
    419e:	e7 5b       	subi	r30, 0xB7	; 183
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	10 82       	st	Z, r1
	if(distance < 15)
    41a4:	80 91 12 02 	lds	r24, 0x0212
    41a8:	90 91 13 02 	lds	r25, 0x0213
    41ac:	8f 30       	cpi	r24, 0x0F	; 15
    41ae:	91 05       	cpc	r25, r1
    41b0:	08 f0       	brcs	.+2      	; 0x41b4 <TAKE_action+0x32>
    41b2:	db c1       	rjmp	.+950    	; 0x456a <TAKE_action+0x3e8>
	{

		H_LCD_void_sendString((const s8 *)"PLEASE ENTER THE ");
    41b4:	8f e7       	ldi	r24, 0x7F	; 127
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
		H_LCD_void_gotXY(1, 4);
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	64 e0       	ldi	r22, 0x04	; 4
    41c0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <H_LCD_void_gotXY>
		H_LCD_void_sendString((const s8 *)"PASSWORD");
    41c4:	81 e9       	ldi	r24, 0x91	; 145
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
    41cc:	fe 01       	movw	r30, r28
    41ce:	ed 5b       	subi	r30, 0xBD	; 189
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	aa e7       	ldi	r26, 0x7A	; 122
    41d8:	b4 e4       	ldi	r27, 0x44	; 68
    41da:	80 83       	st	Z, r24
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	a2 83       	std	Z+2, r26	; 0x02
    41e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e2:	8e 01       	movw	r16, r28
    41e4:	01 5c       	subi	r16, 0xC1	; 193
    41e6:	1f 4f       	sbci	r17, 0xFF	; 255
    41e8:	fe 01       	movw	r30, r28
    41ea:	ed 5b       	subi	r30, 0xBD	; 189
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	60 81       	ld	r22, Z
    41f0:	71 81       	ldd	r23, Z+1	; 0x01
    41f2:	82 81       	ldd	r24, Z+2	; 0x02
    41f4:	93 81       	ldd	r25, Z+3	; 0x03
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	4a e7       	ldi	r20, 0x7A	; 122
    41fc:	55 e4       	ldi	r21, 0x45	; 69
    41fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	f8 01       	movw	r30, r16
    4208:	80 83       	st	Z, r24
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	a2 83       	std	Z+2, r26	; 0x02
    420e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4210:	fe 01       	movw	r30, r28
    4212:	ff 96       	adiw	r30, 0x3f	; 63
    4214:	60 81       	ld	r22, Z
    4216:	71 81       	ldd	r23, Z+1	; 0x01
    4218:	82 81       	ldd	r24, Z+2	; 0x02
    421a:	93 81       	ldd	r25, Z+3	; 0x03
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	40 e8       	ldi	r20, 0x80	; 128
    4222:	5f e3       	ldi	r21, 0x3F	; 63
    4224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4228:	88 23       	and	r24, r24
    422a:	2c f4       	brge	.+10     	; 0x4236 <TAKE_action+0xb4>
		__ticks = 1;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	9e af       	std	Y+62, r25	; 0x3e
    4232:	8d af       	std	Y+61, r24	; 0x3d
    4234:	46 c0       	rjmp	.+140    	; 0x42c2 <TAKE_action+0x140>
	else if (__tmp > 65535)
    4236:	fe 01       	movw	r30, r28
    4238:	ff 96       	adiw	r30, 0x3f	; 63
    423a:	60 81       	ld	r22, Z
    423c:	71 81       	ldd	r23, Z+1	; 0x01
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	3f ef       	ldi	r19, 0xFF	; 255
    4246:	4f e7       	ldi	r20, 0x7F	; 127
    4248:	57 e4       	ldi	r21, 0x47	; 71
    424a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    424e:	18 16       	cp	r1, r24
    4250:	64 f5       	brge	.+88     	; 0x42aa <TAKE_action+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4252:	fe 01       	movw	r30, r28
    4254:	ed 5b       	subi	r30, 0xBD	; 189
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e2       	ldi	r20, 0x20	; 32
    4266:	51 e4       	ldi	r21, 0x41	; 65
    4268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	bc 01       	movw	r22, r24
    4272:	cd 01       	movw	r24, r26
    4274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	9e af       	std	Y+62, r25	; 0x3e
    427e:	8d af       	std	Y+61, r24	; 0x3d
    4280:	0f c0       	rjmp	.+30     	; 0x42a0 <TAKE_action+0x11e>
    4282:	80 e9       	ldi	r24, 0x90	; 144
    4284:	91 e0       	ldi	r25, 0x01	; 1
    4286:	9c af       	std	Y+60, r25	; 0x3c
    4288:	8b af       	std	Y+59, r24	; 0x3b
    428a:	8b ad       	ldd	r24, Y+59	; 0x3b
    428c:	9c ad       	ldd	r25, Y+60	; 0x3c
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	f1 f7       	brne	.-4      	; 0x428e <TAKE_action+0x10c>
    4292:	9c af       	std	Y+60, r25	; 0x3c
    4294:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4296:	8d ad       	ldd	r24, Y+61	; 0x3d
    4298:	9e ad       	ldd	r25, Y+62	; 0x3e
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	9e af       	std	Y+62, r25	; 0x3e
    429e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	69 f7       	brne	.-38     	; 0x4282 <TAKE_action+0x100>
    42a8:	16 c0       	rjmp	.+44     	; 0x42d6 <TAKE_action+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42aa:	fe 01       	movw	r30, r28
    42ac:	ff 96       	adiw	r30, 0x3f	; 63
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	9e af       	std	Y+62, r25	; 0x3e
    42c0:	8d af       	std	Y+61, r24	; 0x3d
    42c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    42c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    42c6:	9a af       	std	Y+58, r25	; 0x3a
    42c8:	89 af       	std	Y+57, r24	; 0x39
    42ca:	89 ad       	ldd	r24, Y+57	; 0x39
    42cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <TAKE_action+0x14c>
    42d2:	9a af       	std	Y+58, r25	; 0x3a
    42d4:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		H_LCD_void_clear();
    42d6:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
		u8 trys = MAX_TRYS;
    42da:	fe 01       	movw	r30, r28
    42dc:	e8 5b       	subi	r30, 0xB8	; 184
    42de:	ff 4f       	sbci	r31, 0xFF	; 255
    42e0:	83 e0       	ldi	r24, 0x03	; 3
    42e2:	80 83       	st	Z, r24
		do
		{
			check = get_and_check_password();
    42e4:	0e 94 fd 23 	call	0x47fa	; 0x47fa <get_and_check_password>
    42e8:	fe 01       	movw	r30, r28
    42ea:	e7 5b       	subi	r30, 0xB7	; 183
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 83       	st	Z, r24
			if(check == FAIL)
    42f0:	fe 01       	movw	r30, r28
    42f2:	e7 5b       	subi	r30, 0xB7	; 183
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	80 81       	ld	r24, Z
    42f8:	88 23       	and	r24, r24
    42fa:	09 f0       	breq	.+2      	; 0x42fe <TAKE_action+0x17c>
    42fc:	20 c1       	rjmp	.+576    	; 0x453e <TAKE_action+0x3bc>
			{
				H_LCD_void_clear();
    42fe:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
				H_LCD_void_sendString((const s8 *)"try again");
    4302:	8a e9       	ldi	r24, 0x9A	; 154
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	aa e7       	ldi	r26, 0x7A	; 122
    4310:	b4 e4       	ldi	r27, 0x44	; 68
    4312:	8d ab       	std	Y+53, r24	; 0x35
    4314:	9e ab       	std	Y+54, r25	; 0x36
    4316:	af ab       	std	Y+55, r26	; 0x37
    4318:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431a:	6d a9       	ldd	r22, Y+53	; 0x35
    431c:	7e a9       	ldd	r23, Y+54	; 0x36
    431e:	8f a9       	ldd	r24, Y+55	; 0x37
    4320:	98 ad       	ldd	r25, Y+56	; 0x38
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	4a e7       	ldi	r20, 0x7A	; 122
    4328:	55 e4       	ldi	r21, 0x45	; 69
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	89 ab       	std	Y+49, r24	; 0x31
    4334:	9a ab       	std	Y+50, r25	; 0x32
    4336:	ab ab       	std	Y+51, r26	; 0x33
    4338:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    433a:	69 a9       	ldd	r22, Y+49	; 0x31
    433c:	7a a9       	ldd	r23, Y+50	; 0x32
    433e:	8b a9       	ldd	r24, Y+51	; 0x33
    4340:	9c a9       	ldd	r25, Y+52	; 0x34
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	2c f4       	brge	.+10     	; 0x435c <TAKE_action+0x1da>
		__ticks = 1;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	98 ab       	std	Y+48, r25	; 0x30
    4358:	8f a7       	std	Y+47, r24	; 0x2f
    435a:	3f c0       	rjmp	.+126    	; 0x43da <TAKE_action+0x258>
	else if (__tmp > 65535)
    435c:	69 a9       	ldd	r22, Y+49	; 0x31
    435e:	7a a9       	ldd	r23, Y+50	; 0x32
    4360:	8b a9       	ldd	r24, Y+51	; 0x33
    4362:	9c a9       	ldd	r25, Y+52	; 0x34
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	4c f5       	brge	.+82     	; 0x43c6 <TAKE_action+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	6d a9       	ldd	r22, Y+53	; 0x35
    4376:	7e a9       	ldd	r23, Y+54	; 0x36
    4378:	8f a9       	ldd	r24, Y+55	; 0x37
    437a:	98 ad       	ldd	r25, Y+56	; 0x38
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	98 ab       	std	Y+48, r25	; 0x30
    439a:	8f a7       	std	Y+47, r24	; 0x2f
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <TAKE_action+0x23a>
    439e:	80 e9       	ldi	r24, 0x90	; 144
    43a0:	91 e0       	ldi	r25, 0x01	; 1
    43a2:	9e a7       	std	Y+46, r25	; 0x2e
    43a4:	8d a7       	std	Y+45, r24	; 0x2d
    43a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    43a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <TAKE_action+0x228>
    43ae:	9e a7       	std	Y+46, r25	; 0x2e
    43b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b4:	98 a9       	ldd	r25, Y+48	; 0x30
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	98 ab       	std	Y+48, r25	; 0x30
    43ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43be:	98 a9       	ldd	r25, Y+48	; 0x30
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f7       	brne	.-38     	; 0x439e <TAKE_action+0x21c>
    43c4:	14 c0       	rjmp	.+40     	; 0x43ee <TAKE_action+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c6:	69 a9       	ldd	r22, Y+49	; 0x31
    43c8:	7a a9       	ldd	r23, Y+50	; 0x32
    43ca:	8b a9       	ldd	r24, Y+51	; 0x33
    43cc:	9c a9       	ldd	r25, Y+52	; 0x34
    43ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	98 ab       	std	Y+48, r25	; 0x30
    43d8:	8f a7       	std	Y+47, r24	; 0x2f
    43da:	8f a5       	ldd	r24, Y+47	; 0x2f
    43dc:	98 a9       	ldd	r25, Y+48	; 0x30
    43de:	9c a7       	std	Y+44, r25	; 0x2c
    43e0:	8b a7       	std	Y+43, r24	; 0x2b
    43e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    43e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <TAKE_action+0x264>
    43ea:	9c a7       	std	Y+44, r25	; 0x2c
    43ec:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				H_LCD_void_clear();
    43ee:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
				trys--;
    43f2:	de 01       	movw	r26, r28
    43f4:	a8 5b       	subi	r26, 0xB8	; 184
    43f6:	bf 4f       	sbci	r27, 0xFF	; 255
    43f8:	fe 01       	movw	r30, r28
    43fa:	e8 5b       	subi	r30, 0xB8	; 184
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	80 81       	ld	r24, Z
    4400:	81 50       	subi	r24, 0x01	; 1
    4402:	8c 93       	st	X, r24
				if(trys==0)
    4404:	fe 01       	movw	r30, r28
    4406:	e8 5b       	subi	r30, 0xB8	; 184
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 81       	ld	r24, Z
    440c:	88 23       	and	r24, r24
    440e:	09 f0       	breq	.+2      	; 0x4412 <TAKE_action+0x290>
    4410:	96 c0       	rjmp	.+300    	; 0x453e <TAKE_action+0x3bc>
				{
					H_LCD_void_clear();
    4412:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
					H_LCD_void_sendString((const s8 *)"max attempt");
    4416:	84 ea       	ldi	r24, 0xA4	; 164
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>

					u8 i=0 ;
    441e:	fe 01       	movw	r30, r28
    4420:	e9 5b       	subi	r30, 0xB9	; 185
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	10 82       	st	Z, r1

					for(i=0 ; i < 10;i++ )
    4426:	fe 01       	movw	r30, r28
    4428:	e9 5b       	subi	r30, 0xB9	; 185
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	10 82       	st	Z, r1
    442e:	80 c0       	rjmp	.+256    	; 0x4530 <TAKE_action+0x3ae>
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	aa e7       	ldi	r26, 0x7A	; 122
    4436:	b4 e4       	ldi	r27, 0x44	; 68
    4438:	8f a3       	std	Y+39, r24	; 0x27
    443a:	98 a7       	std	Y+40, r25	; 0x28
    443c:	a9 a7       	std	Y+41, r26	; 0x29
    443e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4440:	6f a1       	ldd	r22, Y+39	; 0x27
    4442:	78 a5       	ldd	r23, Y+40	; 0x28
    4444:	89 a5       	ldd	r24, Y+41	; 0x29
    4446:	9a a5       	ldd	r25, Y+42	; 0x2a
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	4a e7       	ldi	r20, 0x7A	; 122
    444e:	55 e4       	ldi	r21, 0x45	; 69
    4450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	8b a3       	std	Y+35, r24	; 0x23
    445a:	9c a3       	std	Y+36, r25	; 0x24
    445c:	ad a3       	std	Y+37, r26	; 0x25
    445e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4460:	6b a1       	ldd	r22, Y+35	; 0x23
    4462:	7c a1       	ldd	r23, Y+36	; 0x24
    4464:	8d a1       	ldd	r24, Y+37	; 0x25
    4466:	9e a1       	ldd	r25, Y+38	; 0x26
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e8       	ldi	r20, 0x80	; 128
    446e:	5f e3       	ldi	r21, 0x3F	; 63
    4470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4474:	88 23       	and	r24, r24
    4476:	2c f4       	brge	.+10     	; 0x4482 <TAKE_action+0x300>
		__ticks = 1;
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	9a a3       	std	Y+34, r25	; 0x22
    447e:	89 a3       	std	Y+33, r24	; 0x21
    4480:	3f c0       	rjmp	.+126    	; 0x4500 <TAKE_action+0x37e>
	else if (__tmp > 65535)
    4482:	6b a1       	ldd	r22, Y+35	; 0x23
    4484:	7c a1       	ldd	r23, Y+36	; 0x24
    4486:	8d a1       	ldd	r24, Y+37	; 0x25
    4488:	9e a1       	ldd	r25, Y+38	; 0x26
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	3f ef       	ldi	r19, 0xFF	; 255
    448e:	4f e7       	ldi	r20, 0x7F	; 127
    4490:	57 e4       	ldi	r21, 0x47	; 71
    4492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4496:	18 16       	cp	r1, r24
    4498:	4c f5       	brge	.+82     	; 0x44ec <TAKE_action+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449a:	6f a1       	ldd	r22, Y+39	; 0x27
    449c:	78 a5       	ldd	r23, Y+40	; 0x28
    449e:	89 a5       	ldd	r24, Y+41	; 0x29
    44a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e2       	ldi	r20, 0x20	; 32
    44a8:	51 e4       	ldi	r21, 0x41	; 65
    44aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ae:	dc 01       	movw	r26, r24
    44b0:	cb 01       	movw	r24, r22
    44b2:	bc 01       	movw	r22, r24
    44b4:	cd 01       	movw	r24, r26
    44b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ba:	dc 01       	movw	r26, r24
    44bc:	cb 01       	movw	r24, r22
    44be:	9a a3       	std	Y+34, r25	; 0x22
    44c0:	89 a3       	std	Y+33, r24	; 0x21
    44c2:	0f c0       	rjmp	.+30     	; 0x44e2 <TAKE_action+0x360>
    44c4:	80 e9       	ldi	r24, 0x90	; 144
    44c6:	91 e0       	ldi	r25, 0x01	; 1
    44c8:	98 a3       	std	Y+32, r25	; 0x20
    44ca:	8f 8f       	std	Y+31, r24	; 0x1f
    44cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44ce:	98 a1       	ldd	r25, Y+32	; 0x20
    44d0:	01 97       	sbiw	r24, 0x01	; 1
    44d2:	f1 f7       	brne	.-4      	; 0x44d0 <TAKE_action+0x34e>
    44d4:	98 a3       	std	Y+32, r25	; 0x20
    44d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d8:	89 a1       	ldd	r24, Y+33	; 0x21
    44da:	9a a1       	ldd	r25, Y+34	; 0x22
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	9a a3       	std	Y+34, r25	; 0x22
    44e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e2:	89 a1       	ldd	r24, Y+33	; 0x21
    44e4:	9a a1       	ldd	r25, Y+34	; 0x22
    44e6:	00 97       	sbiw	r24, 0x00	; 0
    44e8:	69 f7       	brne	.-38     	; 0x44c4 <TAKE_action+0x342>
    44ea:	14 c0       	rjmp	.+40     	; 0x4514 <TAKE_action+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ec:	6b a1       	ldd	r22, Y+35	; 0x23
    44ee:	7c a1       	ldd	r23, Y+36	; 0x24
    44f0:	8d a1       	ldd	r24, Y+37	; 0x25
    44f2:	9e a1       	ldd	r25, Y+38	; 0x26
    44f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	9a a3       	std	Y+34, r25	; 0x22
    44fe:	89 a3       	std	Y+33, r24	; 0x21
    4500:	89 a1       	ldd	r24, Y+33	; 0x21
    4502:	9a a1       	ldd	r25, Y+34	; 0x22
    4504:	9e 8f       	std	Y+30, r25	; 0x1e
    4506:	8d 8f       	std	Y+29, r24	; 0x1d
    4508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    450a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	f1 f7       	brne	.-4      	; 0x450c <TAKE_action+0x38a>
    4510:	9e 8f       	std	Y+30, r25	; 0x1e
    4512:	8d 8f       	std	Y+29, r24	; 0x1d
					{
						_delay_ms(1000);
						trys = MAX_TRYS;
    4514:	fe 01       	movw	r30, r28
    4516:	e8 5b       	subi	r30, 0xB8	; 184
    4518:	ff 4f       	sbci	r31, 0xFF	; 255
    451a:	83 e0       	ldi	r24, 0x03	; 3
    451c:	80 83       	st	Z, r24
					H_LCD_void_clear();
					H_LCD_void_sendString((const s8 *)"max attempt");

					u8 i=0 ;

					for(i=0 ; i < 10;i++ )
    451e:	de 01       	movw	r26, r28
    4520:	a9 5b       	subi	r26, 0xB9	; 185
    4522:	bf 4f       	sbci	r27, 0xFF	; 255
    4524:	fe 01       	movw	r30, r28
    4526:	e9 5b       	subi	r30, 0xB9	; 185
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	80 81       	ld	r24, Z
    452c:	8f 5f       	subi	r24, 0xFF	; 255
    452e:	8c 93       	st	X, r24
    4530:	fe 01       	movw	r30, r28
    4532:	e9 5b       	subi	r30, 0xB9	; 185
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	80 81       	ld	r24, Z
    4538:	8a 30       	cpi	r24, 0x0A	; 10
    453a:	08 f4       	brcc	.+2      	; 0x453e <TAKE_action+0x3bc>
    453c:	79 cf       	rjmp	.-270    	; 0x4430 <TAKE_action+0x2ae>
					H_LCD_void_sendString((const s8 *)"try again");
					_delay_ms(1000);
					H_LCD_void_clear(); */
				}
			}
		}while((check == FAIL ));
    453e:	fe 01       	movw	r30, r28
    4540:	e7 5b       	subi	r30, 0xB7	; 183
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	80 81       	ld	r24, Z
    4546:	88 23       	and	r24, r24
    4548:	09 f4       	brne	.+2      	; 0x454c <TAKE_action+0x3ca>
    454a:	cc ce       	rjmp	.-616    	; 0x42e4 <TAKE_action+0x162>
		if(check == PASS)
    454c:	fe 01       	movw	r30, r28
    454e:	e7 5b       	subi	r30, 0xB7	; 183
    4550:	ff 4f       	sbci	r31, 0xFF	; 255
    4552:	80 81       	ld	r24, Z
    4554:	81 30       	cpi	r24, 0x01	; 1
    4556:	09 f0       	breq	.+2      	; 0x455a <TAKE_action+0x3d8>
    4558:	3a c1       	rjmp	.+628    	; 0x47ce <TAKE_action+0x64c>
		{
			return check ;
    455a:	fe 01       	movw	r30, r28
    455c:	e7 5b       	subi	r30, 0xB7	; 183
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	80 81       	ld	r24, Z
    4562:	2b 96       	adiw	r28, 0x0b	; 11
    4564:	8f af       	std	Y+63, r24	; 0x3f
    4566:	2b 97       	sbiw	r28, 0x0b	; 11
    4568:	39 c1       	rjmp	.+626    	; 0x47dc <TAKE_action+0x65a>

	}
	else
	{

		H_LCD_void_sendString((const s8 *)"out of range");
    456a:	80 eb       	ldi	r24, 0xB0	; 176
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
		H_LCD_void_gotXY(1,0);
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	60 e0       	ldi	r22, 0x00	; 0
    4576:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <H_LCD_void_gotXY>
		H_LCD_void_sendData(((distance/1000)%10)+48);
    457a:	80 91 12 02 	lds	r24, 0x0212
    457e:	90 91 13 02 	lds	r25, 0x0213
    4582:	28 ee       	ldi	r18, 0xE8	; 232
    4584:	33 e0       	ldi	r19, 0x03	; 3
    4586:	b9 01       	movw	r22, r18
    4588:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    458c:	cb 01       	movw	r24, r22
    458e:	2a e0       	ldi	r18, 0x0A	; 10
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	b9 01       	movw	r22, r18
    4594:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4598:	80 5d       	subi	r24, 0xD0	; 208
    459a:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
		H_LCD_void_sendData(((distance/100)%10)+48);
    459e:	80 91 12 02 	lds	r24, 0x0212
    45a2:	90 91 13 02 	lds	r25, 0x0213
    45a6:	24 e6       	ldi	r18, 0x64	; 100
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	b9 01       	movw	r22, r18
    45ac:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    45b0:	cb 01       	movw	r24, r22
    45b2:	2a e0       	ldi	r18, 0x0A	; 10
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	b9 01       	movw	r22, r18
    45b8:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    45bc:	80 5d       	subi	r24, 0xD0	; 208
    45be:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
		H_LCD_void_sendData(((distance/10)%10)+48);
    45c2:	80 91 12 02 	lds	r24, 0x0212
    45c6:	90 91 13 02 	lds	r25, 0x0213
    45ca:	2a e0       	ldi	r18, 0x0A	; 10
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	b9 01       	movw	r22, r18
    45d0:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    45d4:	cb 01       	movw	r24, r22
    45d6:	2a e0       	ldi	r18, 0x0A	; 10
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	b9 01       	movw	r22, r18
    45dc:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    45e0:	80 5d       	subi	r24, 0xD0	; 208
    45e2:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
		H_LCD_void_sendData((distance%10)+48);
    45e6:	80 91 12 02 	lds	r24, 0x0212
    45ea:	90 91 13 02 	lds	r25, 0x0213
    45ee:	2a e0       	ldi	r18, 0x0A	; 10
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	b9 01       	movw	r22, r18
    45f4:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    45f8:	80 5d       	subi	r24, 0xD0	; 208
    45fa:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	aa ef       	ldi	r26, 0xFA	; 250
    4604:	b3 e4       	ldi	r27, 0x43	; 67
    4606:	89 8f       	std	Y+25, r24	; 0x19
    4608:	9a 8f       	std	Y+26, r25	; 0x1a
    460a:	ab 8f       	std	Y+27, r26	; 0x1b
    460c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460e:	69 8d       	ldd	r22, Y+25	; 0x19
    4610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	4a e7       	ldi	r20, 0x7A	; 122
    461c:	55 e4       	ldi	r21, 0x45	; 69
    461e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	8d 8b       	std	Y+21, r24	; 0x15
    4628:	9e 8b       	std	Y+22, r25	; 0x16
    462a:	af 8b       	std	Y+23, r26	; 0x17
    462c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    462e:	6d 89       	ldd	r22, Y+21	; 0x15
    4630:	7e 89       	ldd	r23, Y+22	; 0x16
    4632:	8f 89       	ldd	r24, Y+23	; 0x17
    4634:	98 8d       	ldd	r25, Y+24	; 0x18
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e8       	ldi	r20, 0x80	; 128
    463c:	5f e3       	ldi	r21, 0x3F	; 63
    463e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4642:	88 23       	and	r24, r24
    4644:	2c f4       	brge	.+10     	; 0x4650 <TAKE_action+0x4ce>
		__ticks = 1;
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	9c 8b       	std	Y+20, r25	; 0x14
    464c:	8b 8b       	std	Y+19, r24	; 0x13
    464e:	3f c0       	rjmp	.+126    	; 0x46ce <TAKE_action+0x54c>
	else if (__tmp > 65535)
    4650:	6d 89       	ldd	r22, Y+21	; 0x15
    4652:	7e 89       	ldd	r23, Y+22	; 0x16
    4654:	8f 89       	ldd	r24, Y+23	; 0x17
    4656:	98 8d       	ldd	r25, Y+24	; 0x18
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	3f ef       	ldi	r19, 0xFF	; 255
    465c:	4f e7       	ldi	r20, 0x7F	; 127
    465e:	57 e4       	ldi	r21, 0x47	; 71
    4660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4664:	18 16       	cp	r1, r24
    4666:	4c f5       	brge	.+82     	; 0x46ba <TAKE_action+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4668:	69 8d       	ldd	r22, Y+25	; 0x19
    466a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    466c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    466e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e2       	ldi	r20, 0x20	; 32
    4676:	51 e4       	ldi	r21, 0x41	; 65
    4678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	bc 01       	movw	r22, r24
    4682:	cd 01       	movw	r24, r26
    4684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	9c 8b       	std	Y+20, r25	; 0x14
    468e:	8b 8b       	std	Y+19, r24	; 0x13
    4690:	0f c0       	rjmp	.+30     	; 0x46b0 <TAKE_action+0x52e>
    4692:	80 e9       	ldi	r24, 0x90	; 144
    4694:	91 e0       	ldi	r25, 0x01	; 1
    4696:	9a 8b       	std	Y+18, r25	; 0x12
    4698:	89 8b       	std	Y+17, r24	; 0x11
    469a:	89 89       	ldd	r24, Y+17	; 0x11
    469c:	9a 89       	ldd	r25, Y+18	; 0x12
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	f1 f7       	brne	.-4      	; 0x469e <TAKE_action+0x51c>
    46a2:	9a 8b       	std	Y+18, r25	; 0x12
    46a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a6:	8b 89       	ldd	r24, Y+19	; 0x13
    46a8:	9c 89       	ldd	r25, Y+20	; 0x14
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	9c 8b       	std	Y+20, r25	; 0x14
    46ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b0:	8b 89       	ldd	r24, Y+19	; 0x13
    46b2:	9c 89       	ldd	r25, Y+20	; 0x14
    46b4:	00 97       	sbiw	r24, 0x00	; 0
    46b6:	69 f7       	brne	.-38     	; 0x4692 <TAKE_action+0x510>
    46b8:	14 c0       	rjmp	.+40     	; 0x46e2 <TAKE_action+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ba:	6d 89       	ldd	r22, Y+21	; 0x15
    46bc:	7e 89       	ldd	r23, Y+22	; 0x16
    46be:	8f 89       	ldd	r24, Y+23	; 0x17
    46c0:	98 8d       	ldd	r25, Y+24	; 0x18
    46c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	9c 8b       	std	Y+20, r25	; 0x14
    46cc:	8b 8b       	std	Y+19, r24	; 0x13
    46ce:	8b 89       	ldd	r24, Y+19	; 0x13
    46d0:	9c 89       	ldd	r25, Y+20	; 0x14
    46d2:	98 8b       	std	Y+16, r25	; 0x10
    46d4:	8f 87       	std	Y+15, r24	; 0x0f
    46d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46d8:	98 89       	ldd	r25, Y+16	; 0x10
    46da:	01 97       	sbiw	r24, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <TAKE_action+0x558>
    46de:	98 8b       	std	Y+16, r25	; 0x10
    46e0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		H_LCD_void_clear();
    46e2:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>

		DC_MOTOR();
    46e6:	0e 94 75 25 	call	0x4aea	; 0x4aea <DC_MOTOR>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	aa e7       	ldi	r26, 0x7A	; 122
    46f0:	b4 e4       	ldi	r27, 0x44	; 68
    46f2:	8b 87       	std	Y+11, r24	; 0x0b
    46f4:	9c 87       	std	Y+12, r25	; 0x0c
    46f6:	ad 87       	std	Y+13, r26	; 0x0d
    46f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    46fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    46fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4700:	9e 85       	ldd	r25, Y+14	; 0x0e
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	4a e7       	ldi	r20, 0x7A	; 122
    4708:	55 e4       	ldi	r21, 0x45	; 69
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	8f 83       	std	Y+7, r24	; 0x07
    4714:	98 87       	std	Y+8, r25	; 0x08
    4716:	a9 87       	std	Y+9, r26	; 0x09
    4718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    471a:	6f 81       	ldd	r22, Y+7	; 0x07
    471c:	78 85       	ldd	r23, Y+8	; 0x08
    471e:	89 85       	ldd	r24, Y+9	; 0x09
    4720:	9a 85       	ldd	r25, Y+10	; 0x0a
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	40 e8       	ldi	r20, 0x80	; 128
    4728:	5f e3       	ldi	r21, 0x3F	; 63
    472a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    472e:	88 23       	and	r24, r24
    4730:	2c f4       	brge	.+10     	; 0x473c <TAKE_action+0x5ba>
		__ticks = 1;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9e 83       	std	Y+6, r25	; 0x06
    4738:	8d 83       	std	Y+5, r24	; 0x05
    473a:	3f c0       	rjmp	.+126    	; 0x47ba <TAKE_action+0x638>
	else if (__tmp > 65535)
    473c:	6f 81       	ldd	r22, Y+7	; 0x07
    473e:	78 85       	ldd	r23, Y+8	; 0x08
    4740:	89 85       	ldd	r24, Y+9	; 0x09
    4742:	9a 85       	ldd	r25, Y+10	; 0x0a
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	3f ef       	ldi	r19, 0xFF	; 255
    4748:	4f e7       	ldi	r20, 0x7F	; 127
    474a:	57 e4       	ldi	r21, 0x47	; 71
    474c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4750:	18 16       	cp	r1, r24
    4752:	4c f5       	brge	.+82     	; 0x47a6 <TAKE_action+0x624>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4754:	6b 85       	ldd	r22, Y+11	; 0x0b
    4756:	7c 85       	ldd	r23, Y+12	; 0x0c
    4758:	8d 85       	ldd	r24, Y+13	; 0x0d
    475a:	9e 85       	ldd	r25, Y+14	; 0x0e
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	40 e2       	ldi	r20, 0x20	; 32
    4762:	51 e4       	ldi	r21, 0x41	; 65
    4764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	bc 01       	movw	r22, r24
    476e:	cd 01       	movw	r24, r26
    4770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	9e 83       	std	Y+6, r25	; 0x06
    477a:	8d 83       	std	Y+5, r24	; 0x05
    477c:	0f c0       	rjmp	.+30     	; 0x479c <TAKE_action+0x61a>
    477e:	80 e9       	ldi	r24, 0x90	; 144
    4780:	91 e0       	ldi	r25, 0x01	; 1
    4782:	9c 83       	std	Y+4, r25	; 0x04
    4784:	8b 83       	std	Y+3, r24	; 0x03
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	9c 81       	ldd	r25, Y+4	; 0x04
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <TAKE_action+0x608>
    478e:	9c 83       	std	Y+4, r25	; 0x04
    4790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4792:	8d 81       	ldd	r24, Y+5	; 0x05
    4794:	9e 81       	ldd	r25, Y+6	; 0x06
    4796:	01 97       	sbiw	r24, 0x01	; 1
    4798:	9e 83       	std	Y+6, r25	; 0x06
    479a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479c:	8d 81       	ldd	r24, Y+5	; 0x05
    479e:	9e 81       	ldd	r25, Y+6	; 0x06
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	69 f7       	brne	.-38     	; 0x477e <TAKE_action+0x5fc>
    47a4:	14 c0       	rjmp	.+40     	; 0x47ce <TAKE_action+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a6:	6f 81       	ldd	r22, Y+7	; 0x07
    47a8:	78 85       	ldd	r23, Y+8	; 0x08
    47aa:	89 85       	ldd	r24, Y+9	; 0x09
    47ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	9e 83       	std	Y+6, r25	; 0x06
    47b8:	8d 83       	std	Y+5, r24	; 0x05
    47ba:	8d 81       	ldd	r24, Y+5	; 0x05
    47bc:	9e 81       	ldd	r25, Y+6	; 0x06
    47be:	9a 83       	std	Y+2, r25	; 0x02
    47c0:	89 83       	std	Y+1, r24	; 0x01
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	9a 81       	ldd	r25, Y+2	; 0x02
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <TAKE_action+0x644>
    47ca:	9a 83       	std	Y+2, r25	; 0x02
    47cc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);
	}
	return check;
    47ce:	fe 01       	movw	r30, r28
    47d0:	e7 5b       	subi	r30, 0xB7	; 183
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	80 81       	ld	r24, Z
    47d6:	2b 96       	adiw	r28, 0x0b	; 11
    47d8:	8f af       	std	Y+63, r24	; 0x3f
    47da:	2b 97       	sbiw	r28, 0x0b	; 11
    47dc:	2b 96       	adiw	r28, 0x0b	; 11
    47de:	8f ad       	ldd	r24, Y+63	; 0x3f
    47e0:	2b 97       	sbiw	r28, 0x0b	; 11
}
    47e2:	c6 5b       	subi	r28, 0xB6	; 182
    47e4:	df 4f       	sbci	r29, 0xFF	; 255
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	f8 94       	cli
    47ea:	de bf       	out	0x3e, r29	; 62
    47ec:	0f be       	out	0x3f, r0	; 63
    47ee:	cd bf       	out	0x3d, r28	; 61
    47f0:	cf 91       	pop	r28
    47f2:	df 91       	pop	r29
    47f4:	1f 91       	pop	r17
    47f6:	0f 91       	pop	r16
    47f8:	08 95       	ret

000047fa <get_and_check_password>:

static u8 get_and_check_password(void)
{
    47fa:	df 93       	push	r29
    47fc:	cf 93       	push	r28
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	a3 97       	sbiw	r28, 0x23	; 35
    4804:	0f b6       	in	r0, 0x3f	; 63
    4806:	f8 94       	cli
    4808:	de bf       	out	0x3e, r29	; 62
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	cd bf       	out	0x3d, r28	; 61
	u8 check = FAIL;
    480e:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 i = 0;
    4810:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 read = NO_PRESSED_KEY;
    4812:	8f ef       	ldi	r24, 0xFF	; 255
    4814:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 temp_pass_arr[MAX_PASS_SIZE] = {0};
    4816:	18 a2       	std	Y+32, r1	; 0x20
    4818:	19 a2       	std	Y+33, r1	; 0x21
    481a:	1a a2       	std	Y+34, r1	; 0x22
    481c:	1b a2       	std	Y+35, r1	; 0x23
	H_LCD_void_gotXY(0,0);
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <H_LCD_void_gotXY>
	for( i=1 ;i < MAX_PASS_SIZE+1 ;i++ )
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	8e 8f       	std	Y+30, r24	; 0x1e
    482a:	97 c0       	rjmp	.+302    	; 0x495a <get_and_check_password+0x160>
	{
		while(read == NO_PRESSED_KEY)
		{
			read = H_KEYPAD_void_getPressesKey();
    482c:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <H_KEYPAD_void_getPressesKey>
    4830:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 read = NO_PRESSED_KEY;
	u8 temp_pass_arr[MAX_PASS_SIZE] = {0};
	H_LCD_void_gotXY(0,0);
	for( i=1 ;i < MAX_PASS_SIZE+1 ;i++ )
	{
		while(read == NO_PRESSED_KEY)
    4832:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4834:	8f 3f       	cpi	r24, 0xFF	; 255
    4836:	d1 f3       	breq	.-12     	; 0x482c <get_and_check_password+0x32>
		{
			read = H_KEYPAD_void_getPressesKey();
		}
		temp_pass_arr[i-1] = read;
    4838:	8e 8d       	ldd	r24, Y+30	; 0x1e
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	9c 01       	movw	r18, r24
    4840:	21 50       	subi	r18, 0x01	; 1
    4842:	30 40       	sbci	r19, 0x00	; 0
    4844:	ce 01       	movw	r24, r28
    4846:	80 96       	adiw	r24, 0x20	; 32
    4848:	fc 01       	movw	r30, r24
    484a:	e2 0f       	add	r30, r18
    484c:	f3 1f       	adc	r31, r19
    484e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4850:	80 83       	st	Z, r24
		H_LCD_void_sendData(read);
    4852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4854:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	aa ef       	ldi	r26, 0xFA	; 250
    485e:	b3 e4       	ldi	r27, 0x43	; 67
    4860:	89 8f       	std	Y+25, r24	; 0x19
    4862:	9a 8f       	std	Y+26, r25	; 0x1a
    4864:	ab 8f       	std	Y+27, r26	; 0x1b
    4866:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4868:	69 8d       	ldd	r22, Y+25	; 0x19
    486a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    486c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    486e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	4a e7       	ldi	r20, 0x7A	; 122
    4876:	55 e4       	ldi	r21, 0x45	; 69
    4878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	8d 8b       	std	Y+21, r24	; 0x15
    4882:	9e 8b       	std	Y+22, r25	; 0x16
    4884:	af 8b       	std	Y+23, r26	; 0x17
    4886:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4888:	6d 89       	ldd	r22, Y+21	; 0x15
    488a:	7e 89       	ldd	r23, Y+22	; 0x16
    488c:	8f 89       	ldd	r24, Y+23	; 0x17
    488e:	98 8d       	ldd	r25, Y+24	; 0x18
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e8       	ldi	r20, 0x80	; 128
    4896:	5f e3       	ldi	r21, 0x3F	; 63
    4898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    489c:	88 23       	and	r24, r24
    489e:	2c f4       	brge	.+10     	; 0x48aa <get_and_check_password+0xb0>
		__ticks = 1;
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	9c 8b       	std	Y+20, r25	; 0x14
    48a6:	8b 8b       	std	Y+19, r24	; 0x13
    48a8:	3f c0       	rjmp	.+126    	; 0x4928 <get_and_check_password+0x12e>
	else if (__tmp > 65535)
    48aa:	6d 89       	ldd	r22, Y+21	; 0x15
    48ac:	7e 89       	ldd	r23, Y+22	; 0x16
    48ae:	8f 89       	ldd	r24, Y+23	; 0x17
    48b0:	98 8d       	ldd	r25, Y+24	; 0x18
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	3f ef       	ldi	r19, 0xFF	; 255
    48b6:	4f e7       	ldi	r20, 0x7F	; 127
    48b8:	57 e4       	ldi	r21, 0x47	; 71
    48ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48be:	18 16       	cp	r1, r24
    48c0:	4c f5       	brge	.+82     	; 0x4914 <get_and_check_password+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c2:	69 8d       	ldd	r22, Y+25	; 0x19
    48c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	40 e2       	ldi	r20, 0x20	; 32
    48d0:	51 e4       	ldi	r21, 0x41	; 65
    48d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	bc 01       	movw	r22, r24
    48dc:	cd 01       	movw	r24, r26
    48de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	9c 8b       	std	Y+20, r25	; 0x14
    48e8:	8b 8b       	std	Y+19, r24	; 0x13
    48ea:	0f c0       	rjmp	.+30     	; 0x490a <get_and_check_password+0x110>
    48ec:	80 e9       	ldi	r24, 0x90	; 144
    48ee:	91 e0       	ldi	r25, 0x01	; 1
    48f0:	9a 8b       	std	Y+18, r25	; 0x12
    48f2:	89 8b       	std	Y+17, r24	; 0x11
    48f4:	89 89       	ldd	r24, Y+17	; 0x11
    48f6:	9a 89       	ldd	r25, Y+18	; 0x12
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <get_and_check_password+0xfe>
    48fc:	9a 8b       	std	Y+18, r25	; 0x12
    48fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4900:	8b 89       	ldd	r24, Y+19	; 0x13
    4902:	9c 89       	ldd	r25, Y+20	; 0x14
    4904:	01 97       	sbiw	r24, 0x01	; 1
    4906:	9c 8b       	std	Y+20, r25	; 0x14
    4908:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    490a:	8b 89       	ldd	r24, Y+19	; 0x13
    490c:	9c 89       	ldd	r25, Y+20	; 0x14
    490e:	00 97       	sbiw	r24, 0x00	; 0
    4910:	69 f7       	brne	.-38     	; 0x48ec <get_and_check_password+0xf2>
    4912:	14 c0       	rjmp	.+40     	; 0x493c <get_and_check_password+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4914:	6d 89       	ldd	r22, Y+21	; 0x15
    4916:	7e 89       	ldd	r23, Y+22	; 0x16
    4918:	8f 89       	ldd	r24, Y+23	; 0x17
    491a:	98 8d       	ldd	r25, Y+24	; 0x18
    491c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	9c 8b       	std	Y+20, r25	; 0x14
    4926:	8b 8b       	std	Y+19, r24	; 0x13
    4928:	8b 89       	ldd	r24, Y+19	; 0x13
    492a:	9c 89       	ldd	r25, Y+20	; 0x14
    492c:	98 8b       	std	Y+16, r25	; 0x10
    492e:	8f 87       	std	Y+15, r24	; 0x0f
    4930:	8f 85       	ldd	r24, Y+15	; 0x0f
    4932:	98 89       	ldd	r25, Y+16	; 0x10
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	f1 f7       	brne	.-4      	; 0x4934 <get_and_check_password+0x13a>
    4938:	98 8b       	std	Y+16, r25	; 0x10
    493a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		H_LCD_void_gotXY(0, i-1);
    493c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    493e:	98 2f       	mov	r25, r24
    4940:	91 50       	subi	r25, 0x01	; 1
    4942:	80 e0       	ldi	r24, 0x00	; 0
    4944:	69 2f       	mov	r22, r25
    4946:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <H_LCD_void_gotXY>
		H_LCD_void_sendData('*');
    494a:	8a e2       	ldi	r24, 0x2A	; 42
    494c:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
		read = NO_PRESSED_KEY ;
    4950:	8f ef       	ldi	r24, 0xFF	; 255
    4952:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 check = FAIL;
	u8 i = 0;
	u8 read = NO_PRESSED_KEY;
	u8 temp_pass_arr[MAX_PASS_SIZE] = {0};
	H_LCD_void_gotXY(0,0);
	for( i=1 ;i < MAX_PASS_SIZE+1 ;i++ )
    4954:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4956:	8f 5f       	subi	r24, 0xFF	; 255
    4958:	8e 8f       	std	Y+30, r24	; 0x1e
    495a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    495c:	85 30       	cpi	r24, 0x05	; 5
    495e:	08 f4       	brcc	.+2      	; 0x4962 <get_and_check_password+0x168>
    4960:	68 cf       	rjmp	.-304    	; 0x4832 <get_and_check_password+0x38>
		H_LCD_void_sendData('*');
		read = NO_PRESSED_KEY ;

	}

	for(i=0 ; i < MAX_PASS_SIZE ; i++)
    4962:	1e 8e       	std	Y+30, r1	; 0x1e
    4964:	1a c0       	rjmp	.+52     	; 0x499a <get_and_check_password+0x1a0>
	{
		if(temp_pass_arr[i] == pass_arr[i])
    4966:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4968:	28 2f       	mov	r18, r24
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	ce 01       	movw	r24, r28
    496e:	80 96       	adiw	r24, 0x20	; 32
    4970:	fc 01       	movw	r30, r24
    4972:	e2 0f       	add	r30, r18
    4974:	f3 1f       	adc	r31, r19
    4976:	20 81       	ld	r18, Z
    4978:	8e 8d       	ldd	r24, Y+30	; 0x1e
    497a:	88 2f       	mov	r24, r24
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	fc 01       	movw	r30, r24
    4980:	e1 53       	subi	r30, 0x31	; 49
    4982:	fe 4f       	sbci	r31, 0xFE	; 254
    4984:	80 81       	ld	r24, Z
    4986:	28 17       	cp	r18, r24
    4988:	31 f4       	brne	.+12     	; 0x4996 <get_and_check_password+0x19c>
		{
			check = PASS;
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	8f 8f       	std	Y+31, r24	; 0x1f
		H_LCD_void_sendData('*');
		read = NO_PRESSED_KEY ;

	}

	for(i=0 ; i < MAX_PASS_SIZE ; i++)
    498e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4990:	8f 5f       	subi	r24, 0xFF	; 255
    4992:	8e 8f       	std	Y+30, r24	; 0x1e
    4994:	02 c0       	rjmp	.+4      	; 0x499a <get_and_check_password+0x1a0>
		{
			check = PASS;
		}
		else
		{
			check = FAIL;
    4996:	1f 8e       	std	Y+31, r1	; 0x1f
    4998:	03 c0       	rjmp	.+6      	; 0x49a0 <get_and_check_password+0x1a6>
		H_LCD_void_sendData('*');
		read = NO_PRESSED_KEY ;

	}

	for(i=0 ; i < MAX_PASS_SIZE ; i++)
    499a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    499c:	84 30       	cpi	r24, 0x04	; 4
    499e:	18 f3       	brcs	.-58     	; 0x4966 <get_and_check_password+0x16c>
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	aa ef       	ldi	r26, 0xFA	; 250
    49a6:	b3 e4       	ldi	r27, 0x43	; 67
    49a8:	8b 87       	std	Y+11, r24	; 0x0b
    49aa:	9c 87       	std	Y+12, r25	; 0x0c
    49ac:	ad 87       	std	Y+13, r26	; 0x0d
    49ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    49b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    49b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	4a e7       	ldi	r20, 0x7A	; 122
    49be:	55 e4       	ldi	r21, 0x45	; 69
    49c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	8f 83       	std	Y+7, r24	; 0x07
    49ca:	98 87       	std	Y+8, r25	; 0x08
    49cc:	a9 87       	std	Y+9, r26	; 0x09
    49ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49d0:	6f 81       	ldd	r22, Y+7	; 0x07
    49d2:	78 85       	ldd	r23, Y+8	; 0x08
    49d4:	89 85       	ldd	r24, Y+9	; 0x09
    49d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e8       	ldi	r20, 0x80	; 128
    49de:	5f e3       	ldi	r21, 0x3F	; 63
    49e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49e4:	88 23       	and	r24, r24
    49e6:	2c f4       	brge	.+10     	; 0x49f2 <get_and_check_password+0x1f8>
		__ticks = 1;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	9e 83       	std	Y+6, r25	; 0x06
    49ee:	8d 83       	std	Y+5, r24	; 0x05
    49f0:	3f c0       	rjmp	.+126    	; 0x4a70 <get_and_check_password+0x276>
	else if (__tmp > 65535)
    49f2:	6f 81       	ldd	r22, Y+7	; 0x07
    49f4:	78 85       	ldd	r23, Y+8	; 0x08
    49f6:	89 85       	ldd	r24, Y+9	; 0x09
    49f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	3f ef       	ldi	r19, 0xFF	; 255
    49fe:	4f e7       	ldi	r20, 0x7F	; 127
    4a00:	57 e4       	ldi	r21, 0x47	; 71
    4a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a06:	18 16       	cp	r1, r24
    4a08:	4c f5       	brge	.+82     	; 0x4a5c <get_and_check_password+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a12:	20 e0       	ldi	r18, 0x00	; 0
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	40 e2       	ldi	r20, 0x20	; 32
    4a18:	51 e4       	ldi	r21, 0x41	; 65
    4a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1e:	dc 01       	movw	r26, r24
    4a20:	cb 01       	movw	r24, r22
    4a22:	bc 01       	movw	r22, r24
    4a24:	cd 01       	movw	r24, r26
    4a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	cb 01       	movw	r24, r22
    4a2e:	9e 83       	std	Y+6, r25	; 0x06
    4a30:	8d 83       	std	Y+5, r24	; 0x05
    4a32:	0f c0       	rjmp	.+30     	; 0x4a52 <get_and_check_password+0x258>
    4a34:	80 e9       	ldi	r24, 0x90	; 144
    4a36:	91 e0       	ldi	r25, 0x01	; 1
    4a38:	9c 83       	std	Y+4, r25	; 0x04
    4a3a:	8b 83       	std	Y+3, r24	; 0x03
    4a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a40:	01 97       	sbiw	r24, 0x01	; 1
    4a42:	f1 f7       	brne	.-4      	; 0x4a40 <get_and_check_password+0x246>
    4a44:	9c 83       	std	Y+4, r25	; 0x04
    4a46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a48:	8d 81       	ldd	r24, Y+5	; 0x05
    4a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a4c:	01 97       	sbiw	r24, 0x01	; 1
    4a4e:	9e 83       	std	Y+6, r25	; 0x06
    4a50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a52:	8d 81       	ldd	r24, Y+5	; 0x05
    4a54:	9e 81       	ldd	r25, Y+6	; 0x06
    4a56:	00 97       	sbiw	r24, 0x00	; 0
    4a58:	69 f7       	brne	.-38     	; 0x4a34 <get_and_check_password+0x23a>
    4a5a:	14 c0       	rjmp	.+40     	; 0x4a84 <get_and_check_password+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5e:	78 85       	ldd	r23, Y+8	; 0x08
    4a60:	89 85       	ldd	r24, Y+9	; 0x09
    4a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a68:	dc 01       	movw	r26, r24
    4a6a:	cb 01       	movw	r24, r22
    4a6c:	9e 83       	std	Y+6, r25	; 0x06
    4a6e:	8d 83       	std	Y+5, r24	; 0x05
    4a70:	8d 81       	ldd	r24, Y+5	; 0x05
    4a72:	9e 81       	ldd	r25, Y+6	; 0x06
    4a74:	9a 83       	std	Y+2, r25	; 0x02
    4a76:	89 83       	std	Y+1, r24	; 0x01
    4a78:	89 81       	ldd	r24, Y+1	; 0x01
    4a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7c:	01 97       	sbiw	r24, 0x01	; 1
    4a7e:	f1 f7       	brne	.-4      	; 0x4a7c <get_and_check_password+0x282>
    4a80:	9a 83       	std	Y+2, r25	; 0x02
    4a82:	89 83       	std	Y+1, r24	; 0x01
			check = FAIL;
			break;
		}
	}
	_delay_ms(500);
	return check;
    4a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    4a86:	a3 96       	adiw	r28, 0x23	; 35
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	f8 94       	cli
    4a8c:	de bf       	out	0x3e, r29	; 62
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	cd bf       	out	0x3d, r28	; 61
    4a92:	cf 91       	pop	r28
    4a94:	df 91       	pop	r29
    4a96:	08 95       	ret

00004a98 <ALL_LEDS_ON>:

void ALL_LEDS_ON(void)
{
    4a98:	df 93       	push	r29
    4a9a:	cf 93       	push	r28
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
	H_Led_void_ledInit(GRN_LED);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	0e 94 0b 18 	call	0x3016	; 0x3016 <H_Led_void_ledInit>
	H_Led_void_ledInit(BLU_LED);
    4aa6:	82 e0       	ldi	r24, 0x02	; 2
    4aa8:	0e 94 0b 18 	call	0x3016	; 0x3016 <H_Led_void_ledInit>
	H_Led_void_ledInit(RED_LED);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	0e 94 0b 18 	call	0x3016	; 0x3016 <H_Led_void_ledInit>

	H_Led_void_setON(GRN_LED);
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	0e 94 3c 18 	call	0x3078	; 0x3078 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    4ab8:	82 e0       	ldi	r24, 0x02	; 2
    4aba:	0e 94 3c 18 	call	0x3078	; 0x3078 <H_Led_void_setON>
	H_Led_void_setON(RED_LED);
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	0e 94 3c 18 	call	0x3078	; 0x3078 <H_Led_void_setON>

}
    4ac4:	cf 91       	pop	r28
    4ac6:	df 91       	pop	r29
    4ac8:	08 95       	ret

00004aca <ALL_LEDS_OFF>:

void ALL_LEDS_OFF(void)
{
    4aca:	df 93       	push	r29
    4acc:	cf 93       	push	r28
    4ace:	cd b7       	in	r28, 0x3d	; 61
    4ad0:	de b7       	in	r29, 0x3e	; 62
	H_Led_void_setOFF(GRN_LED);
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    4ad8:	82 e0       	ldi	r24, 0x02	; 2
    4ada:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Led_void_setOFF>
	H_Led_void_setOFF(RED_LED);
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	0e 94 6d 18 	call	0x30da	; 0x30da <H_Led_void_setOFF>
}
    4ae4:	cf 91       	pop	r28
    4ae6:	df 91       	pop	r29
    4ae8:	08 95       	ret

00004aea <DC_MOTOR>:


 void DC_MOTOR(void)
 {
    4aea:	df 93       	push	r29
    4aec:	cf 93       	push	r28
    4aee:	cd b7       	in	r28, 0x3d	; 61
    4af0:	de b7       	in	r29, 0x3e	; 62
    4af2:	2e 97       	sbiw	r28, 0x0e	; 14
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	f8 94       	cli
    4af8:	de bf       	out	0x3e, r29	; 62
    4afa:	0f be       	out	0x3f, r0	; 63
    4afc:	cd bf       	out	0x3d, r28	; 61
	//u8 check = FAIL;
	 		Temp_read = H_TEMPSENSOR_u8_readTemp();  //from here we start the temp
    4afe:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <H_TEMPSENSOR_u8_readTemp>
    4b02:	88 2f       	mov	r24, r24
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	90 93 15 02 	sts	0x0215, r25
    4b0a:	80 93 14 02 	sts	0x0214, r24
	 		if(Temp_read <= 250)
    4b0e:	80 91 14 02 	lds	r24, 0x0214
    4b12:	90 91 15 02 	lds	r25, 0x0215
    4b16:	8b 3f       	cpi	r24, 0xFB	; 251
    4b18:	91 05       	cpc	r25, r1
    4b1a:	18 f4       	brcc	.+6      	; 0x4b22 <DC_MOTOR+0x38>
	 		{
	 			H_DcMotor_void_OF();// dc motor off
    4b1c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <H_DcMotor_void_OF>
    4b20:	02 c0       	rjmp	.+4      	; 0x4b26 <DC_MOTOR+0x3c>
	 		}

	 		else
	 		{
	 			H_DcMotor_void_ON();// dc motor  on
    4b22:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <H_DcMotor_void_ON>
	 		}
	 		H_LCD_void_clear();
    4b26:	0e 94 c7 1a 	call	0x358e	; 0x358e <H_LCD_void_clear>
	 		H_LCD_void_sendString((const s8 *)"temp is :");
    4b2a:	8d eb       	ldi	r24, 0xBD	; 189
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	0e 94 ab 1a 	call	0x3556	; 0x3556 <H_LCD_void_sendString>
	 		H_LCD_void_gotXY(1,0);
    4b32:	81 e0       	ldi	r24, 0x01	; 1
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <H_LCD_void_gotXY>
	 		H_LCD_void_sendData(((Temp_read/10000)%10)+48);
    4b3a:	80 91 14 02 	lds	r24, 0x0214
    4b3e:	90 91 15 02 	lds	r25, 0x0215
    4b42:	20 e1       	ldi	r18, 0x10	; 16
    4b44:	37 e2       	ldi	r19, 0x27	; 39
    4b46:	b9 01       	movw	r22, r18
    4b48:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	2a e0       	ldi	r18, 0x0A	; 10
    4b50:	30 e0       	ldi	r19, 0x00	; 0
    4b52:	b9 01       	movw	r22, r18
    4b54:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4b58:	80 5d       	subi	r24, 0xD0	; 208
    4b5a:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
	 		H_LCD_void_sendData(((Temp_read/1000)%10)+48);
    4b5e:	80 91 14 02 	lds	r24, 0x0214
    4b62:	90 91 15 02 	lds	r25, 0x0215
    4b66:	28 ee       	ldi	r18, 0xE8	; 232
    4b68:	33 e0       	ldi	r19, 0x03	; 3
    4b6a:	b9 01       	movw	r22, r18
    4b6c:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4b70:	cb 01       	movw	r24, r22
    4b72:	2a e0       	ldi	r18, 0x0A	; 10
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	b9 01       	movw	r22, r18
    4b78:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4b7c:	80 5d       	subi	r24, 0xD0	; 208
    4b7e:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
	 		H_LCD_void_sendData(((Temp_read/100)%10)+48);
    4b82:	80 91 14 02 	lds	r24, 0x0214
    4b86:	90 91 15 02 	lds	r25, 0x0215
    4b8a:	24 e6       	ldi	r18, 0x64	; 100
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	b9 01       	movw	r22, r18
    4b90:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4b94:	cb 01       	movw	r24, r22
    4b96:	2a e0       	ldi	r18, 0x0A	; 10
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	b9 01       	movw	r22, r18
    4b9c:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4ba0:	80 5d       	subi	r24, 0xD0	; 208
    4ba2:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
	 		H_LCD_void_sendData((Temp_read%10)+48);
    4ba6:	80 91 14 02 	lds	r24, 0x0214
    4baa:	90 91 15 02 	lds	r25, 0x0215
    4bae:	2a e0       	ldi	r18, 0x0A	; 10
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	b9 01       	movw	r22, r18
    4bb4:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__udivmodhi4>
    4bb8:	80 5d       	subi	r24, 0xD0	; 208
    4bba:	0e 94 87 1a 	call	0x350e	; 0x350e <H_LCD_void_sendData>
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	aa e7       	ldi	r26, 0x7A	; 122
    4bc4:	b4 e4       	ldi	r27, 0x44	; 68
    4bc6:	8b 87       	std	Y+11, r24	; 0x0b
    4bc8:	9c 87       	std	Y+12, r25	; 0x0c
    4bca:	ad 87       	std	Y+13, r26	; 0x0d
    4bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	4a e7       	ldi	r20, 0x7A	; 122
    4bdc:	55 e4       	ldi	r21, 0x45	; 69
    4bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	8f 83       	std	Y+7, r24	; 0x07
    4be8:	98 87       	std	Y+8, r25	; 0x08
    4bea:	a9 87       	std	Y+9, r26	; 0x09
    4bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bee:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf0:	78 85       	ldd	r23, Y+8	; 0x08
    4bf2:	89 85       	ldd	r24, Y+9	; 0x09
    4bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	40 e8       	ldi	r20, 0x80	; 128
    4bfc:	5f e3       	ldi	r21, 0x3F	; 63
    4bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c02:	88 23       	and	r24, r24
    4c04:	2c f4       	brge	.+10     	; 0x4c10 <DC_MOTOR+0x126>
		__ticks = 1;
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	9e 83       	std	Y+6, r25	; 0x06
    4c0c:	8d 83       	std	Y+5, r24	; 0x05
    4c0e:	3f c0       	rjmp	.+126    	; 0x4c8e <DC_MOTOR+0x1a4>
	else if (__tmp > 65535)
    4c10:	6f 81       	ldd	r22, Y+7	; 0x07
    4c12:	78 85       	ldd	r23, Y+8	; 0x08
    4c14:	89 85       	ldd	r24, Y+9	; 0x09
    4c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	3f ef       	ldi	r19, 0xFF	; 255
    4c1c:	4f e7       	ldi	r20, 0x7F	; 127
    4c1e:	57 e4       	ldi	r21, 0x47	; 71
    4c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c24:	18 16       	cp	r1, r24
    4c26:	4c f5       	brge	.+82     	; 0x4c7a <DC_MOTOR+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	40 e2       	ldi	r20, 0x20	; 32
    4c36:	51 e4       	ldi	r21, 0x41	; 65
    4c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	bc 01       	movw	r22, r24
    4c42:	cd 01       	movw	r24, r26
    4c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	9e 83       	std	Y+6, r25	; 0x06
    4c4e:	8d 83       	std	Y+5, r24	; 0x05
    4c50:	0f c0       	rjmp	.+30     	; 0x4c70 <DC_MOTOR+0x186>
    4c52:	80 e9       	ldi	r24, 0x90	; 144
    4c54:	91 e0       	ldi	r25, 0x01	; 1
    4c56:	9c 83       	std	Y+4, r25	; 0x04
    4c58:	8b 83       	std	Y+3, r24	; 0x03
    4c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	f1 f7       	brne	.-4      	; 0x4c5e <DC_MOTOR+0x174>
    4c62:	9c 83       	std	Y+4, r25	; 0x04
    4c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c66:	8d 81       	ldd	r24, Y+5	; 0x05
    4c68:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6a:	01 97       	sbiw	r24, 0x01	; 1
    4c6c:	9e 83       	std	Y+6, r25	; 0x06
    4c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c70:	8d 81       	ldd	r24, Y+5	; 0x05
    4c72:	9e 81       	ldd	r25, Y+6	; 0x06
    4c74:	00 97       	sbiw	r24, 0x00	; 0
    4c76:	69 f7       	brne	.-38     	; 0x4c52 <DC_MOTOR+0x168>
    4c78:	14 c0       	rjmp	.+40     	; 0x4ca2 <DC_MOTOR+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c7c:	78 85       	ldd	r23, Y+8	; 0x08
    4c7e:	89 85       	ldd	r24, Y+9	; 0x09
    4c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c86:	dc 01       	movw	r26, r24
    4c88:	cb 01       	movw	r24, r22
    4c8a:	9e 83       	std	Y+6, r25	; 0x06
    4c8c:	8d 83       	std	Y+5, r24	; 0x05
    4c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c90:	9e 81       	ldd	r25, Y+6	; 0x06
    4c92:	9a 83       	std	Y+2, r25	; 0x02
    4c94:	89 83       	std	Y+1, r24	; 0x01
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	01 97       	sbiw	r24, 0x01	; 1
    4c9c:	f1 f7       	brne	.-4      	; 0x4c9a <DC_MOTOR+0x1b0>
    4c9e:	9a 83       	std	Y+2, r25	; 0x02
    4ca0:	89 83       	std	Y+1, r24	; 0x01
	 		_delay_ms(1000);
 }
    4ca2:	2e 96       	adiw	r28, 0x0e	; 14
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	f8 94       	cli
    4ca8:	de bf       	out	0x3e, r29	; 62
    4caa:	0f be       	out	0x3f, r0	; 63
    4cac:	cd bf       	out	0x3d, r28	; 61
    4cae:	cf 91       	pop	r28
    4cb0:	df 91       	pop	r29
    4cb2:	08 95       	ret

00004cb4 <__mulsi3>:
    4cb4:	62 9f       	mul	r22, r18
    4cb6:	d0 01       	movw	r26, r0
    4cb8:	73 9f       	mul	r23, r19
    4cba:	f0 01       	movw	r30, r0
    4cbc:	82 9f       	mul	r24, r18
    4cbe:	e0 0d       	add	r30, r0
    4cc0:	f1 1d       	adc	r31, r1
    4cc2:	64 9f       	mul	r22, r20
    4cc4:	e0 0d       	add	r30, r0
    4cc6:	f1 1d       	adc	r31, r1
    4cc8:	92 9f       	mul	r25, r18
    4cca:	f0 0d       	add	r31, r0
    4ccc:	83 9f       	mul	r24, r19
    4cce:	f0 0d       	add	r31, r0
    4cd0:	74 9f       	mul	r23, r20
    4cd2:	f0 0d       	add	r31, r0
    4cd4:	65 9f       	mul	r22, r21
    4cd6:	f0 0d       	add	r31, r0
    4cd8:	99 27       	eor	r25, r25
    4cda:	72 9f       	mul	r23, r18
    4cdc:	b0 0d       	add	r27, r0
    4cde:	e1 1d       	adc	r30, r1
    4ce0:	f9 1f       	adc	r31, r25
    4ce2:	63 9f       	mul	r22, r19
    4ce4:	b0 0d       	add	r27, r0
    4ce6:	e1 1d       	adc	r30, r1
    4ce8:	f9 1f       	adc	r31, r25
    4cea:	bd 01       	movw	r22, r26
    4cec:	cf 01       	movw	r24, r30
    4cee:	11 24       	eor	r1, r1
    4cf0:	08 95       	ret

00004cf2 <__udivmodqi4>:
    4cf2:	99 1b       	sub	r25, r25
    4cf4:	79 e0       	ldi	r23, 0x09	; 9
    4cf6:	04 c0       	rjmp	.+8      	; 0x4d00 <__udivmodqi4_ep>

00004cf8 <__udivmodqi4_loop>:
    4cf8:	99 1f       	adc	r25, r25
    4cfa:	96 17       	cp	r25, r22
    4cfc:	08 f0       	brcs	.+2      	; 0x4d00 <__udivmodqi4_ep>
    4cfe:	96 1b       	sub	r25, r22

00004d00 <__udivmodqi4_ep>:
    4d00:	88 1f       	adc	r24, r24
    4d02:	7a 95       	dec	r23
    4d04:	c9 f7       	brne	.-14     	; 0x4cf8 <__udivmodqi4_loop>
    4d06:	80 95       	com	r24
    4d08:	08 95       	ret

00004d0a <__udivmodhi4>:
    4d0a:	aa 1b       	sub	r26, r26
    4d0c:	bb 1b       	sub	r27, r27
    4d0e:	51 e1       	ldi	r21, 0x11	; 17
    4d10:	07 c0       	rjmp	.+14     	; 0x4d20 <__udivmodhi4_ep>

00004d12 <__udivmodhi4_loop>:
    4d12:	aa 1f       	adc	r26, r26
    4d14:	bb 1f       	adc	r27, r27
    4d16:	a6 17       	cp	r26, r22
    4d18:	b7 07       	cpc	r27, r23
    4d1a:	10 f0       	brcs	.+4      	; 0x4d20 <__udivmodhi4_ep>
    4d1c:	a6 1b       	sub	r26, r22
    4d1e:	b7 0b       	sbc	r27, r23

00004d20 <__udivmodhi4_ep>:
    4d20:	88 1f       	adc	r24, r24
    4d22:	99 1f       	adc	r25, r25
    4d24:	5a 95       	dec	r21
    4d26:	a9 f7       	brne	.-22     	; 0x4d12 <__udivmodhi4_loop>
    4d28:	80 95       	com	r24
    4d2a:	90 95       	com	r25
    4d2c:	bc 01       	movw	r22, r24
    4d2e:	cd 01       	movw	r24, r26
    4d30:	08 95       	ret

00004d32 <__udivmodsi4>:
    4d32:	a1 e2       	ldi	r26, 0x21	; 33
    4d34:	1a 2e       	mov	r1, r26
    4d36:	aa 1b       	sub	r26, r26
    4d38:	bb 1b       	sub	r27, r27
    4d3a:	fd 01       	movw	r30, r26
    4d3c:	0d c0       	rjmp	.+26     	; 0x4d58 <__udivmodsi4_ep>

00004d3e <__udivmodsi4_loop>:
    4d3e:	aa 1f       	adc	r26, r26
    4d40:	bb 1f       	adc	r27, r27
    4d42:	ee 1f       	adc	r30, r30
    4d44:	ff 1f       	adc	r31, r31
    4d46:	a2 17       	cp	r26, r18
    4d48:	b3 07       	cpc	r27, r19
    4d4a:	e4 07       	cpc	r30, r20
    4d4c:	f5 07       	cpc	r31, r21
    4d4e:	20 f0       	brcs	.+8      	; 0x4d58 <__udivmodsi4_ep>
    4d50:	a2 1b       	sub	r26, r18
    4d52:	b3 0b       	sbc	r27, r19
    4d54:	e4 0b       	sbc	r30, r20
    4d56:	f5 0b       	sbc	r31, r21

00004d58 <__udivmodsi4_ep>:
    4d58:	66 1f       	adc	r22, r22
    4d5a:	77 1f       	adc	r23, r23
    4d5c:	88 1f       	adc	r24, r24
    4d5e:	99 1f       	adc	r25, r25
    4d60:	1a 94       	dec	r1
    4d62:	69 f7       	brne	.-38     	; 0x4d3e <__udivmodsi4_loop>
    4d64:	60 95       	com	r22
    4d66:	70 95       	com	r23
    4d68:	80 95       	com	r24
    4d6a:	90 95       	com	r25
    4d6c:	9b 01       	movw	r18, r22
    4d6e:	ac 01       	movw	r20, r24
    4d70:	bd 01       	movw	r22, r26
    4d72:	cf 01       	movw	r24, r30
    4d74:	08 95       	ret

00004d76 <__divmodsi4>:
    4d76:	97 fb       	bst	r25, 7
    4d78:	09 2e       	mov	r0, r25
    4d7a:	05 26       	eor	r0, r21
    4d7c:	0e d0       	rcall	.+28     	; 0x4d9a <__divmodsi4_neg1>
    4d7e:	57 fd       	sbrc	r21, 7
    4d80:	04 d0       	rcall	.+8      	; 0x4d8a <__divmodsi4_neg2>
    4d82:	d7 df       	rcall	.-82     	; 0x4d32 <__udivmodsi4>
    4d84:	0a d0       	rcall	.+20     	; 0x4d9a <__divmodsi4_neg1>
    4d86:	00 1c       	adc	r0, r0
    4d88:	38 f4       	brcc	.+14     	; 0x4d98 <__divmodsi4_exit>

00004d8a <__divmodsi4_neg2>:
    4d8a:	50 95       	com	r21
    4d8c:	40 95       	com	r20
    4d8e:	30 95       	com	r19
    4d90:	21 95       	neg	r18
    4d92:	3f 4f       	sbci	r19, 0xFF	; 255
    4d94:	4f 4f       	sbci	r20, 0xFF	; 255
    4d96:	5f 4f       	sbci	r21, 0xFF	; 255

00004d98 <__divmodsi4_exit>:
    4d98:	08 95       	ret

00004d9a <__divmodsi4_neg1>:
    4d9a:	f6 f7       	brtc	.-4      	; 0x4d98 <__divmodsi4_exit>
    4d9c:	90 95       	com	r25
    4d9e:	80 95       	com	r24
    4da0:	70 95       	com	r23
    4da2:	61 95       	neg	r22
    4da4:	7f 4f       	sbci	r23, 0xFF	; 255
    4da6:	8f 4f       	sbci	r24, 0xFF	; 255
    4da8:	9f 4f       	sbci	r25, 0xFF	; 255
    4daa:	08 95       	ret

00004dac <__prologue_saves__>:
    4dac:	2f 92       	push	r2
    4dae:	3f 92       	push	r3
    4db0:	4f 92       	push	r4
    4db2:	5f 92       	push	r5
    4db4:	6f 92       	push	r6
    4db6:	7f 92       	push	r7
    4db8:	8f 92       	push	r8
    4dba:	9f 92       	push	r9
    4dbc:	af 92       	push	r10
    4dbe:	bf 92       	push	r11
    4dc0:	cf 92       	push	r12
    4dc2:	df 92       	push	r13
    4dc4:	ef 92       	push	r14
    4dc6:	ff 92       	push	r15
    4dc8:	0f 93       	push	r16
    4dca:	1f 93       	push	r17
    4dcc:	cf 93       	push	r28
    4dce:	df 93       	push	r29
    4dd0:	cd b7       	in	r28, 0x3d	; 61
    4dd2:	de b7       	in	r29, 0x3e	; 62
    4dd4:	ca 1b       	sub	r28, r26
    4dd6:	db 0b       	sbc	r29, r27
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	de bf       	out	0x3e, r29	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	09 94       	ijmp

00004de4 <__epilogue_restores__>:
    4de4:	2a 88       	ldd	r2, Y+18	; 0x12
    4de6:	39 88       	ldd	r3, Y+17	; 0x11
    4de8:	48 88       	ldd	r4, Y+16	; 0x10
    4dea:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dec:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dee:	7d 84       	ldd	r7, Y+13	; 0x0d
    4df0:	8c 84       	ldd	r8, Y+12	; 0x0c
    4df2:	9b 84       	ldd	r9, Y+11	; 0x0b
    4df4:	aa 84       	ldd	r10, Y+10	; 0x0a
    4df6:	b9 84       	ldd	r11, Y+9	; 0x09
    4df8:	c8 84       	ldd	r12, Y+8	; 0x08
    4dfa:	df 80       	ldd	r13, Y+7	; 0x07
    4dfc:	ee 80       	ldd	r14, Y+6	; 0x06
    4dfe:	fd 80       	ldd	r15, Y+5	; 0x05
    4e00:	0c 81       	ldd	r16, Y+4	; 0x04
    4e02:	1b 81       	ldd	r17, Y+3	; 0x03
    4e04:	aa 81       	ldd	r26, Y+2	; 0x02
    4e06:	b9 81       	ldd	r27, Y+1	; 0x01
    4e08:	ce 0f       	add	r28, r30
    4e0a:	d1 1d       	adc	r29, r1
    4e0c:	0f b6       	in	r0, 0x3f	; 63
    4e0e:	f8 94       	cli
    4e10:	de bf       	out	0x3e, r29	; 62
    4e12:	0f be       	out	0x3f, r0	; 63
    4e14:	cd bf       	out	0x3d, r28	; 61
    4e16:	ed 01       	movw	r28, r26
    4e18:	08 95       	ret

00004e1a <_exit>:
    4e1a:	f8 94       	cli

00004e1c <__stop_program>:
    4e1c:	ff cf       	rjmp	.-2      	; 0x4e1c <__stop_program>
